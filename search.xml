<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018年终</title>
    <url>/2019/01/01/2018%E5%B9%B4%E7%BB%88/</url>
    <content><![CDATA[<p>现在是2019年1月1日凌晨1点27分，对自己的2018年做一些总结。<a id="more"></a></p>
<p>刚刚翻看了2017年的年终总结，目前来看完成了一部分目标。先简单罗列一下2017年末制定的2018年的计划：</p>
<ul>
<li>薪资增加30%（完成）</li>
<li>给父母换一部手机（完成）</li>
<li>一次旅行（未完成）</li>
<li>开发第二技能（进行中）</li>
<li>学习英语（半弃疗）</li>
<li>啃完《Hadoop权威指南》（完成）</li>
<li>了解营销知识（未完成）</li>
</ul>
<h4 id="2018复盘"><a href="#2018复盘" class="headerlink" title="2018复盘"></a>2018复盘</h4><p>这样看起来2018年还是做了一些事情的。不过有一件非常重要的事情没有做是非常不应该的，我竟然没有2018年的年中总结。wtf，以后一定要坚持每半年做一次复盘。</p>
<h5 id="啃完《Hadoop权威指南》"><a href="#啃完《Hadoop权威指南》" class="headerlink" title="啃完《Hadoop权威指南》"></a>啃完《Hadoop权威指南》</h5><p>从完成的事情来看，2018年完成的第一个计划就是啃完了《Hadoop权威指南》。这个当时也是在前公司一边准备面试一边去啃的，当时的目标是对对整个体系有个大概的了解，并没有深入学习的计划。所以这个目标算是勉强完成吧。后面有时间还是要补充一下这部分知识的。</p>
<h5 id="薪资增加30"><a href="#薪资增加30" class="headerlink" title="薪资增加30%"></a>薪资增加30%</h5><p>薪资增加30%应该是18年少数能让我比较振奋的事情了。这个提薪幅度是因为今年完成了跳槽，现在看来还好跳的比较早，不然遇到年底的这些事情我可能还真没有信心去跳。当然这也要感谢我的女朋友每天对我换工作进度的监督，以及在我准备面试时候提供的帮助（猝不及防的狗粮）。</p>
<p>其实每次换工作都有着类似的经历，从最开始克服自己的懒惰，逼迫自己走出舒适区（这个真的很不容易）。接着开始准备简历，在准备简历的时候，如果你有定期的复盘，那么就很简单了，把复盘的内容拿出来，就能直接用来丰富你的简历。接下来就是投简历了，由于我是在职，不可能像校招时那样海投，刚开始我先选择了一些小公司，毕竟有将近两年的时间没有经历过面试了，对于性格内向的我来说，面试首先要克服的就是紧张心理。所以就先拿一些小公司来练练手，不过刚开始也不会面很多，毕竟原公司的工作还是要做的。而且是能电话面试尽量电话面试，电话里谈好了，再约时间去公司面试，投递简历的前两周，我抽了一天的时间，去面了2家公司。也算是找到一些状态，然后决定开始认真的投递简历了。电话聊了一些，发现市面上大部分公司对Spring的掌握还是蛮高的，这就非常被动了，毕竟我在原公司根本就不接触Spring，所以我也只能一边面试一边总结。除了Spring之外，就是一些JVM原理啊，HashMap的底层实现啊之类的，总之大多是一些偏原理的东西，可能是我简历中的项目经历和大部分互联网公司所要求的不太相符吧，所以他们问的项目相关的东西挺少的。最终也是成功跳槽，新公司的氛围不错，大家做事都是有工匠精神的，感觉是真的在做技术，而不仅仅是“干活”。特别是当时面试我的leader，面试的时候简直就被他给折服了，那就是大牛啊，每天看着大牛比你还努力，你有什么资格不努力？不过后来leader的离职真的让我挺郁闷的。好在现在自己也养成了一些习惯，对于技术的学习不再浮于表面，而是希望有更深入的钻研。</p>
<h5 id="给父母换一部手机"><a href="#给父母换一部手机" class="headerlink" title="给父母换一部手机"></a>给父母换一部手机</h5><p>父母的手机是在我大四实习的时候给他们买的，在那之前，我妈妈还用着非智能机呢，能给她换一部智能机也算是让我有点小骄傲的事情了，虽然当时每月只有3k的实习工资，但是还是省下了一些钱给父母都换了手机，17年年末也盘算着该给父母再换一个手机了，现在薪资比当时高了好多倍，手机自然也要换好的。他们还是那样，嘴上嫌贵，用起来“真香”。这件事算是18年完成的最得意的一件事了。</p>
<h5 id="一次旅行"><a href="#一次旅行" class="headerlink" title="一次旅行"></a>一次旅行</h5><p>今年竟然没有一次旅行，现在想想有点接受不了，不过也是由于跳槽导致请假的节奏有些乱，应该算是有得有失吧，没什么好说的，19年一定要有。</p>
<h5 id="开发第二技能"><a href="#开发第二技能" class="headerlink" title="开发第二技能"></a>开发第二技能</h5><p>关于第二技能，还是决定从写作开始，今年开始做了公号，不过有点三天打鱼两天晒网的意思，一方面是写了没多久就感觉自己被掏空了，于是开始强迫自己输入，另一方面也是刚到新公司，工作比较忙，所以基本就只能保证每周一篇的技术文章，除了写作，在理财方面也更进一步的学习，并且已经开始实践了。这个当时并没有做定量的目标，所以只能算是进行中，不过万事开头难，我已经迈出第一步了。</p>
<h5 id="学习英语"><a href="#学习英语" class="headerlink" title="学习英语"></a>学习英语</h5><p>这个……真的是半弃疗状态了，为什么是半弃疗呢，因为那些背单词，练听力的学习方法已经放弃了，实在是没时间了。现在提高英语能力的途径就只剩下看外国人的blog了。</p>
<h5 id="了解营销知识"><a href="#了解营销知识" class="headerlink" title="了解营销知识"></a>了解营销知识</h5><p>说实话，我忘了有这个计划了。不过18年虽然没有学到营销知识，但是学到了不少产品知识，这让我在怼产品的路上越走越远了，19年也会继续学习产品相关的知识。希望我们的产品经理不想砍我。</p>
<p>2018年算是有得有失吧，不过现在看来还是做得不够好，中间也有一段时间放松了对自己的要求，希望2019年的自己比2018年的自己更好。所以，计划还是要有的，也会尽量都去实现。</p>
<h4 id="2019计划"><a href="#2019计划" class="headerlink" title="2019计划"></a>2019计划</h4><h5 id="学习英语-1"><a href="#学习英语-1" class="headerlink" title="学习英语"></a>学习英语</h5><p>随着工作的深入，越来越感受到英语的重要性，作为一名程序员，想走在别人前面，必然要学好英语。不过我还是按照目前这个思路来吧，通过英文的文章来提高阅读能力。再就是跟着女朋友蹭一下网课。仅此而已吧，不能放弃自己。</p>
<h5 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h5><p>香港迪士尼</p>
<h5 id="LeetCode-100题"><a href="#LeetCode-100题" class="headerlink" title="LeetCode 100题"></a>LeetCode 100题</h5><p>平均3天一道题，简单的可能一晚上能做3道，所以这个目标应该不难实现，贵在坚持。</p>
<h5 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h5><p>技术文章想要日更还是比较困难的，所以最少保证每周一篇干货吧，其他时间就写一点别的东西，目标是做到日更。</p>
<h5 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h5><p>坚持阅读，2018年坚持的不错，利用通勤时间，看了很多有意义的文章，后面要在阅读的同时更加深入的思考。</p>
<h5 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h5><p>很有必要的事情，就是时间成本实在是太特么高了，2018年又一次放弃了，希望2019年可以坚持。</p>
<h5 id="收入"><a href="#收入" class="headerlink" title="收入"></a>收入</h5><p>今年不出意外是不会再次跳槽了，所以薪资的涨幅应该也不会有那么大了，不过今年的目标仍然是将收入提高30%。</p>
<h5 id="给父母"><a href="#给父母" class="headerlink" title="给父母"></a>给父母</h5><p>每年的计划里都有给父母买东西这一项，今年计划买一些提升幸福感的东西，比如扫地机器人、洗碗机等。这项预计春节就能完成。</p>
<h5 id="给女朋友"><a href="#给女朋友" class="headerlink" title="给女朋友"></a>给女朋友</h5><p>包治百病吧</p>
<p>我一直向往自由却从未自由，一直在心里提醒自己“延迟满足”。2019，干就完了！</p>
]]></content>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年终</title>
    <url>/2020/01/01/2019%E5%B9%B4%E7%BB%88/</url>
    <content><![CDATA[<p>2019年已经彻底过去了，按照惯例，我还是要对自己做一个总结，以及立下2020年的flag。<a id="more"></a></p>
<h3 id="lt-2019"><a href="#lt-2019" class="headerlink" title="&lt;/2019>"></a>&lt;/2019></h3><p>先来回顾一下2019年吧，我昨天特意去翻了一下自己立下的flag。发现实现大概只实现了1.5个，这一年的遗憾有不少，不过也有一些很不错的收获。</p>
<h4 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h4><p>今年的环境大家应该都感受到了，本来我是想稳定一些的，不过在上一家公司遇到了一些问题，所以还是决定折腾一番。面试过程并不算顺利，认识到了自己的不足，特别是在算法方面，本来计划今年要刷LeetCode的，但是没有坚持住，面试过程中临时抱佛脚的作用也不是很大。不过好在今年把Redis的技能点加了不少，这也成为了我在面试过程中的加分项。</p>
<p>最后在前leader的推荐下，来到了现在的公司，虽然来的时间不长，发现公司的问题也是不少，这让我又认清了一点现实，没有完全符合自己心意的公司，除非是自己开的。每个公司或多或少都会有些问题，能忍受就继续干，受不了就离开。如果你想在公司有好的发展，就尝试去解决这些问题。</p>
<p>新工作就有新的同事，怎么说呢，总体还是不错的，也有些是比较难接触的。</p>
<h4 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h4><p>虽然没有坚持刷LeetCode，但学习却也没有落下，今年上半年以Redis为主，学习的还算比较深入。也算是对自己比较满意的一点，下半年开始学习Rust，也在看Elasticsearch，不过精力有限，同时学的压力还是比较大的。除了这两个，今年在极客时间上也花了比较多的时间，主要是架构方面的知识。目前在进行的还有设计模式和算法。</p>
<p>今年的面试也是对之前学习成果的一个检验，也更加坚定了自己的信念：学习不会马上见成效，当你用到学过的知识时，你会感谢曾经的自己。</p>
<p>本来今年还计划学习英语的，后来基本融入到平时了，现在每周翻译的文章也算是对英语的学习吧。</p>
<h4 id="关于阅读和写作"><a href="#关于阅读和写作" class="headerlink" title="关于阅读和写作"></a>关于阅读和写作</h4><p>阅读和写作一起说吧，今年阅读还是比较多的，周末不忙的话基本都会抽出时间来读一些书。并不限于技术书籍，其他方面的一些书读起来也是很有趣的。今年印象比较深刻的有《1984》、《乌合之众》和《启示录》，推荐大家阅读。今年读书计划算是圆满完成，因为把去年买的书都看完了。</p>
<p>另外，在旅行的路上读书真的是个很好的选择，因为在路上的时间是很少有的一大块时间可以拿来阅读的。这里说的读书特指纸质书籍，碎片时间的话，更多的利用知识星球和微信读书来满足阅读需求把。</p>
<p>至于写作，算上原创和翻译，2019年一共输出了59篇文章，平均一周一篇多一点，之前天真的我还希望做到日更，现实狠狠的给了我一耳光，告诉我技术文真的做不到日更啊。不过坚持也是有些收获的，在这里感谢所有给我赞赏的朋友，感谢你们的认可。</p>
<h4 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h4><p>本来计划今年去香港旅行，后来因为一些大家都懂的原因就耽搁了。不过今年也走了一些地方，离职那段时间去了苏杭两个城市，体会了在北京从没体会过的热。国庆时又去了重庆和四川，少不入川不是随便说说的，真心喜欢成都的生活，实在是太好吃了。还抽时间回了一趟母校，回顾了一下海鲜+啤酒的痛风套餐。</p>
<p>今年认识了一些新朋友，都是很努力的，希望能跟着这些朋友一起成长。</p>
<h3 id="lt-2020"><a href="#lt-2020" class="headerlink" title="&lt;2020>"></a>&lt;2020></h3><p>过去的一年基本就是这样已经过去了，遗憾和收获都有，新年的目标还是要有的，万一实现了呢。</p>
<h4 id="关于工作-1"><a href="#关于工作-1" class="headerlink" title="关于工作"></a>关于工作</h4><p>就希望工作能顺利一些吧，自己也会尽力做好自己应该做的。</p>
<h4 id="关于学习-1"><a href="#关于学习-1" class="headerlink" title="关于学习"></a>关于学习</h4><p>今年的目标首先是搞定Rust，然后是Elasticsearch，希望能在社区有些贡献。另外在微服务治理方面也会花些经历，毕竟是工作中要用到的。</p>
<h4 id="关于阅读和写作-1"><a href="#关于阅读和写作-1" class="headerlink" title="关于阅读和写作"></a>关于阅读和写作</h4><p>阅读就没什么好说的，书都买好了，今年还是要抽时间读完。自己花钱买的书，自己也要花时间读啊。</p>
<p>写作就继续坚持现在的节奏，每周一篇原创和一篇翻译，后面也会考虑把自己平时的笔记放出来。另外还欠一篇IDEA插件推荐，争取下周整理出来。</p>
<h4 id="关于生活-1"><a href="#关于生活-1" class="headerlink" title="关于生活"></a>关于生活</h4><p>今年有一件大事。</p>
<p>感谢2019年给过我帮助的所有人。新的一年祝你们一切顺利。</p>
<p>感谢各位读者大大，谢谢你们的支持和鼓励。我会努力做得更好。</p>
<p>愿历尽千帆，归来仍少年。</p>
<p>最后，湖人总冠军。</p>
]]></content>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch从入门到放弃：人生若只如初见</title>
    <url>/2019/09/19/Elasticsearch%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%E4%BA%BA%E7%94%9F%E8%8B%A5%E5%8F%AA%E5%A6%82%E5%88%9D%E8%A7%81/</url>
    <content><![CDATA[<p>Elasticsearch系列开坑啦，入门总是愉快的，学一学再放弃啊。<a id="more"></a></p>
<h3 id="Apache-Lucene简介"><a href="#Apache-Lucene简介" class="headerlink" title="Apache Lucene简介"></a>Apache Lucene简介</h3><h4 id="Lucene基本概念"><a href="#Lucene基本概念" class="headerlink" title="Lucene基本概念"></a>Lucene基本概念</h4><p>Apache Lucene是ElasticSearch使用的全文检索库。了解Lucene之前，需要先了解一些概念：</p>
<ul>
<li>文档：索引和搜索到主要数据载体，它包含一个或多个字段，存放将要写入索引或从索引搜索出来的数据</li>
<li>字段：文档的一个片段，是一个K-V结构</li>
<li>词项：搜索时的一个单位，代表文本中的某个词</li>
<li>词条：词项在字段中的一次出现，包括词项的文本、开始和结束的位移以及类型</li>
<li>倒排索引：倒排索引可以快速获取包含某个单词的文档。倒排索引由两部分组成：单词词典和倒排文件</li>
<li>单词词典：单词词典是由文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引项记载单词本身的一些信息以及指向「倒排列表」的指针</li>
<li>倒排列表：倒排列表记载了出现过某个单词的所有文档的列表以及该单词在文档中的位置，每条记录称为一个倒排项（Posting）</li>
<li>倒排文件：所有单词的倒排列表往往顺序存在磁盘的某个文件，这个文件称为倒排文件</li>
</ul>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1568360926/Blog/ES/01/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.png" alt="inverted index"></p>
<p>其中最重要的是倒排索引，为了方便理解，我们看一个简单的例子。</p>
<p>假设这里有三句话：</p>
<p>T[0] = “it is what it is”</p>
<p>T[1] = “what is it”</p>
<p>T[2] = “it is a banana”</p>
<p>倒排索引通常有两种表现形式：</p>
<ul>
<li>inverted file index{词项，词项所在文档ID}</li>
</ul>
<p>“a” : {2}</p>
<p>“banana” : {2}</p>
<p>“is” : {0, 1, 2}</p>
<p>“it” : {0, 1, 2}</p>
<p>“what” : {0,1}</p>
<ul>
<li>full inverted index{词项，(词项所在文档ID，在具体文档中的位置)}</li>
</ul>
<p>“a” : {(2, 2)}</p>
<p>“banana” : {(2, 3)}</p>
<p>“is” : {(0, 1), (0, 4), (1, 1), (2, 1)}</p>
<p>“it” : {(0, 0), (0, 3), (1, 2), (2, 0)}</p>
<p>“what” : {(0, 2), (1, 0)}</p>
<h4 id="Lucene查询语言"><a href="#Lucene查询语言" class="headerlink" title="Lucene查询语言"></a>Lucene查询语言</h4><p>在了解了Lucene的一些基本概念之后，还需要了解Lucene的查询语言。一个查询通常被分割为词项和操作符，词项可以是单个词或短语。操作符包括：</p>
<ul>
<li>AND：文档同时包含AND两边的词项时才返回</li>
<li>OR：文档包含OR两边的词项中任意一个时就返回</li>
<li>NOT：不包含NOT操作符后面的词项</li>
<li>+：只有包含+操作符后面词项的文档才会返回。例如，查询+lucene apache表示必须包含lucene，apache可包含可不包含</li>
<li>-：匹配的文档不能出现-操作符后的词项</li>
<li>冒号：查询title:elasticsearch表示要查询所有在title字段中包含词项elastisearch的文档</li>
<li>通配符（?/*）：?匹配任意一个字符，*匹配任意多个字符（出于性能考虑，通配符不能作为词项的第一个字符）</li>
<li>~：用于Lucene中的模糊查询，~后面跟的整数值确定了近似词项与原始词项的最大编辑距离。例如查询boy~2，那么boy和boys这两个词项都能匹配，用于短语时，则表示词项之间可以接受的最大距离</li>
<li>^：用于对词项进行加权</li>
<li>花括号：表示范围查询</li>
</ul>
<p>对于一些特殊字符的查询，我们通常使用反斜杠进行转义。</p>
<h3 id="Elasticsearch基本概念"><a href="#Elasticsearch基本概念" class="headerlink" title="Elasticsearch基本概念"></a>Elasticsearch基本概念</h3><p>了解了Lucene的基本概念以后，我们回到正题，再来看一下Elasticsearch的一些基本概念，可能和Lucene有一些重复，不过还是有一些Elasticsearch特有的属性。</p>
<ul>
<li><strong>索引（index）：</strong>数据存储在索引中，可以向索引写入文档或者从索引读取文档，Elasticsearch的索引可能由一个或多个Lucene索引构成。</li>
<li><strong>文档（document）：</strong>文档由字段构成，每个字段有它的字段名以及一个或多个字段值</li>
<li><strong>映射（mapping）：</strong>用于存储元信息，这些元信息决定了如何将输入文本分割为词条，哪些词条应该被过滤掉等</li>
<li><strong>类型（type）：</strong>每个文档都有与之对应的类型，同一类型下的文档数据结构通常保持一致，不同文档可以有不同的映射。但是在Elasticsearch7以后已经删除了这个概念</li>
<li><strong>节点（node）：</strong>集群中每个ES实例都称作一个节点</li>
<li><strong>集群（cluster）：</strong>在生产环境中，我们的数据量和查询压力可能超过了单机负载，因此需要多个节点协同处理</li>
<li><strong>分片（shard）：</strong>ES会将数据散落到多个Lucene索引上。这些Lucene索引称为分片。ES会自动进行分片处理</li>
<li><strong>副本（replica）：</strong>ES会为每个分片创建冗余的副本，一方面分摊请求压力，另一方面是为了保证数据不会丢失。ES支持在任意时间点添加或移除副本</li>
</ul>
<h3 id="Elasticsearch的启动过程"><a href="#Elasticsearch的启动过程" class="headerlink" title="Elasticsearch的启动过程"></a>Elasticsearch的启动过程</h3><p>当Elasticsearch启动时，它使用广播技术来发现同一集群内的其他节点，集群中会有一个节点被选为master节点。master节点负责管理集群状态，并在集群中节点数量变化时做出反应。但从用户角度来看，master节点与其他节点没有什么区别，命令可以发送的任意节点执行。</p>
<p>master节点会检查所有分片，决定哪些分片为主分片。主分片确定以后，集群状态为黄色，此时可以接收查询。然后master节点会决定是否要对各个分片创建副本，副本也没有问题以后，集群状态变为绿色。</p>
<p>Elasticsearch的集群状态分为3种：</p>
<ul>
<li>绿色：一切完好</li>
<li>黄色：所有数据都可用，但有些分片没有分配副本</li>
<li>红色：有些数据不可用</li>
</ul>
<p>关于Elasticsearch的启动过程，后面还会有更加深入的讨论。</p>
<p>敬请期待。</p>
]]></content>
      <tags>
        <tag>Elasticsearch笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink学习笔记：时间与Watermark</title>
    <url>/2025/06/30/Flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%97%B6%E9%97%B4%E4%B8%8EWatermark/</url>
    <content><![CDATA[<p>在前文中，我学习 Flink 的整体架构，接下来的几篇文章，我将重点学习一下 Flink 的几个核心概念。包括时间属性、Watermark、窗口、状态以及容错机制。今天就来学习时间属性和 Watermark。<a id="more"></a></p>
<h3 id="时间属性"><a href="#时间属性" class="headerlink" title="时间属性"></a>时间属性</h3><p>首先来学习 Flink 的时间属性，作为流处理引擎，时间是实时数据处理的重要依赖，特别是在做时序分析或者特定时间段数据处理时，时间的概念更显得尤为重要。</p>
<p>Flink 中支持三种时间属性，分别是：</p>
<ul>
<li><p>EventTime：事件时间，即为事件产生的时间。</p>
</li>
<li><p>ProcessTime：处理时间，Flink 算子处理事件的时间。</p>
</li>
<li><p>IngestionTime：摄入时间，Flink 读取事件的时间。</p>
</li>
</ul>
<p>这样描述可能比较抽象，我们通过一张图来看一下。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1750094745/Blog/flink/1/flink_time.png" alt="FlinkTime"></p>
<p>从上图中可以看出，在时间产生/存储时，记录一个设备时间，就是 Event Time。当 Flink 的 DataSource 读取到事件时，这时再记录一个时间，这就是 Ingestion Time。在 Flink 程序中，每个算子处理事件时，又会记录一个时间，这个时间就是 Process Time。</p>
<h3 id="Watermark"><a href="#Watermark" class="headerlink" title="Watermark"></a>Watermark</h3><p>介绍完了时间概念，再来看下 Watermark 的概念。它是 Flink 处理迟到事件的妙招。</p>
<p>Watermark 本身也属于一种特殊的事件，它由 Source 生成，同时携带由 Timestamp，并且会跟随正常的事件一起在 Flink 算子之间流转。Watermark 的作用是定义何时停止等待较早的事件。这么介绍可能比较抽象，下面我们通过一些具体的例子来进行更进一步的说明。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1751033706/Blog/flink/1/watermark.png" alt="watermark"></p>
<p>上图代表的是一段乱序的事件数据流。假设我们定义 maxOutOfOrderness 为4，也就是容忍最大迟到时间为4（这里不带具体时间单位，可能是4秒也可能是4分钟）。当我们收到时间戳为7的事件时，就会生成一个时间为3的 Watermark。这代表着3之前的数据都已就绪。如果此时再有小于3的数据，我们认为它是迟到数据。</p>
<p>而对于迟到的数据，通常有三种处理方法：</p>
<ul>
<li><p>重新开启已经关闭的窗口，重新计算并修正结果</p>
</li>
<li><p>将迟到事件使用旁路输出收集起来单独处理</p>
</li>
<li><p>将迟到事件视为错误消息丢弃</p>
</li>
</ul>
<p>在 Flink 中 Watermark 本身是没有意义的，它的主要作用是作为窗口的触发条件。窗口可以认为是一个时间段，它有开始时间和结束时间。在窗口内可以计算一批事件的统计结果。关于窗口，我们后面再做详细介绍。</p>
<p>那么 Watermark 是如何触发窗口的呢？答案是必须要满足以下两个条件：</p>
<ol>
<li><p>Watermark 的时间戳 &gt;= 窗口的 end_time</p>
</li>
<li><p>窗口中有数据</p>
</li>
</ol>
<p>从概念上看还是比较抽象，我们还用上面的数据流作为例子，Watermark 设置为最大时间减 4，假设我们设置10秒一个窗口。关键代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">SingleOutputStreamOperator&lt;Event&gt; withTimestampsAndWatermarks = source</span><br><span class="line">                .assignTimestampsAndWatermarks(</span><br><span class="line">                        WatermarkStrategy.forGenerator(ctx -&gt; <span class="keyword">new</span> CustomWatermarkGenerator())</span><br><span class="line">                                .withTimestampAssigner(((event, l) -&gt; event.timestamp))</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">OutputTag&lt;Event&gt; lateTag = <span class="keyword">new</span> OutputTag&lt;Event&gt;(<span class="string">"late-tag"</span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">SingleOutputStreamOperator&lt;String&gt; windowResult = withTimestampsAndWatermarks</span><br><span class="line">        .keyBy(event -&gt; event.num)</span><br><span class="line">        .window(TumblingEventTimeWindows.of(Time.seconds(<span class="number">10</span>)))</span><br><span class="line">        .sideOutputLateData(lateTag)</span><br><span class="line">        .process(<span class="keyword">new</span> ProcessWindowFunction&lt;Event, String, Long, TimeWindow&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Long key, Context context, Iterable&lt;Event&gt; elements, Collector&lt;String&gt; out)</span> </span>&#123;</span><br><span class="line">             <span class="comment">// 一些逻辑处理</span></span><br><span class="line">             out.collect(result);</span><br><span class="line">         &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理迟到数据</span></span><br><span class="line">DataStream&lt;Event&gt; lateStream = windowResult.getSideOutput(lateTag);</span><br><span class="line">lateStream.process(<span class="keyword">new</span> ProcessFunction&lt;Event, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(Event event, Context ctx, Collector&lt;String&gt; out)</span> </span>&#123;</span><br><span class="line">        out.collect(<span class="string">"迟到事件: "</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).print();</span><br><span class="line">***</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Event event, <span class="keyword">long</span> l, WatermarkOutput watermarkOutput)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> eventTime = event.timestamp;</span><br><span class="line">    <span class="comment">// 使用CAS确保线程安全</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> current = currentMaxTime.get();</span><br><span class="line">        <span class="keyword">if</span> (eventTime &lt;= current) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (currentMaxTime.compareAndSet(current, eventTime)) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPeriodicEmit</span><span class="params">(WatermarkOutput watermarkOutput)</span> </span>&#123;</span><br><span class="line">    watermarkOutput.emitWatermark(<span class="keyword">new</span> Watermark(currentMaxTime.get() - timeDiff));</span><br><span class="line">&#125;</span><br><span class="line">***</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Jackeyzhe/flink-training/blob/feature/wz-demo/common/src/main/java/org/apache/flink/training/examples/watermark/WatermarkDemo.java" target="_blank" rel="noopener">完整代码我放在 github 上了</a></p>
<p>当我们输入测试数据时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>,<span class="number">1750867204000</span></span><br><span class="line"><span class="number">2</span>,<span class="number">1750867202000</span></span><br><span class="line"><span class="number">7</span>,<span class="number">1750867207000</span></span><br><span class="line"><span class="number">10</span>,<span class="number">1750867210000</span></span><br><span class="line"><span class="number">9</span>,<span class="number">1750867209000</span></span><br><span class="line"><span class="number">15</span>,<span class="number">1750867215000</span></span><br><span class="line"><span class="number">12</span>,<span class="number">1750867212000</span></span><br><span class="line"><span class="number">13</span>,<span class="number">1750867213000</span></span><br><span class="line"><span class="number">25</span>,<span class="number">1750867225000</span></span><br><span class="line"><span class="number">14</span>,<span class="number">1750867214000</span></span><br><span class="line"><span class="number">35</span>,<span class="number">1750867235000</span></span><br></pre></td></tr></table></figure>
<p>可以看到如下输出：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1751035105/Blog/flink/1/%E6%88%AA%E5%B1%8F2025-06-27_22.35.50.png" alt="print"></p>
<p>通过输出的日志，我们可以看出，当watermark推进到大于等于时间窗口的结束时间时，窗口就会完成计算并关闭。而对于迟到的数据，我们可以通过侧输出流单独处理，也可以通过设置<code>allowedLateness</code>，使窗口重新打开。</p>
<h3 id="生成-Watermark"><a href="#生成-Watermark" class="headerlink" title="生成 Watermark"></a>生成 Watermark</h3><p>了解了 Watermark 的原理之后，我们再来看一下如何生成 Watermark。在 Flink 中，需要使用 WatermarkStrategy 来定义如何生成时间戳和 watermark。WatermarkStrategy 继承了 TimestampAssignerSupplier 和 WatermarkGeneratorSupplier 两个接口，其中 TimestampAssignerSupplier 定义了抽取 EventTime 的方法，而 WatermarkGeneratorSupplier 则是定义了如何生成 Watermark 的方法。</p>
<h4 id="Flink-内置的-Watermark-生成器"><a href="#Flink-内置的-Watermark-生成器" class="headerlink" title="Flink 内置的 Watermark 生成器"></a>Flink 内置的 Watermark 生成器</h4><p>Flink 中内置了两个 watermark 生成器。分别是 AscendingTimestampsWatermarks 和 BoundedOutOfOrdernessWatermarks。</p>
<p>我们先来看 BoundedOutOfOrdernessWatermarks，它定义了一个 watermark 滞后于最大事件时间一个固定值的 watermark 生成器。在使用时，可以给定一个时间，这样 Flink 就会 根据最大的 eventTime 来周期性的生成 watermark，例如，我们前面定义的 watermark 滞后4秒，就可以写成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WatermarkStrategy.forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">4</span>));</span><br></pre></td></tr></table></figure>
<p>AscendingTimestampsWatermarks 是单调递增时间分配器，也就是只处理有序的数据，它继承了 BoundedOutOfOrdernessWatermarks，并且最大容忍时间为0。在使用时，可以直接通过以下方法生成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WatermarkStrategy.forMonotonousTimestamps();</span><br></pre></td></tr></table></figure>
<h4 id="自定义-WatermarkGenerator"><a href="#自定义-WatermarkGenerator" class="headerlink" title="自定义 WatermarkGenerator"></a>自定义 WatermarkGenerator</h4><p>除了上面两个内置的 WatermarkGenerator 外，我们还可以自定义，实现起来也比较简单。只需要实现 WatermarkGenerator 接口并重写 onEvent 和 onPeriodicEmit 两个方法即可。onEvent 是每个事件到来时调用一次，可以用来记录最大事件时间。onPeriodicEmit 则是周期性调用，可以生成 watermark。在前面的例子中，我使用的 CustomWatermarkGenerator 就是自定义的 watermark，对应的实现也在前文中贴了。</p>
<h3 id="如何处理空闲数据源"><a href="#如何处理空闲数据源" class="headerlink" title="如何处理空闲数据源"></a>如何处理空闲数据源</h3><p>最后，再补充一个与 watermark 相关的比较重要的特性。在 Flink 中，会有一些算子有多个输入源。这时，这个算子的 watermark 是以它收到的数据源中最小的 eventTime 来计算的。直接看官网的例子：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1751294872/Blog/flink/1/parallel_streams_watermarks.svg" alt="parallel_stream_watermark"></p>
<p>那么这里就存在一个问题：如果一个输入源数据量很少，很久才发一条消息，而另一个数据源发了很多消息，那么就会在下游算子中积累很多消息等待处理，这对于整个系统的稳定性造成了很大的风险。</p>
<p>那这种情况有办法处理吗？答案是肯定的，Flink 提供了 withIdleness 方法，它可以用来检测空闲数据源，如果超过一定时间没有数据到来，Flink 认为这个数据源属于空闲数据源，这时就不会再阻塞下游算子触发窗口。达到定期处理数据的目的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天我们先了解了 Flink 中时间的概念，EventTime 是事件产生的时间，通常由上游数据源生成，ProcessTime 是处理时间，通常由处理算子本身生成，IngestionTime是摄入时间，通常由 Flink 的 Source 生成。</p>
<p>接着我们由了解了 Flink 的 watermark，它是窗口触发的条件，在处理迟到数据时发挥着重要的作用。我们可以定义可以容忍的最大迟到时间，这样当遇到乱序数据时也可以得到正确的结果。</p>
]]></content>
      <tags>
        <tag>Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo!</title>
    <url>/2018/08/05/Hello-Hexo/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Flink学习笔记：整体架构</title>
    <url>/2025/06/09/Flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>开一个新坑，系统性的学习下 Flink，计划从整体架构到核心概念再到调优方法，最后是相关源码的阅读。<a id="more"></a></p>
<!-- more -->
<p>今天就来学习 Flink 整体架构，我们先看官网的架构图</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1647276646/Blog/flink/0/flink0_0.png" alt="Flink Architecture"></p>
<p>图中包含三部分，分别是 Client、JobManager 和 TaskManager。其中 Client 并不属于 Flink 集群，它主要用来把用户编写的程序翻译成 StreamGraph 然后优化成 JobGraph，再将 JobGraph 提交到 Flink 集群执行。</p>
<h3 id="JobManager"><a href="#JobManager" class="headerlink" title="JobManager"></a>JobManager</h3><p>Flink 集群的 JobManager 是用来接收 Client 提交的任务，并且分发给 TaskManager 去执行。此外，JobManager 还有一些其他的职责，例如任务调度，协调 checkpoint 和协调从失败中恢复。</p>
<p>每个 Flink 集群至少要有一个 JobManager，但在生产环境中通常是高可用模式部署，即部署多台 JobManager，其中一台作为 Leader，其他的作为 Standby 节点。当 Leader 挂掉时，其他的 Standby 节点会有一台被选举为新的 Leader 提供服务。这样就能避免 JobManager 单机故障影响到整个 Flink 集群的可用性。</p>
<p>JobManager 主要由以下几部分组成，下面我们分别来看每部分的作用。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1749308494/Blog/flink/0/JobManager.png" alt="JobManager"></p>
<h4 id="DataFlow-Graph"><a href="#DataFlow-Graph" class="headerlink" title="DataFlow Graph"></a>DataFlow Graph</h4><p>JobManager 收到 JobGraph 之后，根据并行度的设置，将各个算子任务拆分成并行的子任务，最终生成 ExecutionGraph。</p>
<h4 id="Checkpoint-coordinator"><a href="#Checkpoint-coordinator" class="headerlink" title="Checkpoint coordinator"></a>Checkpoint coordinator</h4><p>Checkpoint 是 Flink 最核心的概念之一，Flink 的容错机制主要靠 checkpoint 来保障。而 checkpoint 的生成会恢复则由 checkpoint coordinator 来负责。</p>
<h4 id="Job-Dispatch"><a href="#Job-Dispatch" class="headerlink" title="Job Dispatch"></a>Job Dispatch</h4><p>Job Dispatch 提供了 REST 接口用于提交 Flink 任务，并为每个任务启动一个 JobMaster。JobMaster 负责管理单个 JobGraph 的执行。</p>
<h4 id="Task-Scheduling"><a href="#Task-Scheduling" class="headerlink" title="Task Scheduling"></a>Task Scheduling</h4><p>Task Scheduling 负责 Task 部署和调度，值得一提的是，JobManager 和 TaskManager 以及 Client 之间的通信都是通过一个叫 Actor System 的 RPC 系统实现的。</p>
<h4 id="Resource-Manager"><a href="#Resource-Manager" class="headerlink" title="Resource Manager"></a>Resource Manager</h4><p>Resource Manager 负责集群中的资源的分配回收，它管理的资源单元叫做 task slot，对于不同的部署环境，Resource Manager 有不同的实现，</p>
<h4 id="Actor-System"><a href="#Actor-System" class="headerlink" title="Actor System"></a>Actor System</h4><p>Actor System 是 Flink 集群中的一种 RPC 通信的组件，JobManager 和 TaskManager 以及 Client 之间的通信都是基于 Actor System 的。而 TaskManager 之间的数据传递是基于 Netty 的。</p>
<h3 id="TaskManager"><a href="#TaskManager" class="headerlink" title="TaskManager"></a>TaskManager</h3><p>聊完了 JobManager，我们再来看下 TaskManager 的结构。TaskManager 主要负责执行作业的 task，并缓存和交换数据流。TaskManager 中最小的资源调度单位是 task slot，这点在前面介绍 Resource Manager 时也提到过。它表示并发处理 task 的数量。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1749399164/Blog/flink/0/TaskManager.png" alt="TaskManager"></p>
<h4 id="Task-Execution"><a href="#Task-Execution" class="headerlink" title="Task Execution"></a>Task Execution</h4><p>TaskManager 在接到 JobManager 部署的任务后，就会申请相应的 task slot 去执行任务。</p>
<h4 id="Data-Exchange"><a href="#Data-Exchange" class="headerlink" title="Data Exchange"></a>Data Exchange</h4><p>Data Execution 主要负责 TaskManager 之间的数据交互的一些操作，这里主要关注逻辑层面，例如一些 shuffle 操作。而网络传输则主要是由 Network Manager 来实现。</p>
<h4 id="Memory-Management"><a href="#Memory-Management" class="headerlink" title="Memory Management"></a>Memory Management</h4><p>Memory Management 负责 TaskManager 的内存管理，在执行任务过程中，接收到的一些数据是需要放在内存中进行处理的。相应的内存管理操作依赖于 Memory Management 模块。</p>
<h4 id="Actor-System-1"><a href="#Actor-System-1" class="headerlink" title="Actor System"></a>Actor System</h4><p>Actor System 我们在前面提到过，TaskManager 和 JobManager 之间的通信全靠它。</p>
<h4 id="Network-Manager"><a href="#Network-Manager" class="headerlink" title="Network Manager"></a>Network Manager</h4><p>Network Manager 主要负责 TaskManager 之间的数据交互，它是基于 Netty 实现的。</p>
<p>最后多提一个 Graph 的概念，前面我们已经了解到了 JobManager 会将 JobGraph 根据并行度的配置转换成 ExecutionGraph。在这之后，JobManager 会对作业进行调度，将 task 部署到各个 TaskManager 上，最终就形成了物理执行图，也就是 PhysicalGraph。</p>
<p>这里小结一下，Flink 中四种图的生成顺序是：用户编写的代码生成 StreamGraph，Client 将其进行优化，主要是将多个符合条件的节点 chain 在一起，生成了 JobGraph，然后将 JobGraph 提交到 JobManager，再由 JobManager 生成并行版本的 ExecutionGraph，待JobManager 将 task 调度后，生成的图被称为 PhysicalGraph。</p>
<h3 id="Flink-的几种部署模式"><a href="#Flink-的几种部署模式" class="headerlink" title="Flink 的几种部署模式"></a>Flink 的几种部署模式</h3><p>根据集群的生命周期、资源隔离以及 main() 方法的执行，通常将 Flink 的部署模式分为三种：Session Mode、Per-Job Mode 和 Application Mode。下面我们分别介绍这三种部署模式。</p>
<h4 id="Session-Mode"><a href="#Session-Mode" class="headerlink" title="Session Mode"></a>Session Mode</h4><p>Session Mode 下，所有的任务共享 JobManager 和 TaskManager，JobManager 的生命周期不受提交的 Job 影响，会长期运行。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1749406344/Blog/flink/0/SessionMode.png" alt="SessionMode"></p>
<h4 id="Per-Job-Mode"><a href="#Per-Job-Mode" class="headerlink" title="Per-Job Mode"></a>Per-Job Mode</h4><p>Per-Job Mode 下，每个任务独享 JobManager 和 TaskManager，资源充分隔离。JobManager 的生命周期和 Job 的生命周期绑定。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1749406344/Blog/flink/0/Per-job.png" alt="Per-JobMode"></p>
<h4 id="Application-Mode"><a href="#Application-Mode" class="headerlink" title="Application Mode"></a>Application Mode</h4><p>Application Mode 下，每个 Application 对应一个 JobManager，且可以运行多个作业。客户端无需将依赖包上传到 JobManager，只负责提交作业，减轻了客户端的压力。提交作业后，JobManager 主动从 HDFS 拉取依赖包。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1749406344/Blog/flink/0/Application.png" alt="ApplicationMode"></p>
<h4 id="三种模式的对比"><a href="#三种模式的对比" class="headerlink" title="三种模式的对比"></a>三种模式的对比</h4><table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Session</th>
<th style="text-align:center">Per-Job</th>
<th style="text-align:center">Application</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">优点</td>
<td style="text-align:center">1、资源充分共享，提升资源利用率<br>2、作业集中管理，运维简单</td>
<td style="text-align:center">1、资源充分隔离<br>2、每个作业的 TM Slots 可以不同</td>
<td style="text-align:center">1、有效降低带宽和客户端负载<br>2、Application 之间实现资源隔离，Application 中的资源共享</td>
</tr>
<tr>
<td style="text-align:center">缺点</td>
<td style="text-align:center">1、资源隔离差<br>2、TM 不易扩展，伸缩性差</td>
<td style="text-align:center">1、资源浪费</td>
<td style="text-align:center">1、仅支持 Yarn 和 Kubunetes （个人感觉够用了）</td>
</tr>
</tbody>
</table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后来总结一下，今天主要学习了 Flink 的整体架构和三种部署模式。</p>
<p>1、Flink 的集群架构上主要包含 JobManager 和 TaskManager，其中 JobManager 主要负责一些作业调度和资源协调的工作，TaskManager 则主要负责执行任务。</p>
<p>2、Flink 的部署模式分为 Session、Per-Job 和 Application 三种，Session 模式是所有 Job 共享 JobManager 和 TaskManager，Per-Job 则是作业独享的，而 Application 模式则是在 Application 中共享 JobManager。</p>
]]></content>
      <tags>
        <tag>Flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch从入门到放弃：文档CRUD要牢记</title>
    <url>/2019/11/24/Elasticsearch%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%E6%96%87%E6%A1%A3CRUD%E8%A6%81%E7%89%A2%E8%AE%B0/</url>
    <content><![CDATA[<p>在Elasticsearch中，文档（document）是所有可搜索数据的最小单位。它被序列化成JSON存储在Elasticsearch中。每个文档都会有一个唯一ID，这个ID你可以自己指定或者交给Elasticsearch自动生成。<a id="more"></a></p>
<p>如果延续我们之前不恰当的对比RDMS的话，我认为文档可以类比成关系型数据库中的表。</p>
<h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>前面我们提到，每个文档都有一个唯一ID来标识，获取文档时，“_id”字段记录的就是文档的唯一ID，它是元数据之一。当然，文档还有一些其他的元数据，下面我们来一一介绍</p>
<ul>
<li>_index：文档所属的索引名</li>
<li>_type：文档所属的type</li>
<li>_id：文档的唯一ID</li>
</ul>
<p>有了这三个，我们就可以唯一确定一个document了，当然，7.0版本以后我们已经不需要_type了。接下来我们再来看看其他的一些元数据</p>
<ul>
<li>_source：文档的原始JSON数据</li>
<li>_field_names：该字段用于索引文档中值不为null的字段名，主要用于exists请求查找指定字段是否为空</li>
<li>_ignore：这个字段用于索引和存储文档中每个由于异常（开启了ignore_malformed）而被忽略的字段的名称</li>
<li>_meta：该字段用于存储一些自定义的元数据信息</li>
<li>_routing：用来指定数据落在哪个分片上，默认值是Id</li>
<li>_version：文档的版本信息</li>
<li>_score：相关性打分</li>
</ul>
<h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>创建文档有以下4种方法：</p>
<ul>
<li>PUT /\&lt;index>/_doc/&lt;_id&gt;</li>
<li>POST /\&lt;index>/_doc/</li>
<li>PUT /\<index>/_create/&lt;_id&gt;</index></li>
<li>POST /\<index>/_create/&lt;_id&gt;</index></li>
</ul>
<p>这四种方法的区别是，如果不指定id，则Elasticsearch会自动生成一个id。如果使用_create的方法，则必须保证文档不存在，而使用_doc方法的话，既可以创建新的文档，也可以更新已存在的文档。</p>
<p>在创建文档时，还可以选择一些参数。</p>
<h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><ul>
<li><strong>if_seq_no</strong>：当文档的序列号是指定值时才更新</li>
<li><strong>if_primary_term</strong>：当文档的primary term是指定值时才更新</li>
<li><strong>op_type</strong>：如果设置为create则指定id的文档必须不存在，否则操作失败。有效值为index或create，默认为index</li>
<li><strong>op_type</strong>：指定预处理的管道id</li>
<li><strong>refresh</strong>：如果设置为true，则立即刷新受影响的分片。如果是wait_for，则会等到刷新分片后，此次操作才对搜索可见。如果是false，则不会刷新分片。默认值为false</li>
<li><strong>routing</strong>：指定路由到的主分片</li>
<li><strong>timeout</strong>：指定响应时间，默认是30秒</li>
<li><strong>master_timeout</strong>：连接主节点的响应时长，默认是30秒</li>
<li><strong>version</strong>：显式的指定版本号</li>
<li><strong>version_type</strong>：指定版本号类型：internal、 external、external_gte、force</li>
<li><strong>wait_for_active_shards</strong>：处理操作之前，必须保持活跃的分片副本数量，可以设置为all或者任意正整数。默认是1，即只需要主分片活跃。</li>
</ul>
<h4 id="响应包体"><a href="#响应包体" class="headerlink" title="响应包体"></a>响应包体</h4><ul>
<li><strong>_shards</strong>：提供分片的信息</li>
<li><strong>_shards.total</strong>：创建了文档的总分片数量</li>
<li><strong>_shards.successful</strong>：成功创建文档分片的数量</li>
<li><strong>_shards.failed</strong>：创建文档失败的分片数量</li>
<li><strong>_index</strong>：文档所属索引</li>
<li><strong>_type</strong>：文档所属type，目前只支持_doc</li>
<li><strong>_id</strong>：文档的id</li>
<li><strong>_version</strong>：文档的版本号</li>
<li><strong>_seq_no</strong>：文档的序列号</li>
<li><strong>_primary_term</strong>：文档的主要术语</li>
<li><strong>result</strong>：索引的结果，created或者updated</li>
</ul>
<p>我们在创建文档时，如果指定的索引不存在，则ES会自动为我们创建索引。这一操作是可以通过设置中的action.auto_create_index字段来控制的，默认是true。你可以修改这个字段，实现指定某些索引可以自动创建或者所有索引都不能自动创建的目的。</p>
<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>了解了如何创建文档之后，我们再来看看应该如何更新一个已经存在的文档。其实在创建文档时我们就提到过，使用PUT /\<index>/_doc/\<id>的方法就可以更新一个已存在的文档。除此之外，我们还有另一种更新文档的方法：</id></index></p>
<p>POST /\<index>/_update/\&lt;_id&gt;</index></p>
<p>这两种更新有所不同。_doc方法是先删除原有的文档，再创建新的。而_update方法则是增量更新，它的更新过程是先检索到文档，然后运行指定脚本，最后重新索引。</p>
<p>还有一个区别就是_update方法支持使用脚本更新，默认的语言是painless，你可以通过参数lang来进行设置。在请求参数方面，_update相较于_doc多了以下几个参数：</p>
<ul>
<li><strong>lang</strong>：指定脚本语言</li>
<li><strong>retry_on_conflict</strong>：发生冲突时重试次数，默认是0</li>
<li><strong>_source</strong>：设置为false，则不返回任何检索字段</li>
<li><strong>_source_excludes</strong>：指定要从检索结果排除的source字段</li>
<li><strong>_source_includes</strong>：指定要返回的检索source字段</li>
</ul>
<p>下面的一个例子是用脚本来更新文档</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/test/_update/1?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "script" : &#123;</span></span><br><span class="line"><span class="string">        "source": "ctx._source.counter += params.count",</span></span><br><span class="line"><span class="string">        "lang": "painless",</span></span><br><span class="line"><span class="string">        "params" : &#123;</span></span><br><span class="line"><span class="string">            "count" : 4</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<h4 id="Upsert"><a href="#Upsert" class="headerlink" title="Upsert"></a>Upsert</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/test/_update/1?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "script" : &#123;</span></span><br><span class="line"><span class="string">        "source": "ctx._source.counter += params.count",</span></span><br><span class="line"><span class="string">        "lang": "painless",</span></span><br><span class="line"><span class="string">        "params" : &#123;</span></span><br><span class="line"><span class="string">            "count" : 4</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "upsert" : &#123;</span></span><br><span class="line"><span class="string">        "counter" : 1</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>当指定的文档不存在时，可以使用upsert参数，创建一个新的文档，而当指定的文档存在时，该请求会执行script中的脚本。如果不想使用脚本，而只想新增/更新文档的话，可以使用doc_as_upsert。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/test/_update/1?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "doc" : &#123;</span></span><br><span class="line"><span class="string">        "name" : "new_name"</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "doc_as_upsert" : true</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<h4 id="update-by-query"><a href="#update-by-query" class="headerlink" title="update by query"></a>update by query</h4><p>这个API是用于批量更新检索出的文档的，具体可以通过一个例子来了解。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/twitter/_update_by_query?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "script": &#123;</span></span><br><span class="line"><span class="string">    "source": "ctx._source.likes++",</span></span><br><span class="line"><span class="string">    "lang": "painless"</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  "query": &#123;</span></span><br><span class="line"><span class="string">    "term": &#123;</span></span><br><span class="line"><span class="string">      "user": "kimchy"</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<h3 id="获取文档"><a href="#获取文档" class="headerlink" title="获取文档"></a>获取文档</h3><p>ES获取文档用的是GET API，请求的格式是：</p>
<p>GET /\<index>/_doc/&lt;_id&gt;</index></p>
<p>它会返回文档的数据和一些元数据，如果你只想要文档的内容而不需要元数据时，可以使用</p>
<p>GET /\<index>/_source/&lt;_id&gt;</index></p>
<h4 id="请求参数-1"><a href="#请求参数-1" class="headerlink" title="请求参数"></a>请求参数</h4><p>获取文档的有几个请求参数之前已经提到过，这里不再赘述，它们分别是：</p>
<ul>
<li><strong>refresh</strong></li>
<li><strong>routing</strong></li>
<li><strong>_source</strong></li>
<li><strong>_source_excludes</strong></li>
<li><strong>_source_includes</strong></li>
<li><strong>version</strong></li>
<li><strong>version_type</strong></li>
</ul>
<p>而还有一些之前没提到过的参数，我们来具体看一下</p>
<ul>
<li><strong>preference</strong>：用来 指定执行请求的node或shard，如果设置为_local，则会优先在本地的分片执行</li>
<li><strong>realtime</strong>：如果设置为true，则请求是实时的而不是近实时。默认是true</li>
<li><strong>stored_fields</strong>：返回指定的字段中，store为true的字段</li>
</ul>
<h4 id="mget"><a href="#mget" class="headerlink" title="mget"></a>mget</h4><p>mget是批量获取的方法之一，请求的格式有两种：</p>
<ul>
<li>GET /_mget</li>
<li>GET /\<index>/_mget</index></li>
</ul>
<p>第一种是在请求体中写index。第二种是把index放到url中，不过这种方式可能会触发ES的安全检查。</p>
<p>mget的请求参数和get相同，只是需要在请求体中指定doc的相关检索条件</p>
<p><strong>request</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"docs"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"_index"</span> : <span class="string">"jackey"</span>,</span><br><span class="line">            <span class="string">"_id"</span> : <span class="string">"1"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"_index"</span> : <span class="string">"jackey"</span>,</span><br><span class="line">            <span class="string">"_id"</span> : <span class="string">"2"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>response</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"docs"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_index"</span> : <span class="string">"jackey"</span>,</span><br><span class="line">      <span class="string">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="string">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"_version"</span> : 5,</span><br><span class="line">      <span class="string">"_seq_no"</span> : 6,</span><br><span class="line">      <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">      <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"_source"</span> : &#123;</span><br><span class="line">        <span class="string">"user"</span> : <span class="string">"ja"</span>,</span><br><span class="line">        <span class="string">"tool"</span> : <span class="string">"ES"</span>,</span><br><span class="line">        <span class="string">"message"</span> : <span class="string">"qwer"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_index"</span> : <span class="string">"jackey"</span>,</span><br><span class="line">      <span class="string">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="string">"_id"</span> : <span class="string">"2"</span>,</span><br><span class="line">      <span class="string">"_version"</span> : 1,</span><br><span class="line">      <span class="string">"_seq_no"</span> : 2,</span><br><span class="line">      <span class="string">"_primary_term"</span> : 1,</span><br><span class="line">      <span class="string">"found"</span> : <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"_source"</span> : &#123;</span><br><span class="line">        <span class="string">"user"</span> : <span class="string">"zhe"</span>,</span><br><span class="line">        <span class="string">"post_date"</span> : <span class="string">"2019-11-15T14:12:12"</span>,</span><br><span class="line">        <span class="string">"message"</span> : <span class="string">"learning Elasticsearch"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>CURD操作只剩下最后一个D了，下面我们就一起来看看ES中如何删除一个文档。</p>
<p>删除指定id使用的请求是</p>
<p>DELETE /\<index>/_doc/&lt;_id&gt;</index></p>
<p>在并发量比较大的情况下，我们在删除时通常会指定版本，以确定删除的文档是我们真正想要删除的文档。删除请求的参数我们在之前也都介绍过，想要具体了解的同学可以直接查看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/docs-delete.html" target="_blank" rel="noopener">官方文档</a>。</p>
<h4 id="delete-by-query"><a href="#delete-by-query" class="headerlink" title="delete by query"></a>delete by query</h4><p>类似于update，delete也有一个delete by query的API。</p>
<p>POST /\<index>/_delete_by_query</index></p>
<p>它也是要先按照条件来查询匹配的文档，然后删除这些文档。在执行查询之前，Elasticsearch会先为指定索引做一个快照，如果在执行删除过程中，要索引发生改变，则会导致操作冲突，同时返回删除失败。</p>
<p>如果删除的文档比较多，也可以使这个请求异步执行，只需要设置wait_for_completion=false即可。</p>
<p>这个API的refresh与delete API的refresh参数有所不同，delete中的refresh参数是设置操作是否立即可见，即只刷新一个分片，而这个API中的refresh参数则是需要刷新受影响的所有分片。</p>
<h3 id="Bulk-API"><a href="#Bulk-API" class="headerlink" title="Bulk API"></a>Bulk API</h3><p>最后，我们再来介绍一种特殊的API，批量操作的API。它支持两种写法，可以将索引名写到url中，也可以写到请求体中。</p>
<ul>
<li><p>POST /_bulk</p>
</li>
<li><p>POST /\<index>/_bulk</index></p>
</li>
</ul>
<p>在这个请求中，你可以任意使用之前的CRUD请求的组合。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/_bulk?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123; "index" : &#123; "_index" : "test", "_id" : "1" &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; "field1" : "value1" &#125;</span></span><br><span class="line"><span class="string">&#123; "delete" : &#123; "_index" : "test", "_id" : "2" &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; "create" : &#123; "_index" : "test", "_id" : "3" &#125; &#125;</span></span><br><span class="line"><span class="string">&#123; "field1" : "value3" &#125;</span></span><br><span class="line"><span class="string">&#123; "update" : &#123;"_id" : "1", "_index" : "test"&#125; &#125;</span></span><br><span class="line"><span class="string">&#123; "doc" : &#123;"field2" : "value2"&#125; &#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>请求体中使用的语法是newline delimited JSON（NDJSON）。具体怎么用呢？其实我们在上面的例子中已经有所展现了，对于index或create这样的请求，如果请求本身是有包体的，那么用换行符来表示下面的内容与子请求分隔，即为包体的开始。</p>
<p>例如上面例子中的index请求，它的包体就是{ “field1” : “value1” }，所以它会在index请求的下一行出现。</p>
<p>对于批量执行操作来说，单条操作失败并不会影响其他操作，而最终每条操作的结果也都会返回。</p>
<p>上面的例子执行完之后，我们得到的结果应该是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"took"</span>: 30,</span><br><span class="line">   <span class="string">"errors"</span>: <span class="literal">false</span>,</span><br><span class="line">   <span class="string">"items"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"index"</span>: &#123;</span><br><span class="line">            <span class="string">"_index"</span>: <span class="string">"test"</span>,</span><br><span class="line">            <span class="string">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">            <span class="string">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="string">"_version"</span>: 1,</span><br><span class="line">            <span class="string">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">            <span class="string">"_shards"</span>: &#123;</span><br><span class="line">               <span class="string">"total"</span>: 2,</span><br><span class="line">               <span class="string">"successful"</span>: 1,</span><br><span class="line">               <span class="string">"failed"</span>: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"status"</span>: 201,</span><br><span class="line">            <span class="string">"_seq_no"</span> : 0,</span><br><span class="line">            <span class="string">"_primary_term"</span>: 1</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"delete"</span>: &#123;</span><br><span class="line">            <span class="string">"_index"</span>: <span class="string">"test"</span>,</span><br><span class="line">            <span class="string">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">            <span class="string">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">            <span class="string">"_version"</span>: 1,</span><br><span class="line">            <span class="string">"result"</span>: <span class="string">"not_found"</span>,</span><br><span class="line">            <span class="string">"_shards"</span>: &#123;</span><br><span class="line">               <span class="string">"total"</span>: 2,</span><br><span class="line">               <span class="string">"successful"</span>: 1,</span><br><span class="line">               <span class="string">"failed"</span>: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"status"</span>: 404,</span><br><span class="line">            <span class="string">"_seq_no"</span> : 1,</span><br><span class="line">            <span class="string">"_primary_term"</span> : 2</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"create"</span>: &#123;</span><br><span class="line">            <span class="string">"_index"</span>: <span class="string">"test"</span>,</span><br><span class="line">            <span class="string">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">            <span class="string">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">            <span class="string">"_version"</span>: 1,</span><br><span class="line">            <span class="string">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">            <span class="string">"_shards"</span>: &#123;</span><br><span class="line">               <span class="string">"total"</span>: 2,</span><br><span class="line">               <span class="string">"successful"</span>: 1,</span><br><span class="line">               <span class="string">"failed"</span>: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"status"</span>: 201,</span><br><span class="line">            <span class="string">"_seq_no"</span> : 2,</span><br><span class="line">            <span class="string">"_primary_term"</span> : 3</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"update"</span>: &#123;</span><br><span class="line">            <span class="string">"_index"</span>: <span class="string">"test"</span>,</span><br><span class="line">            <span class="string">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">            <span class="string">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="string">"_version"</span>: 2,</span><br><span class="line">            <span class="string">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">            <span class="string">"_shards"</span>: &#123;</span><br><span class="line">                <span class="string">"total"</span>: 2,</span><br><span class="line">                <span class="string">"successful"</span>: 1,</span><br><span class="line">                <span class="string">"failed"</span>: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"status"</span>: 200,</span><br><span class="line">            <span class="string">"_seq_no"</span> : 3,</span><br><span class="line">            <span class="string">"_primary_term"</span> : 4</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>批量操作的执行过程相比多次单个操作而言，在性能上会有一定的提升。但同时也会有一定的风险，所以我们在使用的时候要非常的谨慎。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文我们先介绍了文档的基本概念和文档的元数据。接着又介绍了文档的CRUD操作和Bulk API。相信看完文章你对Elasticsearch的文档也会有一定的了解。那最后就请你启动你的Elasticsearch，然后亲自动手试一试这些操作，看看各种请求的参数究竟有什么作用。相信亲手实验过一遍之后你会对这些API有更深的印象。</p>
]]></content>
      <tags>
        <tag>Elasticsearch笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch从入门到放弃：索引基本使用方法</title>
    <url>/2019/10/13/Elasticsearch%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%E7%B4%A2%E5%BC%95%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>前文我们提到，Elasticsearch的数据都存储在索引中，也就是说，索引相当于是MySQL中的数据库。是最基础的概念。今天分享的也是关于索引的一些常用的操作。<a id="more"></a></p>
<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">"localhost:9200/jackey?pretty"</span></span><br></pre></td></tr></table></figure>
<p>ES创建索引使用PUT请求即可，上面是最简单的新建一个索引的方法，除此之外，你还可以指定：</p>
<ul>
<li>Settings</li>
<li>Mappings</li>
<li>aliases</li>
</ul>
<p>索引名称有以下限制：</p>
<ol>
<li>必须是小写</li>
<li>不能包含：<code>\</code>,<code>/</code>,<code>*</code>, <code>?</code>, <code>&quot;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>|</code>, <code></code>(空格),<code>,</code>, <code>#</code></li>
<li>在ES7.0以前索引名可以包含冒号，但是7.0之后不支持了</li>
<li>不能以<code>-</code>,<code>_</code>和<code>+</code>开头</li>
<li>不能是<code>.</code>或<code>..</code></li>
<li>长度不能超过255字节</li>
</ol>
<p>请求支持的一些参数有：</p>
<ul>
<li><strong>wait_for_active_shards</strong>：继续操作前，必须处于active状态的分片数，默认是1，也可以设置为all或者不大于总分片数的任意正整数</li>
<li><strong>timeout</strong>：设置等待响应的超时时间，默认是30秒</li>
<li><strong>master_timeout</strong>：连接master节点响应的超时时间，默认是30秒</li>
</ul>
<p>前面我们提到创建索引时可以指定三种属性，这三种属性都需要放在body中。</p>
<h4 id="aliases"><a href="#aliases" class="headerlink" title="aliases"></a>aliases</h4><p>索引的别名，一个别名可以赋给多个索引。</p>
<p>给一个index起别名的方式有两种，一种是创建index时候在body中增加aliases，另一种是通过更新已有索引的方式增加。</p>
<p>方式一：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">"localhost:9200/jackey?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "aliases" : &#123;</span></span><br><span class="line"><span class="string">        "alias_1" : &#123;&#125;,</span></span><br><span class="line"><span class="string">        "alias_2" : &#123;</span></span><br><span class="line"><span class="string">            "filter" : &#123;</span></span><br><span class="line"><span class="string">                "term" : &#123;"user" : "kimchy" &#125;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            "routing" : "kimchy"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>方式二：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/_aliases?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "actions" : [</span></span><br><span class="line"><span class="string">        &#123; "add" : &#123; "index" : "jackey", "alias" : "alias1" &#125; &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>方式一中，我们还在body中增加了filter和routing。这主要是用于指定使用别名的条件。指定了filter后，通过alias_2，只能访问user为kimchy的document。而routing的值被用来路由，即alias_2只能路由到指定的分片。此外还有index_routing和search_routing，它们和routing类似，这里不做过多解释了。还有一个比较重要的属性是is_write_index，这个属性默认是false，如果设置成true，表示可以通过这个别名来写索引，默认情况下，别名像一个软链接，是不可以修改原索引的。</p>
<p>此外，还可以使用通配符为多个索引增加相同的别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/_aliases?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "actions" : [</span></span><br><span class="line"><span class="string">        &#123; "add" : &#123; "index" : "test*", "alias" : "all_test_indices" &#125; &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>除了add，还可以使用remove来删除别名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/_aliases?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "actions" : [</span></span><br><span class="line"><span class="string">        &#123; "remove" : &#123; "index" : "test1", "alias" : "alias1" &#125; &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<h4 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h4><p>先看一个例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">"localhost:9200/twitter?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "settings" : &#123;</span></span><br><span class="line"><span class="string">        "index" : &#123;</span></span><br><span class="line"><span class="string">            "number_of_shards" : 3, </span></span><br><span class="line"><span class="string">            "number_of_replicas" : 2 </span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>索引的setting分为静态和动态两种。静态的只能在索引创建或关闭时设置；动态的则可以使用update-index-settings API来实时设置。上面的例子中，number_of_shards属于静态设置，number_of_replicas属于动态设置。</p>
<p>索引可以设置的setting可以在官方文档的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/index-modules.html" target="_blank" rel="noopener">Index modules</a>查看，下面我会挑几个我认为比较重要的介绍一下。</p>
<p>先从静态开始：</p>
<ul>
<li><strong>index.number_of_shards</strong>：指定索引的分片数，只能在创建索引时设置。默认是1，最大可以设置为1024。这是出于安全考虑的一种保护措施。最大值可以通过设置系统变量来控制export ES_JAVA_OPTS=”-Des.index.max_number_of_shards=128”</li>
<li><strong>index.routing_partition_size</strong>：可以路由的分片数量，同样只能在创建索引时指定，默认值为1.这个值必须小于number_of_shards（除非number_of_shards的值也是1）</li>
</ul>
<p>动态setting：</p>
<ul>
<li><strong>index.number_of_replicas</strong>：每个分片的副本数，默认是1</li>
<li><strong>index.auto_expand_replicas</strong>：基于数据节点可以自动扩展的副本数，默认为为false。可以设置为一个区间，以短线分隔，例如「0-5」，也可以设置成all。需要注意的是，副本的自动扩展并不会考虑其他的分配规则。这有可能导致集群状态变成黄色</li>
<li><strong>index.search.idle.after</strong>：分片被认为搜索空闲之前没有收到请求或搜索的时间。默认30秒。</li>
<li><strong>index.refresh_interval</strong>：刷新操作的执行频率，默认是1s。如果设置成-1，表示不会刷新。如果没有显式设置，分片在收到搜索请求前至少index.search.idle.after秒内不会后台刷新</li>
<li><strong>index.max_result_window</strong>：返回结果的最大数量，默认是10000（一万）。搜索返回结果占用的内存和时间受到这个值的限制</li>
<li><strong>index.routing.rebalance.enable</strong>：是否允许分片的自平衡。默认是all，允许所有分片重新平衡。还可以设置为primaries，只允许主分片重新平衡。replicas只允许从分片重新平衡。none不允许分片重新平衡。</li>
</ul>
<p>除了以上静态setting和动态setting之外，setting中还可以设置一些其他的值，例如分词器等，这些我们以后再做更详细的介绍。</p>
<h4 id="Mappings"><a href="#Mappings" class="headerlink" title="Mappings"></a>Mappings</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">"localhost:9200/test?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "settings" : &#123;</span></span><br><span class="line"><span class="string">        "number_of_shards" : 1</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "mappings" : &#123;</span></span><br><span class="line"><span class="string">        "properties" : &#123;</span></span><br><span class="line"><span class="string">            "field1" : &#123; "type" : "text" &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>Mapping主要用于帮助Elasticsearch理解每个域中数据的类型。7.0.0之前mapping的定义通常包括type名称。Elasticsearch支持的数据类型比较多，其中比较核心的简单数据类型包括：</p>
<ul>
<li>字符串: text和keyword</li>
<li>整数 : byte, short, integer, long</li>
<li>浮点数: float, double</li>
<li>布尔型: boolean</li>
<li>日期: date</li>
</ul>
<p>其他的类型，我们以后会做更加详细的介绍。</p>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>删除索引使用的是DELETE请求。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X DELETE <span class="string">"localhost:9200/jackey?pretty"</span></span><br></pre></td></tr></table></figure>
<p>你可以在路径中指定具体索引，也可以使用通配符，需要删除多个索引时，可以使用逗号分隔。如果要删除全部索引，可以指定索引为_all或*（不要这么做）。在生产环境，我们通过在elasticsearch.yml文件中将action.destructive_requires_name配置为true来禁止这些危险的操作。</p>
<p>删除操作支持的参数有以下几种：</p>
<ul>
<li><strong>allow_no_indices</strong>：如果设置为true，则通配符或_all匹配不到索引时不会报错</li>
<li><strong>expand_wildcards</strong>：控制通配符可以扩展到的索引类型。all：可以扩展到所有的索引。open：只能扩展到打开的索引。closed：只能扩展到关闭的索引。none：不接受通配符表达式。默认是open</li>
<li><strong>ignore_unavailable</strong>：如果设置为true，不存在或关闭的索引不会在返回中。默认是false</li>
<li><strong>timeout</strong>：指定等待返回响应的最长时间。默认是30秒</li>
<li><strong>master_timeout</strong>：连接master节点响应的超时时间，默认是30秒</li>
</ul>
<h3 id="打开-关闭索引"><a href="#打开-关闭索引" class="headerlink" title="打开/关闭索引"></a>打开/关闭索引</h3><p>前面我们已经提到过了打开/关闭索引。被关闭的索引几乎不能对它进行任何操作，它只是用来保留数据的。而打开或关闭索引通常需要重启分片来使操作生效。具体的操作如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/jackey/_open?pretty"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/jackey/_close?pretty"</span></span><br></pre></td></tr></table></figure>
<p>支持的参数有：</p>
<ul>
<li><strong>allow_no_indices</strong></li>
<li><strong>expand_wildcards</strong></li>
<li><strong>ignore_unavailable</strong></li>
<li><strong>wait_for_active_shards</strong></li>
<li><strong>timeout</strong></li>
<li><strong>master_timeout</strong></li>
</ul>
<p>这些参数在前面都有介绍。这里就不再赘述了。</p>
<h3 id="拆分索引"><a href="#拆分索引" class="headerlink" title="拆分索引"></a>拆分索引</h3><p>随着数据的越来越多，我们可能会有拆分索引的需求，感谢ES为我们提供了便利。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"localhost:9200/twitter/_split/split-twitter-index?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "settings": &#123;</span></span><br><span class="line"><span class="string">    "index.number_of_shards": 2</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>在拆分索引之前，要保证索引是只读状态，并且集群健康状态为green。设置只读的方法是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="string">"localhost:9200/my_source_index/_settings?pretty"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "settings": &#123;</span></span><br><span class="line"><span class="string">    "index.blocks.write": true </span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>拆分索引的具体操作是：</p>
<ol>
<li>创建一个和源索引相同的目标索引，主分片要大于源索引</li>
<li>建立从源索引到目标索引的硬连接</li>
<li>创建低级索引后，再对document做Hash操作。这是为了删除属于不同分片的document</li>
<li>恢复目标索引，就像重新打开关闭的索引一样</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于索引的使用就先介绍到这里。还有很多不完善的地方，以后会继续补充。想要了解更多详细信息的同学可以查看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/indices.html" target="_blank" rel="noopener">官方文档</a>。</p>
]]></content>
      <tags>
        <tag>Elasticsearch笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Lua脚本中学教程（上）</title>
    <url>/2019/06/10/Redis-Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<p>失踪人口回来啦！</p>
<p>有读者问我为什么这么久都没有出Redis Lua中学教程，表示村头厕所已经好久没有纸了。其实我早就要写这篇中学教程了，奈何最近太忙了，就一拖再拖，直到今天我终于又开始动笔了。忘记Lua相关概念的同学可以先回顾一下<a href="https://jackeyzhe.github.io/2019/05/13/Redis-Lua%E8%84%9A%E6%9C%AC%E5%B0%8F%E5%AD%A6%E6%95%99%E7%A8%8B/">小学教程</a>。<a id="more"></a></p>
<p>中学教程主要分为两部分：Redis Lua的相关命令详解和Lua的语法介绍。</p>
<p>前面我们简单介绍了EVAL和EVALSHA命令。但是只有那点只是是没办法从中学毕业的，因此我们需要进行更深入的学习。</p>
<h4 id="EVAL"><a href="#EVAL" class="headerlink" title="EVAL"></a>EVAL</h4><p>最早可用版本：2.6.0</p>
<p>用法：EVAL script numkeys key [key …] arg [arg …]</p>
<p>关于用法我们已经演示过了，其中第一个参数是要执行的Lua脚本，第二个参数是传入脚本的参数个数。后面则是参数的key数组和value数组。</p>
<p>在Lua中执行Redis命令的方法我们也介绍过，就是使用redis.call()和redis.pcall()两个函数。它们之间唯一的不同就是当Redis命令执行错误时，redis.call()会抛出这个错误，使EVAL命令抛出错误，而redis.pcall()会捕获这个错误，并返回Lua的错误表。</p>
<p>通常我们约定执行命令的key都需要由参数传入，命令必须在执行之前进行分析，以确定它作用于哪个key。这样做的目的是为了在一定程度上保证EVAL执行的Lua脚本的正确性。</p>
<h5 id="Lua和Redis之间数据类型的转换"><a href="#Lua和Redis之间数据类型的转换" class="headerlink" title="Lua和Redis之间数据类型的转换"></a>Lua和Redis之间数据类型的转换</h5><p>在Redis执行EVAL命令时，如果脚本中有call()或者pcall()命令，就会涉及到Redis和Lua之间数据类型转换的问题。转换规则要求，一个Redis的返回值转换成Lua数据类型后，再转换成Redis数据类型，其结果必须和初始值相同。所以每种类型是一一对应的。转换规则如下：</p>
<h5 id="Redis与Lua互相转换"><a href="#Redis与Lua互相转换" class="headerlink" title="Redis与Lua互相转换"></a>Redis与Lua互相转换</h5><table>
<thead>
<tr>
<th style="text-align:center">Redis</th>
<th style="text-align:center">Lua</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">integer</td>
<td style="text-align:center">number</td>
</tr>
<tr>
<td style="text-align:center">bulk</td>
<td style="text-align:center">string</td>
</tr>
<tr>
<td style="text-align:center">multi bulk</td>
<td style="text-align:center">table</td>
</tr>
<tr>
<td style="text-align:center">status</td>
<td style="text-align:center">table with a single <code>ok</code> field</td>
</tr>
<tr>
<td style="text-align:center">error</td>
<td style="text-align:center">table with a single <code>err</code> field</td>
</tr>
<tr>
<td style="text-align:center">Nil bulk &amp;Nil multi bulk</td>
<td style="text-align:center">false boolean type</td>
</tr>
</tbody>
</table>
<p>除此之外，Lua到Redis的转换还有一些其他的规则：</p>
<ul>
<li>Lua boolean true -&gt; Redis integer reply with value of 1</li>
<li>Lua只有一种数字类型，不会区分整数和浮点数。而数字类型只能转换成Redis的integer类型，如果要返回浮点数，那么在Lua中就需要返回一个字符串。</li>
<li>Lua数组在转换成Redis类型时，遇到nil就停止转换</li>
</ul>
<p>来个栗子验证一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EVAL <span class="string">"return &#123;1,2,3.3333,'foo',nil,'bar'&#125;"</span> 0</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 2</span><br><span class="line">3) (<span class="built_in">integer</span>) 3</span><br><span class="line">4) <span class="string">"foo"</span></span><br></pre></td></tr></table></figure>
<p>可以看到bar没有返回，并且3.333返回了3。</p>
<h5 id="脚本的原子性"><a href="#脚本的原子性" class="headerlink" title="脚本的原子性"></a>脚本的原子性</h5><p>Redis运行所有的Lua命令都使用相同的Lua解释器。当一个脚本正在执行时，其他的脚本或Redis命令都不能执行。这很像Redis的事务multi/exec。这意味着我们要尽量避免脚本的执行时间过长。</p>
<h5 id="脚本整体复制"><a href="#脚本整体复制" class="headerlink" title="脚本整体复制"></a>脚本整体复制</h5><p>当脚本进行传播或者写入AOF文件时，Redis通常会将脚本本身进行传播或写入AOF，而不是使用它产生的若干命令。原因很简单，传播整个脚本要比传播一大堆生成的命令的速度要快。</p>
<p>从Redis3.2开始，可以只复制影响脚本执行结果的语句，而不用复制整个脚本。这个复制整个脚本的方法有以下属性：</p>
<ul>
<li>如果输入相同，脚本必须输出相同的结果。即执行结果不能依赖于隐式的变量，或依赖于I/O输入</li>
<li>Lua不会导出访问系统时间或其他外部状态的命令</li>
<li>如果先执行了“随机命令”（如RANDOMKEY，SRANDMEMBER，TIME），并改变了数据集，接着执行脚本时会被阻塞。</li>
<li>在Redis4中，Lua脚本调用返回随机顺序的元素的命令时，会在返回之前进行排序，也就是说，调用redis.call(“smembers”,KEYS[1])，每次返回的顺序都相同。从Redis5开始就不需要排序了，因为Redis5复制的是产生影响的命令。</li>
<li>Lua修改了伪随机函数math.random和math.randomseed，使每次执行脚本时seed都相同，而如果不执行math.randomseed，只执行math.random时，每次的结果也都相同。</li>
</ul>
<h5 id="复制命令队列"><a href="#复制命令队列" class="headerlink" title="复制命令队列"></a>复制命令队列</h5><p>在这种模式下，Redis在执行脚本时会收集所有影响数据集的命令，当脚本执行完毕时，命令队列会被放在事务中，发送给AOF文件。</p>
<p>Lua可以通过执行redis.replicate_commands()函数来检查复制模式，如果返回true表示当前是复制命令模式，如果返回false，则是复制整个脚本模式。</p>
<h5 id="可选择的复制命令"><a href="#可选择的复制命令" class="headerlink" title="可选择的复制命令"></a>可选择的复制命令</h5><p>脚本复制模式选择好以后，就可以对复制到副本和AOF的方式进行更多的控制。这是一种高级特性，因为滥用会切断主从备份，和AOF持久化。如果我们只需要在master上执行某些命令时，这一特性就变得很有用。例如我们需要计算一些中间值时，只需要在master上计算就好，那么这些命令就不必进行复制。</p>
<p>从Redis3.2开始，有一个新的命令叫做redis.set_repl()，它可以用来控制复制方式，有如下选项（默认是REPL_ALL）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis.set_repl(redis.REPL_ALL) -- Replicate to AOF and replicas.</span><br><span class="line">redis.set_repl(redis.REPL_AOF) -- Replicate only to AOF.</span><br><span class="line">redis.set_repl(redis.REPL_REPLICA) -- Replicate only to replicas (Redis &gt;= 5)</span><br><span class="line">redis.set_repl(redis.REPL_SLAVE) -- Used <span class="keyword">for</span> backward compatibility, the same as REPL_REPLICA.</span><br><span class="line">redis.set_repl(redis.REPL_NONE) -- Don<span class="string">'t replicate at all.</span></span><br></pre></td></tr></table></figure>
<h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>为了避免数据泄露，Redis脚本不允许创建全局变量。如果必须有一个公共变量，可以使用Redis的key来代替。在EVAL命令中创建一个全局变量会引起一个异常。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">eval</span> <span class="string">'a=10'</span> 0</span><br><span class="line">(error) ERR Error running script (call to f_933044db579a2f8fd45d8065f04a8d0249383e57): user_script:1: Script attempted to create global variable <span class="string">'a</span></span><br></pre></td></tr></table></figure>
<h5 id="关于SELECT的使用"><a href="#关于SELECT的使用" class="headerlink" title="关于SELECT的使用"></a>关于SELECT的使用</h5><p>在Lua脚本中使用SELECT就像在正常客户端中使用一样。值得一提的是，在Redis2.8.12之前，Lua脚本中执行SELECT是会影响到客户端的，而从2.8.12开始，Lua脚本中的SELECT只会在脚本执行过程中生效。这点在Redis版本升级时需要注意，因为升级前后，命令的语义会改变。</p>
<h5 id="可用的库"><a href="#可用的库" class="headerlink" title="可用的库"></a>可用的库</h5><p>Lua脚本中有许多库，但并不是都能在Redis中使用，其中可以使用的有：</p>
<ul>
<li><code>base</code> lib.</li>
<li><code>table</code> lib.</li>
<li><code>string</code> lib.</li>
<li><code>math</code> lib.</li>
<li><code>struct</code> lib.</li>
<li><code>cjson</code> lib.</li>
<li><code>cmsgpack</code> lib.</li>
<li><code>bitop</code> lib.</li>
<li><code>redis.sha1hex</code> function.</li>
<li><code>redis.breakpoint and redis.debug</code> function in the context of the <a href="https://redis.io/topics/ldb" target="_blank" rel="noopener">Redis Lua debugger</a>.</li>
</ul>
<p>struct, CJSON and cmsgpack是外部库，其他的都是Lua的标准库。</p>
<h5 id="在脚本中打印Redis日志"><a href="#在脚本中打印Redis日志" class="headerlink" title="在脚本中打印Redis日志"></a>在脚本中打印Redis日志</h5><p>使用redis.log(loglevel,message)函数可以在Lua脚本中打印Redis日志。</p>
<p>loglevel包括：</p>
<ul>
<li>redis.LOG_DEBUG</li>
<li>redis.LOG_VERBOSE</li>
<li>redis.LOG_NOTICE</li>
<li>redis.LOG_WARNING</li>
</ul>
<p>它们与Redis的日志等级是对应的。</p>
<h5 id="沙箱和最大执行时间"><a href="#沙箱和最大执行时间" class="headerlink" title="沙箱和最大执行时间"></a>沙箱和最大执行时间</h5><p>脚本不应该访问外部系统，包括文件系统和其他系统。脚本应该只能操作Redis数据和传入进来的参数。</p>
<p>脚本默认的最大执行时间是5秒（正常脚本执行时间都是毫秒级，所以5秒已经足够长了）。可以通过修改lua-time-limit变量来控制最大执行时间。</p>
<p>当脚本执行时间超过最大执行时间时，并不会被自动终止，因为这违反了脚本的原子性原则。当一个脚本执行时间过长时，Redis会有如下操作：</p>
<ul>
<li>Redis记录下这个脚本执行时间过长</li>
<li>其他客户端开始接收命令，但是所有的命令都会会返回繁忙，除了SCRIPT KILL 和 SHUTDOWN NOSAVE</li>
<li>如果一个脚本仅执行只读命令，则可以用SCRIPT KILL命令来停止它。</li>
<li>如果脚本执行了写入命令，那么只能用SHUTDOWN NOSAVE来终止服务器，当前的所有数据都不会保存到磁盘。</li>
</ul>
<h4 id="EVALSHA"><a href="#EVALSHA" class="headerlink" title="EVALSHA"></a>EVALSHA</h4><p>最早可用版本：2.6.0</p>
<p>用法：EVALSHA sha1 numkeys key [key …] arg [arg …]</p>
<p>该命令用来执行缓存在服务器上的脚本，sha1为脚本的唯一标识。</p>
<p>使用EVAL命令必须每次都要把脚本从客户端传到服务器，由于Redis的内部缓存机制，它并不会每次都重新编译脚本，但是传输上仍然浪费带宽。</p>
<p>另一方面，如果使用特殊命令或者通过redis.conf来定义命令会有以下问题：</p>
<ul>
<li>不同实例有不同的实现方式</li>
<li>发布将会很困难，特别是分布式环境，因为要保证所有实例都包含给定的命令</li>
<li>读应用程序代码时，由于它调用了服务端命令，会不清楚代码的语义</li>
</ul>
<p>为了避免这些问题，同时避免浪费带宽，Redis实现了EVALSHA命令。</p>
<p>如果服务器中没有缓存指定的脚本，会返回给客户端脚本不存在的错误信息。</p>
<h4 id="SCRIPT-DEBUG"><a href="#SCRIPT-DEBUG" class="headerlink" title="SCRIPT DEBUG"></a>SCRIPT DEBUG</h4><p>最早可用版本：3.2.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：SCRIPT DEBUG YES|SYNC|NO</p>
<p>该命令用于设置随后执行的EVAL命令的调试模式。Redis包含一个完整的Lua调试器，代号为LDB，可以使编写复杂脚本的任务更加简单，在调试模式下，Redis充当远程调试服务器，客户端可以逐步执行脚本，设置断点，检查变量等。想了解更多调试器内容的可以查看官方文档<a href="https://redis.io/topics/ldb" target="_blank" rel="noopener">Redis Lua debugger</a>。</p>
<p>LDB可以设置成异步或同步模式。异步模式下，服务器会fork出一个调试会话，不会阻塞主会话，，调试会话结束后，所有数据都会回滚。同步模式则会阻塞会话，并保留调试过程中数据的改变。</p>
<h4 id="SCRIPT-EXISTS"><a href="#SCRIPT-EXISTS" class="headerlink" title="SCRIPT EXISTS"></a>SCRIPT EXISTS</h4><p>最早可用版本：2.6.0</p>
<p>时间复杂度：O(N)，N是脚本数量</p>
<p>返回脚本是否存在于缓存中（存在返回1，不存在返回0）。这个命令适合在管道前执行，以保证管道中的所有脚本都已经加载到服务器端了，如果没有，需要用SCRIPT LOAD命令进行加载。</p>
<h4 id="SCRIPT-FLUSH"><a href="#SCRIPT-FLUSH" class="headerlink" title="SCRIPT FLUSH"></a>SCRIPT FLUSH</h4><p>最早可用版本：2.6.0</p>
<p>时间复杂度：O(N)，N是缓存中的脚本数</p>
<p>刷新缓存中的脚本，这一命令常在云服务上被使用。</p>
<h4 id="SCRIPT-KILL"><a href="#SCRIPT-KILL" class="headerlink" title="SCRIPT KILL"></a>SCRIPT KILL</h4><p>最早可用版本：2.6.0</p>
<p>时间复杂度：O(1)</p>
<p>停止当前正在执行的Lua脚本，通常用来停止执行时间过长的脚本。停止后，被阻塞的客户端会抛出一个错误。</p>
<h4 id="SCRIPT-LOAD"><a href="#SCRIPT-LOAD" class="headerlink" title="SCRIPT LOAD"></a>SCRIPT LOAD</h4><p>最早可用版本：2.6.0</p>
<p>时间复杂度：O(N)，N是脚本的字节数</p>
<p>该命令用于将脚本加载到服务器端的缓存中，但不会执行。加载后，服务器会一直缓存，因为良好的应用程序不太可能有太多不同的脚本导致内存不足。每个脚本都像一个新命令的缓存，所以即使是大型应用程序，也就有几百个，它们占用的内存是微不足道的。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>本文介绍了Redis Lua相关的命令。其中EVAL和EVALSHA用来执行脚本。脚本执行具有原子性。脚本的复制和传播可以根据需要设置。脚本中不能定义全局变量。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java原子操作类，知多少？</title>
    <url>/2018/08/23/Java%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%B1%BB%EF%BC%8C%E7%9F%A5%E5%A4%9A%E5%B0%91%EF%BC%9F/</url>
    <content><![CDATA[<p>前文我们介绍了Java并发编程中的两个关键字：volatile和synchronized。我们也知道了volatile虽然是轻量级，但不能保证原子性，synchronized可以保证原子性，但是比较重量级。<a id="more"></a></p>
<p>那么有没有一种简单的、性能高的方法来保证Java的原子操作呢？答案当然是有的，本文就为大家揭秘一些在JDK1.5时期加入Java家族的成员——Atomic包。Atomic包下包含了12个类，分为4种类型：</p>
<ul>
<li>原子更新基本类型</li>
<li>原子更新数组</li>
<li>原子更新引用</li>
<li>原子更新字段</li>
</ul>
<p>下面我来为大家一一引荐。</p>
<h4 id="原子基本类型"><a href="#原子基本类型" class="headerlink" title="原子基本类型"></a>原子基本类型</h4><p>原子基本类型，从名称上就可以看出，是为基本类型提供原子操作的类。它们是以下3位：</p>
<ul>
<li>AtomicBoolean</li>
<li>AtomicInteger</li>
<li>AtomicLong</li>
</ul>
<p>这三位属于近亲，提供的方法基本一模一样（AtomicBoolean支持方法略少）。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535039613/Blog/Atomic/AtomicBoolean.png" alt="AtomicBoolean"></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535039617/Blog/Atomic/AtomicInteger.png" alt="AtomicInteger"></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535039623/Blog/Atomic/AtomicLong.png" alt="AtomicLong"></p>
<p>这里我们以AtomicInteger为例介绍这些方法。</p>
<ul>
<li><p>void lazySet(int newValue)：使用此方法后最终会被设置成newValue。是线程不安全的。官方解释如下：</p>
<blockquote>
<p>As probably the last little JSR166 follow-up for Mustang, we added a “lazySet” method to the Atomic classes (AtomicInteger, AtomicReference, etc). This is a niche method that is sometimes useful when fine-tuning code using non-blocking data structures. The semantics are that the write is guaranteed not to be re-ordered with any previous write, but may be reordered with subsequent operations (or equivalently, might not be visible to other threads) until some other volatile write or synchronizing action occurs).</p>
<p>The main use case is for nulling out fields of nodes in non-blocking data structures solely for the sake of avoiding long-term garbage retention; it applies when it is harmless if other threads see non-null values for a while, but you’d like to ensure that structures are eventually GCable. In such cases, you can get better performance by avoiding the costs of the null volatile-write. There are a few other use cases along these lines for non-reference-based atomics as well, so the method is supported across all of the AtomicX classes.</p>
<p>For people who like to think of these operations in terms of machine-level barriers on common multiprocessors, lazySet provides a preceeding store-store barrier (which is either a no-op or very cheap on current platforms), but no store-load barrier (which is usually the expensive part of a volatile-write).</p>
</blockquote>
<p>这里解释道：此方法不可与之前的写操作进行重排序，可以与之后的写操作进行重排序，知道出现volatile写或synchronizing操作。好处是比普通的set方法性能要好，前提是可以忍受其他线程在一段时间内读到的是旧数据。</p>
</li>
<li><p>int getAndSet(int newValue)：以原子方式更新，并且返回旧值。</p>
</li>
<li><p>boolean compareAndSet(int expect, int update)：如果输入的值等于expect的值，则以原子方式更新。</p>
</li>
<li><p>int getAndIncrement()：以原子方式自增，返回的是自增前的值。</p>
</li>
<li><p>int getAndDecrement()：与getAndIncrement相反，返回的是自减前的值。</p>
</li>
<li><p>int getAndAdd(int delta)：以原子方式，将当前值与输入值相加，返回的是计算前的值。</p>
</li>
<li><p>int incrementAndGet()：以原子方式自增，返回自增后的值。</p>
</li>
<li><p>int decrementAndGet()：以原子方式自减，返回自减后的值。</p>
</li>
<li><p>int addAndGet(int delta)：以原子方式，将当前值与输入值相加，返回的是计算后的值。</p>
</li>
<li><p>int getAndUpdate(IntUnaryOperator updateFunction)：Java1.8新增方法，以原子方式，按照指定方法更新当前数值，返回更新前的值，需要注意的是，提供的方法应该无副作用（side-effect-free），即两次执行结果相同，原因是如果由于线程争用导致更新失败会尝试再次执行该方法。</p>
</li>
<li><p>int updateAndGet(IntUnaryOperator updateFunction)：同样是Java1.8新增方法，与getAndUpdate唯一不同的是返回值是更新后的值。</p>
</li>
<li><p>int getAndAccumulate(int x, IntBinaryOperator accumulatorFunction)：与上述两个方法类似，操作数由参数x提供。返回更新前的值。</p>
</li>
<li><p>int accumulateAndGet(int x, IntBinaryOperator accumulatorFunction)：与getAndAccumulate方法作用相同，返回更新后的值。</p>
</li>
</ul>
<p>方法介绍完了，AtomicInteger是怎么实现原子操作的呢？一起来看一下getAndIncrement方法的源码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续看Unsafe方法里的getAndIncrement方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中getIntVolatile方法是一个本地方法，根据对象以及偏移量获取对应的值。然后执行compareAndSwapInt方法，该方法根据对象和偏移量获取当当前值，与希望的值var5比较，如果相等，则将值更新为var5+var4。否则，进入循环。如果想要了解UnSafe类的其他方法，可以阅读源码或者参考这篇文章<a href="http://www.cnblogs.com/mickole/articles/3757278.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/mickole/articles/3757278.html" target="_blank" rel="noopener">Java中Unsafe类详解</a></a>。</p>
<h4 id="原子数组"><a href="#原子数组" class="headerlink" title="原子数组"></a>原子数组</h4><p>下面的类是为数组中某个元素的更新提供原子操作的类。</p>
<ul>
<li>AtomicIntegerArray</li>
<li>AtomicLongArray</li>
<li>AtomicReferenceArray</li>
</ul>
<p>这三个类中的方法也都是类似的：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535123459/Blog/Atomic/AtomicIntegerArray.png" alt="AtomicIntegerArray"></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535123464/Blog/Atomic/AtomicLongArray.png" alt="AtomicLongArray"></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535123468/Blog/Atomic/AtomicReferenceArray.png" alt="AtomicReferenceArray"></p>
<p>我们对AtomicIntegerArray中的方法进行介绍。</p>
<ul>
<li>AtomicIntegerArray(int length)：构造函数，新建一个数组，传入AtomicIntegerArray。</li>
<li>AtomicIntegerArray(int[] array)：构造函数，将array克隆一份，传入AtomicIntegerArray，因此，修改AtomicIntegerArray中的元素时不会影响原数组。</li>
<li>int length()：获取数组长度。</li>
<li>int get(int i)：获取位置i的元素。</li>
<li>void set(int i, int newValue)：设置对应位置的值。</li>
<li>void lazySet(int i, int newValue)：类似AtomicInteger中的lazySet。</li>
<li>int getAndSet(int i, int newValue)：更新对应位置的值，返回更新前的值。</li>
<li>boolean compareAndSet(int i, int expect, int update)：比较对应位置的值与期望值，如果相等，则更新，返回true。如果不能返回false。</li>
<li>int getAndIncrement(int i)：对位置i的元素以原子方式自增，返回更新前的值。</li>
<li>int getAndDecrement(int i)：对位置i的元素以原子方式自减，返回更新前的值。</li>
<li>int getAndAdd(int i, int delta)：对位置i的元素以原子方式计算，返回更新前的值。</li>
<li>int incrementAndGet(int i)、int decrementAndGet(int i)、addAndGet(int i, int delta)：这三个方法与上面三个方法操作相同，区别是这三个方法返回的是更新后的值。</li>
</ul>
<p>下面四个方法都是1.8才加入的，根据提供的参数中的方法对位置i的元素进行操作。区别是返回值不同以及是否提供操作数。</p>
<ul>
<li>int getAndUpdate(int i, IntUnaryOperator updateFunction)</li>
<li>int updateAndGet(int i, IntUnaryOperator updateFunction)</li>
<li>int getAndAccumulate(int i, int x, IntBinaryOperator accumulatorFunction)</li>
<li>int accumulateAndGet(int i, int x, IntBinaryOperator accumulatorFunction)</li>
</ul>
<p>原子数组类型同样也是调用Unsafe类的方法，因此原理与基本类型的原理相同，这里不做赘述。</p>
<h4 id="原子引用类型"><a href="#原子引用类型" class="headerlink" title="原子引用类型"></a>原子引用类型</h4><p>前面讲到的类型都只能以原子的方式更新一个变量，有没有办法以原子方式更新多个变量呢？我们可以利用了面向对象的封装思想，可以把多个变量封装成一个类，再以原子的方式更新一个类对象。幸运的是，Atomic为我们提供了更新引用类型的方法。一起来认识一下他们吧。</p>
<ul>
<li>AtomicReference</li>
<li>AtomicReferenceFieldUpdater</li>
<li>AtomicMarkableReference</li>
</ul>
<p>同样的，先来看一下这三个类提供的方法有哪些。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535125768/Blog/Atomic/AtomicReference.png" alt="AtomicReference"></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535125769/Blog/Atomic/AtomicReferenceFieldUpdater.png" alt="AtomicReferenceFieldUpdater"></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535126255/Blog/Atomic/AtomicMarkableReference.png" alt="AtomicStampedReference"></p>
<p>方法的作用与AtomicInteger中的方法类似，不做过多介绍。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically sets the value to the given updated value</span></span><br><span class="line"><span class="comment"> * if the current value &#123;<span class="doctag">@code</span> ==&#125; the expected value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expect the expected value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> update the new value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful. False return indicates that</span></span><br><span class="line"><span class="comment"> * the actual value was not equal to the expected value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V expect, V update)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapObject(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是compareAndSet方法的源码，同样是调用UnSafe类的CAS方法，因此，原子操作的原理也和基本类型相同。</p>
<h4 id="原子更新字段类"><a href="#原子更新字段类" class="headerlink" title="原子更新字段类"></a>原子更新字段类</h4><p>前文提到了AtomicReferenceFieldUpdater类，它更新的是类的字段，除了这个类，Atomic还提供了另外三个类用于更新类中的字段：</p>
<ul>
<li>AtomicIntegerFieldUpdater</li>
<li>AtomicLongFieldUpdater</li>
<li>AtomicStampedReference</li>
</ul>
<p>使用这些类时需要注意以下几点：</p>
<ol>
<li>更新字段必须有volatile关键字修饰</li>
<li>更新字段不能是类变量</li>
<li>使用前需要调用newUpdater()方法创建一个Updater</li>
</ol>
<p>这三个类的方法语义也很明确，可以参考AtomicInteger。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535127319/Blog/Atomic/AtomicIntegerFieldUpdater.png" alt="AtomicIntegerFieldUpdater"></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535127323/Blog/Atomic/AtomicLongFieldUpdater.png" alt="AtomicLongFieldUpdater"></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535125773/Blog/Atomic/AtomicStampedReference.png" alt="AtomicStampedReference"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Atomic包提供了足够的原子类供我们使用，想要真正完全理解这些类，还需要不断的练习。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Lua脚本中学教程（下）</title>
    <url>/2019/06/16/Redis-Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<p> 在中学教程的上半部分我们介绍了Redis Lua相关的命令，没有看过或者忘记的同学可以步行前往直接使用机票<a href="https://jackeyzhe.github.io/2019/06/10/Redis-Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/">Redis Lua脚本中学教程（上）</a>。今天我们来简单学习一下Lua的语法。<a id="more"></a></p>
<p>在介绍Lua语法之前，先来介绍一下Lua的身世。Lua是由简称为PUC-Rio的团队设计、开发和维护的。Lua在葡萄牙语中是月亮的意思，所以它不是简写，而是一个名词。所以只能写成Lua，而不能写成LUA或者其他什么的。接下来我们正式入门Lua。</p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量名可以是由字母、数字和下划线组成的字符串，但不能以数字开头。另外需要注意的是，需要尽量避免使用下划线加一个或多个大写字母格式的变量名，因为这是Lua的保留字，除了这种格式以外，还有一些普通格式的保留字：</p>
<table>
<thead>
<tr>
<th style="text-align:center">and</th>
<th style="text-align:center">break</th>
<th style="text-align:center">do</th>
<th style="text-align:center">else</th>
<th style="text-align:center">elseif</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">end</td>
<td style="text-align:center">false</td>
<td style="text-align:center">for</td>
<td style="text-align:center">function</td>
<td style="text-align:center">goto</td>
</tr>
<tr>
<td style="text-align:center">if</td>
<td style="text-align:center">in</td>
<td style="text-align:center">local</td>
<td style="text-align:center">nil</td>
<td style="text-align:center">not</td>
</tr>
<tr>
<td style="text-align:center">or</td>
<td style="text-align:center">repeat</td>
<td style="text-align:center">return</td>
<td style="text-align:center">then</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:center">until</td>
<td style="text-align:center">while</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>Lua是大小写敏感的，and是保留字，但And和AND不是。</p>
<h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>前面我们提到过Redis不支持Lua的全局变量，但Lua本身是支持全局变量的。</p>
<p>全局变量不需要声明，直接一个未初始化的变量时，它的值是nil。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; b <span class="comment">--&gt; nil</span></span><br><span class="line">&gt; b = <span class="number">10</span></span><br><span class="line">&gt; b <span class="comment">--&gt; 10</span></span><br></pre></td></tr></table></figure>
<p>如果显示的将nil赋值给某个全局变量，Lua会认为我们不再使用这个变量。</p>
<h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><p>Lua的变量默认是全局变量，局部变量需要显示声明。局部变量可以避免增加不必要的名称来混淆全局环境，同时也能避免两部分代码的命名冲突。另外，访问局部变量要比访问全局变量的速度更快。</p>
<p>局部变量的使用范围是有限制的，只在它声明的块中可用。（块可以是控制结构体或函数体或者是整个文件中）</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">local</span> i = <span class="number">1</span> <span class="comment">-- local to the chunk</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= x <span class="keyword">do</span></span><br><span class="line"><span class="keyword">local</span> x = i * <span class="number">2</span> <span class="comment">-- local to the while body</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">--&gt; 2, 4, 6, 8, ...</span></span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">20</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">local</span> x <span class="comment">-- local to the "then" body</span></span><br><span class="line">x = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(x + <span class="number">2</span>) <span class="comment">-- (would print 22 if test succeeded)</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">--&gt; 10 (the global one)</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">--&gt; 10 (the global one)</span></span><br></pre></td></tr></table></figure>
<p>在交互模式下，每次输入都是一块代码，当你输入local i = 1时，就定义了一个局部变量i，而当你在下一行使用i时，发现它又成了全局变量。因此上面的栗子就不能用了。为了解决这个问题，我们需要在程序中显式的使用<strong>do-end</strong>标记代码块的范围。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> x1, x2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">local</span> a2 = <span class="number">2</span>*a</span><br><span class="line">  <span class="keyword">local</span> d = (b^<span class="number">2</span> - <span class="number">4</span>*a*c)^(<span class="number">1</span>/<span class="number">2</span>)</span><br><span class="line">  x1 = (-b + d)/a2</span><br><span class="line">  x2 = (-b - d)/a2</span><br><span class="line"><span class="keyword">end</span>                      <span class="comment">-- scope of 'a2' and 'd' ends here</span></span><br><span class="line"><span class="built_in">print</span>(x1, x2)            <span class="comment">-- 'x1' and 'x2' still in scope</span></span><br></pre></td></tr></table></figure>
<p>使用这种方式标记代码块范围是一种良好的习惯，而使用局部变量编程也要优于使用全局变量，因此有很多人呼吁Lua默认应该定义局部变量，但是这样也会存在问题。最好的解决方案是不要默认，使用所有的变量之前都要声明。</p>
<p>Lua有一个常见的习语：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> foo = foo</span><br></pre></td></tr></table></figure>
<p>这里定义了一个局部变量foo，并把全局变量foo的值赋给局部变量。这一习语主要用来提升变量foo的访问速度，或者对变量进行暂存，防止其他函数改变这个变量的值。</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><h5 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h5><p>Lua的单行注释使用双横线“–”表示，双横线后的内容为注释内容。</p>
<h5 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h5><p>多行注释的一种表现是以双横线加双左中括号开始，以双右中括号结束。例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[A multi-line</span></span><br><span class="line"><span class="comment">long comment</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure>
<p>不过通常我们使用另一种写法：以双横线加双左中括号开始，以双横线加双右中括号结束，这种写法看起来更加美观，同时解注释也更加方便：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">print(10) -- no action (commented out)</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure>
<p>解注释</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">---[[</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span>) <span class="comment">--&gt; 10</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure>
<p>这里稍微解释一下这种写法的原理，注释时，后一组双横线在注释内容中，因此不起作用，只为了对称，效果和普通多行注释一样。而解注释时，第一组双横线前又加了一个横线，就不能认为是多行注释了，只能当做单行注释，因此，第一行被注释掉了，这时后一组双横线就会起作用了，注释掉后面的双右中括号。</p>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>Lua是一种动态类型语言，它有8种基本类型：nil，Boolean，number，string，userdata，function，thread和table。type函数可以返回指定值的类型：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">type</span>(<span class="literal">nil</span>) <span class="comment">--&gt; nil</span></span><br><span class="line">&gt; <span class="built_in">type</span>(<span class="literal">true</span>) <span class="comment">--&gt; boolean</span></span><br><span class="line">&gt; <span class="built_in">type</span>(<span class="number">10.4</span> * <span class="number">3</span>) <span class="comment">--&gt; number</span></span><br><span class="line">&gt; <span class="built_in">type</span>(<span class="string">"Hello world"</span>) <span class="comment">--&gt; string</span></span><br><span class="line">&gt; <span class="built_in">type</span>(<span class="built_in">io</span>.<span class="built_in">stdin</span>) <span class="comment">--&gt; userdata</span></span><br><span class="line">&gt; <span class="built_in">type</span>(<span class="built_in">print</span>) <span class="comment">--&gt; function</span></span><br><span class="line">&gt; <span class="built_in">type</span>(<span class="built_in">type</span>) <span class="comment">--&gt; function</span></span><br><span class="line">&gt; <span class="built_in">type</span>(&#123;&#125;) <span class="comment">--&gt; table</span></span><br><span class="line">&gt; <span class="built_in">type</span>(<span class="built_in">type</span>(X)) <span class="comment">--&gt; string</span></span><br></pre></td></tr></table></figure>
<h5 id="Nil"><a href="#Nil" class="headerlink" title="Nil"></a>Nil</h5><p>Nil类型的值只有一种，就是nil，它是一种没有值的表现。</p>
<h5 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h5><p>Boolean类型有两种取值，@false{} and @true{}。但是Boolean类型并不能囊括所有的条件值：在条件判断时，Lua会将false和nil判断为假，其他的都判断为真。</p>
<p><em>画外音：Lua把0和空字符串也判断为真，这点感觉设计的不太好啊</em></p>
<p>and、or和not是Lua的逻辑运算符。</p>
<p>and的运算方法是，判断第一个操作数是不是false，如果不是，结果就是第二个操作数。</p>
<p>or的运算方法是，判断第一个操作数是不是真，如果不是，结果就是第二个操作数。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">4</span> <span class="keyword">and</span> <span class="number">5</span> <span class="comment">--&gt; 5</span></span><br><span class="line">&gt; <span class="literal">nil</span> <span class="keyword">and</span> <span class="number">13</span> <span class="comment">--&gt; nil</span></span><br><span class="line">&gt; <span class="literal">false</span> <span class="keyword">and</span> <span class="number">13</span> <span class="comment">--&gt; false</span></span><br><span class="line">&gt; <span class="number">0</span> <span class="keyword">or</span> <span class="number">5</span> <span class="comment">--&gt; 0</span></span><br><span class="line">&gt; <span class="literal">false</span> <span class="keyword">or</span> <span class="string">"hi"</span> <span class="comment">--&gt; "hi"</span></span><br><span class="line">&gt; <span class="literal">nil</span> <span class="keyword">or</span> <span class="literal">false</span> <span class="comment">--&gt; false</span></span><br></pre></td></tr></table></figure>
<h5 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h5><p>Table是Lua中主要的（也是唯一的）结构化数据表现类型。它可以用来表现很多种数据类型，如数组、集合、记录等。</p>
<p>每个表的key可以是不同类型的，对于未定义索引的表元素，它的默认值是nil。和其他大部分语言不同的是<strong>Lua中表的下标是从1开始的</strong>。</p>
<p>Table有两种格式：record-style和list-style</p>
<p>record-style可以直接用”.”访问，list-style可以用下标来访问。定义时可以一起定义。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">polyline = &#123;color=<span class="string">"blue"</span>,</span><br><span class="line">            thickness=<span class="number">2</span>,</span><br><span class="line">            npoints=<span class="number">4</span>,</span><br><span class="line">            &#123;x=<span class="number">0</span>,   y=<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;x=<span class="number">-10</span>, y=<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;x=<span class="number">-10</span>, y=<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;x=<span class="number">0</span>,   y=<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们访问一个可能为空的Table，往往需要先判断非空</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> lib <span class="keyword">and</span> lib.foo <span class="keyword">then</span> ....</span><br></pre></td></tr></table></figure>
<p>使用这种方式访问结构比较深的表示就会非常痛苦：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">zip = company <span class="keyword">and</span> company.director <span class="keyword">and</span></span><br><span class="line">                      company.director.address <span class="keyword">and</span></span><br><span class="line">                        company.director.address.zipcode</span><br></pre></td></tr></table></figure>
<p>Lua没有像C#一样提供?.这样的操作，不过我们可以使用or {}的形式来处理。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">zip = (((company <span class="keyword">or</span> &#123;&#125;).director <span class="keyword">or</span> &#123;&#125;).address <span class="keyword">or</span> &#123;&#125;).zipcode</span><br></pre></td></tr></table></figure>
<h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><p>Lua提供了一些基本的流程控制语句：</p>
<ul>
<li>if用于条件判断</li>
<li>while、repeat和for用于便利</li>
<li>end可以终止if、for和while</li>
<li>until可以终止repeat</li>
<li>break用于跳出循环</li>
<li>return用于跳出函数</li>
<li>goto会跳转到指定位置</li>
</ul>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>Lua中函数可以接收的参数是list，如果没有参数，也需要写一对空的括号”()”（一句废话）。如果只有一个参数，则括号可写可不写。Lua还提供了一种特殊的函数访问方法，有兴趣的话可以参考<a href="https://www.lua.org/pil/16.html" target="_blank" rel="noopener">https://www.lua.org/pil/16.html</a></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">o:foo(x)</span><br></pre></td></tr></table></figure>
<p>Lua程序中既可以使用定义在Lua中的函数，也可以使用定义在C语言中的函数。</p>
<p>Lua函数有一个非常方便的特性：可以返回多个结果。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maximum</span> <span class="params">(a)</span></span></span><br><span class="line">  <span class="keyword">local</span> mi = <span class="number">1</span></span><br><span class="line">  <span class="keyword">local</span> m = a[mi]</span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, #a <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> a[i] &gt; m <span class="keyword">then</span></span><br><span class="line">      mi = i; m = a[i]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> m, mi</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(maximum(&#123;<span class="number">8</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">12</span>,<span class="number">5</span>&#125;))     <span class="comment">--&gt; 23   3</span></span><br></pre></td></tr></table></figure>
<p>Lua可以自动调整返回结果的数量，当函数作为语句调用时，会舍弃所有返回值；当函数作为表达式调用时，只保留第一个返回值；如果要获得全部返回值，函数调用需要是表达式最后一个。</p>
<p>Lua函数也支持可变参数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> <span class="params">(...)</span></span></span><br><span class="line">  <span class="keyword">local</span> s = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> _, v <span class="keyword">in</span> <span class="built_in">ipairs</span>&#123;...&#125; <span class="keyword">do</span></span><br><span class="line">		s=s+ v </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> s </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">12</span>))   <span class="comment">--&gt; 54</span></span><br></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>来简单总结一下，本文我们介绍了Lua的基本语法，包括如何定义变量（包括全局变量和局部变量），8种基本数据类型，流程控制语句以及Lua中函数的一些特性。相信看完本文，你就可以写一些简单的Lua脚本了。</p>
<p>对Lua感兴趣的同学可以自行前往<a href="https://www.lua.org/" target="_blank" rel="noopener">Lua官网</a>继续深造。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Lua脚本大学教程</title>
    <url>/2019/06/17/Redis-Lua%E8%84%9A%E6%9C%AC%E5%A4%A7%E5%AD%A6%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>前面我们已经把Redis Lua相关的基础都介绍过了，如果你可以编写一些简单的Lua脚本，恭喜你已经可以从Lua中学毕业了。<a id="more"></a></p>
<p>在大学课程中，我们主要学习Lua脚本调试和Redis中Lua执行原理两部分内容两部分。</p>
<h4 id="Lua脚本调试"><a href="#Lua脚本调试" class="headerlink" title="Lua脚本调试"></a>Lua脚本调试</h4><p>Redis从3.2版本开始支持Lua脚本调试，调试器的名字叫做LDB。它有一些重要的特性：</p>
<ul>
<li>它使用的是服务器-客户端模式，所以是远程调试。Redis服务器就是调试服务器，默认的客户端是redis-cli。也可以开发遵循服务器协议的其他客户端。</li>
<li>默认情况下，每个debugging session都是一个新的session。也就是说在调试的过程中，服务器不会被阻塞。仍然可以被其他客户端使用或开启新的session。同时也意味着在调试过程中所有的修改在结束时都会回滚。</li>
<li>如果需要，可以把debugging模式调成同步，这样就可以保留对数据集的更改。在这种模式下，调试时服务器会处于阻塞状态。</li>
<li>支持步进式执行</li>
<li>支持静态和动态断点</li>
<li>支持从脚本中向调试控制台打印调试日志</li>
<li>检查Lua变量</li>
<li>追踪Redis命令的执行</li>
<li>很好的支持打印Redis和Lua的值</li>
<li>无限循环和长执行检测，模拟断点</li>
</ul>
<h5 id="Lua脚本调试实战"><a href="#Lua脚本调试实战" class="headerlink" title="Lua脚本调试实战"></a>Lua脚本调试实战</h5><p>在开始调试之前，首先编写一个简单的Lua脚本script.lua：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> src = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> dst = KEYS[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">local</span> count = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> item = redis.call(<span class="string">'rpop'</span>,src)</span><br><span class="line">    <span class="keyword">if</span> item ~= <span class="literal">false</span> <span class="keyword">then</span></span><br><span class="line">        redis.call(<span class="string">'lpush'</span>,dst,item)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    count = count - <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> redis.call(<span class="string">'llen'</span>,dst)</span><br></pre></td></tr></table></figure>
<p>这个脚本是把src中的元素依次插入到dst元素的头部。</p>
<p>有了这个脚本之后我们就可以开始调试工作了。</p>
<p>我们可以使用<code>redis-cli —eval</code>命令来运行这个脚本，而要调试的话，可以加上—ldb参数，因此我们先执行下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --ldb --<span class="built_in">eval</span> script.lua foo bar , 10</span><br></pre></td></tr></table></figure>
<p>页面会出现一些帮助信息，并进入到调试模式</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1561000913/Blog/Redis/Lua/lua_debug_01.png" alt="lua_debug_help"></p>
<p>可以看到帮助页告诉我们</p>
<ul>
<li>执行<strong>quit</strong>可以退出调试模式</li>
<li>执行<strong>restart</strong>可以重新调试</li>
<li>执行<strong>help</strong>可以查看更多帮助信息</li>
</ul>
<p>这里我们执行help命令，查看一下帮助信息，打印出很多可以在调试模式下执行的命令，中括号”[]”内到内容表示命令的简写。</p>
<p>其中常用的有：</p>
<ul>
<li>step/next：执行一行</li>
<li>continue：执行到西一个断点</li>
<li>list：展示源码</li>
<li>print：打印一些值</li>
<li>break：打断点</li>
</ul>
<p>另外在脚本中还可以使用<code>redis.breakpoint()</code>添加动态断点。</p>
<p>下面来简单演示一下</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1561002326/Blog/Redis/Lua/lua_debug_02.gif" alt="lua_debug_display"></p>
<p>现在我把代码中<code>count = count - 1</code>这一行删除，使程序死循环，再来调试一下</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1561002773/Blog/Redis/Lua/lua_debug_03.gif" alt="lua_debug_dead_loop"></p>
<p>可以看到我们并没有打断点，但是程序仍然会停止，这是因为执行超时，调试器模拟了一个断点使程序停止。从源码中可以看出，这里的超时时间是5s。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Check if a timeout occurred. */</span></span><br><span class="line"><span class="keyword">if</span> (ar-&gt;event == LUA_HOOKCOUNT &amp;&amp; ldb.step == <span class="number">0</span> &amp;&amp; bp == <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">mstime_t</span> elapsed = mstime() - server.lua_time_start;</span><br><span class="line">  <span class="keyword">mstime_t</span> timelimit = server.lua_time_limit ?</span><br><span class="line">    server.lua_time_limit : <span class="number">5000</span>;</span><br><span class="line">  <span class="keyword">if</span> (elapsed &gt;= timelimit) &#123;</span><br><span class="line">    timeout = <span class="number">1</span>;</span><br><span class="line">    ldb.step = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">/* No timeout, ignore the COUNT event. */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于Redis默认的debug模式是异步的，所以在调试结束后不会改变redis中的数据。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1561004370/Blog/Redis/Lua/lua_debug_04.png" alt="lua_debug_asyn"></p>
<p>当然，你也可以选择以同步模式执行，只需要把执行命令中的<strong>—ldb</strong>参数改成<strong>–ldb-sync-mode</strong>就可以了。</p>
<h4 id="解读EVAL命令"><a href="#解读EVAL命令" class="headerlink" title="解读EVAL命令"></a>解读EVAL命令</h4><p>前文我们已经详细介绍过EVAL命令了，不了解的同学可以再回顾一下<a href="[https://jackeyzhe.github.io/2019/06/10/Redis-Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/](https://jackeyzhe.github.io/2019/06/10/Redis-Lua脚本中学教程（上）/">Redis Lua脚本中学教程（上）</a>)。今天我们结合源码继续探究EVAL命令。</p>
<p>在server.c文件中，我们知道了eval命令执行的是evalCommand函数。这个函数的实现在scripting.c文件中。</p>
<p>函数调用栈是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">evalCommand</span><br><span class="line">	(evalGenericCommandWithDebugging)</span><br><span class="line">    evalGenericCommand</span><br><span class="line">      lua_pcall  <span class="comment">//Lua函数</span></span><br></pre></td></tr></table></figure>
<p>evalCommand函数很简单，只是简单的判断是否是调试模式，如果是调试模式，调用evalGenericCommandWithDebugging函数，如果不是，直接调用evalGenericCommand函数。</p>
<p>在evalGenericCommand函数中，先判断了key的数量是否正确</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Get the number of arguments that are keys */</span></span><br><span class="line"><span class="keyword">if</span> (getLongLongFromObjectOrReply(c,c-&gt;argv[<span class="number">2</span>],&amp;numkeys,<span class="literal">NULL</span>) != C_OK)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (numkeys &gt; (c-&gt;argc - <span class="number">3</span>)) &#123;</span><br><span class="line">    addReplyError(c,<span class="string">"Number of keys can't be greater than number of args"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (numkeys &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    addReplyError(c,<span class="string">"Number of keys can't be negative"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着查看脚本是否已经在缓存中，如果没有，计算脚本的SHA1校验和，如果已经存在，将SHA1校验和转换为小写</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* We obtain the script SHA1, then check if this function is already</span></span><br><span class="line"><span class="comment">     * defined into the Lua state */</span></span><br><span class="line">funcname[<span class="number">0</span>] = <span class="string">'f'</span>;</span><br><span class="line">funcname[<span class="number">1</span>] = <span class="string">'_'</span>;</span><br><span class="line"><span class="keyword">if</span> (!evalsha) &#123;</span><br><span class="line">    <span class="comment">/* Hash the code if this is an EVAL call */</span></span><br><span class="line">    sha1hex(funcname+<span class="number">2</span>,c-&gt;argv[<span class="number">1</span>]-&gt;ptr,sdslen(c-&gt;argv[<span class="number">1</span>]-&gt;ptr));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* We already have the SHA if it is a EVALSHA */</span></span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">char</span> *sha = c-&gt;argv[<span class="number">1</span>]-&gt;ptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Convert to lowercase. We don't use tolower since the function</span></span><br><span class="line"><span class="comment">         * managed to always show up in the profiler output consuming</span></span><br><span class="line"><span class="comment">         * a non trivial amount of time. */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">40</span>; j++)</span><br><span class="line">        funcname[j+<span class="number">2</span>] = (sha[j] &gt;= <span class="string">'A'</span> &amp;&amp; sha[j] &lt;= <span class="string">'Z'</span>) ?</span><br><span class="line">        sha[j]+(<span class="string">'a'</span>-<span class="string">'A'</span>) : sha[j];</span><br><span class="line">    funcname[<span class="number">42</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里funcname变量存储的是f_ +SHA1校验和，Redis会将脚本定义为一个Lua函数，funcname是函数名。函数体是脚本本身。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">sds <span class="title">luaCreateFunction</span><span class="params">(client *c, lua_State *lua, robj *body)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> funcname[<span class="number">43</span>];</span><br><span class="line">    dictEntry *de;</span><br><span class="line"></span><br><span class="line">    funcname[<span class="number">0</span>] = <span class="string">'f'</span>;</span><br><span class="line">    funcname[<span class="number">1</span>] = <span class="string">'_'</span>;</span><br><span class="line">    sha1hex(funcname+<span class="number">2</span>,body-&gt;ptr,sdslen(body-&gt;ptr));</span><br><span class="line"></span><br><span class="line">    sds sha = sdsnewlen(funcname+<span class="number">2</span>,<span class="number">40</span>);</span><br><span class="line">    <span class="keyword">if</span> ((de = dictFind(server.lua_scripts,sha)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        sdsfree(sha);</span><br><span class="line">        <span class="keyword">return</span> dictGetKey(de);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sds funcdef = sdsempty();</span><br><span class="line">    funcdef = sdscat(funcdef,<span class="string">"function "</span>);</span><br><span class="line">    funcdef = sdscatlen(funcdef,funcname,<span class="number">42</span>);</span><br><span class="line">    funcdef = sdscatlen(funcdef,<span class="string">"() "</span>,<span class="number">3</span>);</span><br><span class="line">    funcdef = sdscatlen(funcdef,body-&gt;ptr,sdslen(body-&gt;ptr));</span><br><span class="line">    funcdef = sdscatlen(funcdef,<span class="string">"\nend"</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (luaL_loadbuffer(lua,funcdef,sdslen(funcdef),<span class="string">"@user_script"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            addReplyErrorFormat(c,</span><br><span class="line">                <span class="string">"Error compiling script (new function): %s\n"</span>,</span><br><span class="line">                lua_tostring(lua,<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        lua_pop(lua,<span class="number">1</span>);</span><br><span class="line">        sdsfree(sha);</span><br><span class="line">        sdsfree(funcdef);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sdsfree(funcdef);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lua_pcall(lua,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            addReplyErrorFormat(c,<span class="string">"Error running script (new function): %s\n"</span>,</span><br><span class="line">                lua_tostring(lua,<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        lua_pop(lua,<span class="number">1</span>);</span><br><span class="line">        sdsfree(sha);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We also save a SHA1 -&gt; Original script map in a dictionary</span></span><br><span class="line"><span class="comment">     * so that we can replicate / write in the AOF all the</span></span><br><span class="line"><span class="comment">     * EVALSHA commands as EVAL using the original script. */</span></span><br><span class="line">    <span class="keyword">int</span> retval = dictAdd(server.lua_scripts,sha,body);</span><br><span class="line">    serverAssertWithInfo(c ? c : server.lua_client,<span class="literal">NULL</span>,retval == DICT_OK);</span><br><span class="line">    server.lua_scripts_mem += sdsZmallocSize(sha) + getStringObjectSdsUsedMemory(body);</span><br><span class="line">    incrRefCount(body);</span><br><span class="line">    <span class="keyword">return</span> sha;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在执行脚本之前，还要保存传入的参数，选择正确的数据库。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Populate the argv and keys table accordingly to the arguments that</span></span><br><span class="line"><span class="comment"> * EVAL received. */</span></span><br><span class="line">luaSetGlobalArray(lua,<span class="string">"KEYS"</span>,c-&gt;argv+<span class="number">3</span>,numkeys);</span><br><span class="line">luaSetGlobalArray(lua,<span class="string">"ARGV"</span>,c-&gt;argv+<span class="number">3</span>+numkeys,c-&gt;argc<span class="number">-3</span>-numkeys);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Select the right DB in the context of the Lua client */</span></span><br><span class="line">selectDb(server.lua_client,c-&gt;db-&gt;id);</span><br></pre></td></tr></table></figure>
<p>然后还需要设置钩子，我们之前提过的脚本执行超时自动打断点以及可以执行SCRPIT KILL命令停止脚本和通过SHUTDOWN命令停止服务器，都是通过钩子来实现的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Set a hook in order to be able to stop the script execution if it</span></span><br><span class="line"><span class="comment">     * is running for too much time.</span></span><br><span class="line"><span class="comment">     * We set the hook only if the time limit is enabled as the hook will</span></span><br><span class="line"><span class="comment">     * make the Lua script execution slower.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If we are debugging, we set instead a "line" hook so that the</span></span><br><span class="line"><span class="comment">     * debugger is call-back at every line executed by the script. */</span></span><br><span class="line">server.lua_caller = c;</span><br><span class="line">server.lua_time_start = mstime();</span><br><span class="line">server.lua_kill = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (server.lua_time_limit &gt; <span class="number">0</span> &amp;&amp; ldb.active == <span class="number">0</span>) &#123;</span><br><span class="line">    lua_sethook(lua,luaMaskCountHook,LUA_MASKCOUNT,<span class="number">100000</span>);</span><br><span class="line">    delhook = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ldb.active) &#123;</span><br><span class="line">    lua_sethook(server.lua,luaLdbLineHook,LUA_MASKLINE|LUA_MASKCOUNT,<span class="number">100000</span>);</span><br><span class="line">    delhook = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里已经万事俱备了，就可以直接调用lua_pcall函数来执行脚本了。执行完之后，还要删除钩子并把结果保存到缓冲中。</p>
<p>上面就是脚本执行的整个过程，这个过程之后，Redis还会处理一些脚本同步的问题。这个前文我们也介绍过了《<a href="https://jackeyzhe.github.io/2019/06/10/Redis-Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/">Redis Lua脚本中学教程（上）</a>》</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>到这里，Redis Lua脚本系列就全部结束了。文章虽然结束了，但是学习还远远没有结束。大家有问题的话欢迎和我一起探讨。共同学习，共同进步~</p>
<p>对Lua感兴趣的同学可以读一下《Programming in Lua》，有条件的尽量支持正版，想先看看质量的可以在我公众号后台回复<strong>Lua</strong>获取电子书。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Lua脚本小学教程</title>
    <url>/2019/05/13/Redis-Lua%E8%84%9A%E6%9C%AC%E5%B0%8F%E5%AD%A6%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Redis提供了丰富的指令集，但是仍然不能满足所有场景，在一些特定场景下，需要自定义一些指定来完成某些功能。因此，Redis提供了Lua脚本支持，用户可以自己编写脚本来实现想要的功能。<a id="more"></a></p>
<h4 id="什么是Lua？"><a href="#什么是Lua？" class="headerlink" title="什么是Lua？"></a>什么是Lua？</h4><p>Lua是一种功能强大的，高效，轻量级，可嵌入的脚本语言。它是动态类型语言，通过使用基于寄存器的虚拟机解释字节码运行，并具有增量垃圾收集的自动内存管理，是配置，脚本和快速原型设计的最佳选择。</p>
<h4 id="Redis怎么执行Lua脚本"><a href="#Redis怎么执行Lua脚本" class="headerlink" title="Redis怎么执行Lua脚本"></a>Redis怎么执行Lua脚本</h4><h5 id="EVAL命令"><a href="#EVAL命令" class="headerlink" title="EVAL命令"></a>EVAL命令</h5><p>Redis中可以使用EVAL命令执行相应的Lua脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; EVAL <span class="string">'local val="Hello Jackey" return val'</span> 0</span><br><span class="line"><span class="string">"Hello Jackey"</span></span><br></pre></td></tr></table></figure>
<p>你可以像这样在交互模式下执行Lua脚本，这样更方便处理错误。只是这样还不够，有时候，我们需要给Lua脚本传入一些参数。细心的同学一定注意到了，脚本的后面还有一个数字0，它的意思的不传入参数。</p>
<p>那怎么传参数呢？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; EVAL <span class="string">'local val=KEYS[1] return val.." "..ARGV[1]'</span> 1 Hello Redis</span><br><span class="line"><span class="string">"Hello Redis"</span></span><br></pre></td></tr></table></figure>
<p>其实也很简单，传入的参数都是kv形式的，这个数字代表传入参数的key的数量，再后面就是n个key和n个value。在脚本中，可以理解为从KEYS数组和ARGV数组中获取对应的值，下标是从1开始的。</p>
<p><em>上面例子中的两个点是Lua脚本中字符串连接的操作符</em></p>
<p>现在我们已经知道怎么在Redis中执行Lua脚本了，可是这样的脚本和Redis没有关系啊，怎么才能操作Redis中的数据呢？请继续看我表演</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; get my_name</span><br><span class="line"><span class="string">"Jackeyzhe"</span></span><br><span class="line">&gt; EVAL <span class="string">'local val=ARGV[1].." "..redis.call("get",KEYS[1]) return val'</span> 1 my_name Hello</span><br><span class="line"><span class="string">"Hello Jackeyzhe"</span></span><br></pre></td></tr></table></figure>
<p>使用redis.call或redis.pcall（以后会提到）就可以操作redis了。</p>
<p>需要注意的是，如果返回下面的错误，说明要获取的key不存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; EVAL <span class="string">'local val=ARGV[1].." "..redis.call("get",KEYS[1]) return val'</span> 1 me Hello</span><br><span class="line">(error) ERR Error running script (call to f_eb11f8ddeeee07cc88d1f3bd103069284b83c5d8): @user_script:1: user_script:1: attempt to concatenate a boolean value</span><br></pre></td></tr></table></figure>
<p>我们可以使用上面这种方法执行一些简单的Lua脚本，如果要执行更加复杂的Lua脚本，用EVAL命令就会显得臃肿且凌乱。所以Redis又提供了一种方法。</p>
<h5 id="redis-cli-–eval"><a href="#redis-cli-–eval" class="headerlink" title="redis-cli –eval"></a>redis-cli –eval</h5><p>我们可以先写一个Lua文件，然后使用redis-cli命令来执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local name=redis.call(&quot;get&quot;, KEYS[1])</span><br><span class="line">local greet=ARGV[1]</span><br><span class="line">local result=greet..&quot; &quot;..name</span><br><span class="line">return result</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; redis-cli --<span class="built_in">eval</span> hello.lua my_name , Hello</span><br><span class="line"><span class="string">"Hello Jackey"</span></span><br></pre></td></tr></table></figure>
<p>这样，我们就可以先写一个.lua文件，然后再使用redis-cli命令来执行了，看起来也不会很凌乱，使用这种方式传入参数时，不需要指定key的数量，而是用逗号分隔key和argv。</p>
<h5 id="EVALSHA"><a href="#EVALSHA" class="headerlink" title="EVALSHA"></a>EVALSHA</h5><p>你以为到这就结束了吗？那就too naive了。如果我们在Redis交互模式中，想要执行脚本文件怎么办？每次都退出来，执行完再连接一次？这未免太麻烦了。Redis提供了EVALSHA命令，使我们可以在交互模式执行脚本文件。</p>
<p>首先，需要上传脚本文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ redis-cli SCRIPT LOAD <span class="string">"<span class="variable">$(cat hello.lua)</span>"</span></span><br><span class="line"><span class="string">"463ff2ca9e78e36cd66ee9d37ee0dcd59100bf46"</span></span><br></pre></td></tr></table></figure>
<p>会得到一串十六进制的数字，这是这个脚本的唯一标识。拿到这个数字后，表示我们已经将脚本上传到服务器了，接下来就可以使用这个标识来执行脚本了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; EVALSHA 463ff2ca9e78e36cd66ee9d37ee0dcd59100bf46 1 my_name Hello</span><br><span class="line"><span class="string">"Hello Jackeyzhe"</span></span><br></pre></td></tr></table></figure>
<h4 id="终止脚本"><a href="#终止脚本" class="headerlink" title="终止脚本"></a>终止脚本</h4><p>Redis中Lua脚本到默认执行时长是5秒，一般情况下脚本的执行时间都是毫秒级的，如果执行超时，脚本也不会停止，而是记录错误日志。</p>
<p>终止脚本执行的方法有两种</p>
<ol>
<li>使用KILL SCRIPT命令</li>
<li>使用SHUTDOWN NOSAVE命令关闭服务器</li>
</ol>
<p>不过不建议手动终止脚本</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本文简要介绍了什么是Lua，以及Redis执行和终止Lua脚本的方法。如果都掌握了，那么恭喜你已经从Lua小学毕业了。在Lua中学你会学到Redis关于Lua命令的更详细介绍。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Connection</title>
    <url>/2018/09/19/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AConnection/</url>
    <content><![CDATA[<p>最近在学习Redis的相关知识，上一篇我们也介绍了Redis的安装方法和基本数据结构，后面就打算开一个新的系列文章：Redis命令详解。既是对基础的巩固，也是为了以后查询起来更方便。<a id="more"></a></p>
<p>整个系列会分为以下几个部分：</p>
<ul>
<li>Connection</li>
<li><a href="https://jackeyzhe.github.io/2018/09/22/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AKeys/">Keys</a></li>
<li><a href="https://jackeyzhe.github.io/2018/10/07/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AStrings/">Strings</a></li>
<li><a href="https://jackeyzhe.github.io/2018/11/22/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AHashs/">Hashs</a></li>
<li><a href="https://jackeyzhe.github.io/2018/11/23/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ALists/">Lists</a></li>
<li><a href="https://jackeyzhe.github.io/2018/12/19/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ASets/">Sets</a></li>
<li><a href="https://jackeyzhe.github.io/2019/01/06/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ASorted-Sets/">Sorted Sets</a></li>
<li><a href="https://jackeyzhe.github.io/2019/01/15/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AHyperLogLog/">HyperLogLog</a></li>
<li><a href="https://jackeyzhe.github.io/2019/03/04/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ATransactions/">Transactions</a></li>
<li><a href="https://jackeyzhe.github.io/2019/07/01/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AServer/">Server</a></li>
<li><a href="https://jackeyzhe.github.io/2019/07/01/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AStreams/">Streams</a></li>
<li><a href="https://jackeyzhe.github.io/2019/08/28/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9APub-Sub/">Pub/Sub</a></li>
<li><a href="https://jackeyzhe.github.io/2019/08/28/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ACluster/">Cluster</a></li>
<li><a href="https://jackeyzhe.github.io/2019/09/06/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AGeo/">Geo</a></li>
<li><a href="https://jackeyzhe.github.io/2019/06/10/Redis-Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/">Scripting</a></li>
</ul>
<p>今天我们从Redis连接的相关命令开始。</p>
<h4 id="AUTH"><a href="#AUTH" class="headerlink" title="AUTH"></a>AUTH</h4><p>可用版本：1.0.0</p>
<p>AUTH命令用于检测密码是否与配置文件中的密码是否一致，如果一致，则服务器会返回OK，并且继续接受后面的命令，否则，Redis会拒绝执行接下来的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass <span class="string">"mypass"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; AUTH my</span><br><span class="line">(error) ERR invalid password</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; AUTH mypass</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>
<p>需要注意的是：由于Redis的读写性能非常高，所以可以在段时间内处理许多次AUTH操作，这样使得密码被暴力破解的可能性增加，所以我们在设置密码的时候需要尽量使密码安全性更强。</p>
<h4 id="ECHO"><a href="#ECHO" class="headerlink" title="ECHO"></a>ECHO</h4><p>可用版本：1.0.0</p>
<p>ECHO命令打印字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ECHO <span class="string">"Hello!"</span></span><br><span class="line"><span class="string">"Hello!"</span></span><br></pre></td></tr></table></figure>
<h4 id="PING"><a href="#PING" class="headerlink" title="PING"></a>PING</h4><p>可用版本：1.0.0</p>
<p>PING命令用于检测服务器是否在运行，或者测试延迟。正常情况下，如果没有参数，则服务器会返回一个PONG，如果有参数的话，服务器会将参数复制一份，返回为字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; PING <span class="string">"hi"</span></span><br><span class="line"><span class="string">"hi"</span></span><br></pre></td></tr></table></figure>
<h4 id="QUIT"><a href="#QUIT" class="headerlink" title="QUIT"></a>QUIT</h4><p>可用版本：1.0.0</p>
<p>QUIT命令用于关闭当前连接，当所有等待中的回复都写入客户端后，就会立即关闭当前连接。</p>
<h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><p>可用版本：1.0.0</p>
<p>SELECT命令用于切换数据库，参数为数据库索引号。一个新连接的默认数据库索引号是0，所有的数据库都持久化到一个相同的RDB或AOF文件。不同的数据库可以有相同的key。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt;</span><br></pre></td></tr></table></figure>
<p>切换数据库后，提示符后面会出现数据库索引号。需要注意的是：当使用Redis Cluster时，不能使用SELECT命令。</p>
<h4 id="SWAPDB"><a href="#SWAPDB" class="headerlink" title="SWAPDB"></a>SWAPDB</h4><p>可用版本：4.0.0</p>
<p>SWAPDB用于交换两个数据库，连接到这个数据库的其他客户端会立即看到另一个数据库的数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#client 0</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> db db_0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">"db_0"</span></span><br><span class="line">127.0.0.1:6379&gt; SWAPDB 0 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="comment">#client 1</span></span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get db</span><br><span class="line"><span class="string">"db_0"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Cluster</title>
    <url>/2019/08/28/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ACluster/</url>
    <content><![CDATA[<p>前文中我们介绍过了Redis的三种集群方案，没有了解过的同学可以自行前往。今天要介绍的Redis的亲儿子Cluster相关的命令。<a id="more"></a></p>
<p><a href="https://jackeyzhe.github.io/2018/11/04/%E7%8E%A9%E8%BD%ACRedis%E9%9B%86%E7%BE%A4%E4%B9%8BSentinel/">玩转Redis集群之Sentinel</a></p>
<p><a href="https://jackeyzhe.github.io/2018/11/14/%E7%8E%A9%E8%BD%ACRedis%E9%9B%86%E7%BE%A4%E4%B9%8BCodis/">玩转Redis集群之Codis</a></p>
<p><a href="https://jackeyzhe.github.io/2018/11/27/%E7%8E%A9%E8%BD%ACRedis%E9%9B%86%E7%BE%A4%E4%B9%8BCluster/">玩转Redis集群之Cluster</a></p>
<h4 id="CLUSTER-ADDSLOTS"><a href="#CLUSTER-ADDSLOTS" class="headerlink" title="CLUSTER ADDSLOTS"></a>CLUSTER ADDSLOTS</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(N)，N是参数中hash的slot总数</p>
<p>这个命令是用来将指定的slot分配给接收命令的机器。如果执行成功，该机器就拥有这些slot，并会在集群中进行广播。</p>
<p>需要注意的是：</p>
<ol>
<li>该命令只有在当所有指定的slot在接收命令的节点上没有被分配时生效。节点将拒绝接纳已经分配到其他节点的slot。</li>
<li>如果相同的slot被多次指定，命令就会执行失败。</li>
<li>如果一个slot作为参数被设置为importing，一旦节点向自己分配该slot，这个状态将会被清除。</li>
</ol>
<p>这个命令的应用场景有两种：</p>
<ol>
<li>创建新的集群时，ADDSLOTS用于主节点初始化分配可用的hash slots</li>
<li>修复有未分配slots的坏集群</li>
</ol>
<p>如果一个节点为自己分配了一个slot集合，它会将这个信息在心跳包的header里传播出去。然而其他节点只有在他们的slot没有被其他节点绑定或者没有作为新节点传播时才会接收这个信息。</p>
<p>这意味着这个命令应该仅通过redis集群应用管理客户端，例如redis-trib。如果这个命令使用了错误的上下文会导致集群处于错误的状态或者导致数据丢失，因此这个命令需要谨慎使用。</p>
<h4 id="CLUSTER-COUNT-FAILURE-REPORTS"><a href="#CLUSTER-COUNT-FAILURE-REPORTS" class="headerlink" title="CLUSTER COUNT-FAILURE-REPORTS"></a>CLUSTER COUNT-FAILURE-REPORTS</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(N)，N是故障报告的数量</p>
<p>这个命令返回指定节点的故障报告。故障报告是Redis Cluster用来将节点从PFAIL状态转换到FAIL状态的方式。</p>
<p>更多的细节：</p>
<ul>
<li>一个节点会用PFAIL标记一个不可达时间超过超时时间，这个超时时间是Redis Cluster配置中的基本选项</li>
<li>处于PFAIL状态的节点会将状态信息提供在心跳包的gossip部分。</li>
<li>每当一个节点处理来自其他节点的gossip信息时，该节点会建立故障报告，并且会记住发送消息包的节点说的其他节点是在PFAIL状态的消息。</li>
<li>每个故障报告的生存时间是节点超时时间的两倍</li>
<li>如果在一段时间一个节点被另一个节点标记为PFAIL状态，并且在同一时间收到大多数主节点关于该节点的故障报告，那么该节点的故障状态会从PFAIL变成FAIL，并且广播这个信息，让所有可达的节点将这个节点标记为FAIL。</li>
</ul>
<p>该节点返回当前节点的故障报告数，该计数值不包括当前节点。</p>
<h4 id="CLUSTER-COUNTKEYSINSLOT"><a href="#CLUSTER-COUNTKEYSINSLOT" class="headerlink" title="CLUSTER COUNTKEYSINSLOT"></a>CLUSTER COUNTKEYSINSLOT</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>这个命令返回指定Redis集群的slot的key的数量。该命令只查询连接节点的本地数据集，如果指定的slot被分配在别的节点上，就会返回0。</p>
<h4 id="CLUSTER-DELSLOTS"><a href="#CLUSTER-DELSLOTS" class="headerlink" title="CLUSTER DELSLOTS"></a>CLUSTER DELSLOTS</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(N)，N是slot参数的数量</p>
<p>在Redis Cluster中，每个节点都会知道哪些主节点正在负责哪些slot。</p>
<p>DELSLOTS命令使一个特定的节点忘记主节点负责的hash slot。在这之后，这些hash slot就被认为是未绑定状态的。需要注意的是：</p>
<ol>
<li>命令只在参数指定的hash slot和某些节点绑定时有效</li>
<li>如果同一个hash slot被指定多次，该命令会失效</li>
<li>节点可能因为没有覆盖全部slot而变成下线状态</li>
</ol>
<h4 id="CLUSTER-FAILOVER"><a href="#CLUSTER-FAILOVER" class="headerlink" title="CLUSTER FAILOVER"></a>CLUSTER FAILOVER</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：CLUSTER FAILOVER [FORCE|TAKEOVER]</p>
<p>该命令只能再集群slave节点执行，让slave节点进行一次人工的故障切换。</p>
<p>人工故障切换时一种常规操作，而不是真的出了故障。当我们希望当前的master和它的slave进行一次安全的主备切换时，流程如下：</p>
<ol>
<li>当前slave节点告知其master停止处理来自客户端的请求。</li>
<li>master节点将当前replication offset回复给slave</li>
<li>该slave节点在未应用至replication offset之前不做任何操作，以保证master传来的数据均被处理</li>
<li>该slave节点进行故障转移，从集群中大多数master获取一个新的配置，并广播自己的最新配置</li>
<li>旧的master更新配置，解除客户端阻塞，回复重定向信息，以便客户端可以和新的master通信。</li>
</ol>
<p>该命令有两个选项：FORCE和TAKEOVER，下面我们来解释一下这两个选项的作用。</p>
<p>FORCE选项：slave节点不会和master做协商，直接从上述第4步开始进行故障切换</p>
<p>TAKEOVER选项：忽略集群一致验证的人工故障切换。有时会出现集群中master节点不够的情况，此时我们就需要使用TAKEOVER选项将slave批量切换为master节点。</p>
<p>TAKEOVER选项实现了FORCE选项的所有功能，当一个slave节点收到CLUSTER FAILOVER TAKEOVER命令时会有如下操作：</p>
<ol>
<li>生成一个新的configEpoch，如果本地配置的epoch不是最大的，就需要将其配置为最大。</li>
<li>将原master节点管理的所有slot分配给自己，同时尽快分发最新的配置给所有可达节点。</li>
</ol>
<h4 id="CLUSTER-FORGET"><a href="#CLUSTER-FORGET" class="headerlink" title="CLUSTER FORGET"></a>CLUSTER FORGET</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>这个命令用于移除指定node-id的node。如果一个node属于某个集群，那么集群中其他节点都会知道它的存在，因此CLUSTER FORGET命令会发送给集群中剩下的所有节点。</p>
<p>然而这个命令并不是简单的把node从node表中删除，它还禁止这个节点再次被添加进集群。</p>
<p>假设我们有4个节点：A、B、C、D，此时我们删除D，如果不把D加入禁用列表，就会发生以下情况：</p>
<ol>
<li>把D负责的slot重新分配给A、B、C</li>
<li>此时D没有负责的slot了，但仍然在node表中</li>
<li>给A发送命令CLUSTER FORGET D</li>
<li>B给A发送一个心跳包，其中包含了D的信息</li>
<li>A不知道D的信息，就又开始联系D</li>
<li>D又被重新加入到A的node表中</li>
</ol>
<p>这样我们的删除命令就无效了，除非我们在各个节点没有互相发送心跳包的时候同时给他们发送CLUSTER FORGET命令。但这显然不合理，所以我们实际上应该这样做：</p>
<ol>
<li>指定的节点从node表中删除</li>
<li>被删除的节点的node-id加入禁用列表一分钟</li>
<li>node在处理心跳消息时会忽略禁用列表中的所有node-id的节点</li>
</ol>
<p>在一些特殊情况下，这个命令会无法执行并返回一个错误。</p>
<ol>
<li>指定的node-id没有在node表中</li>
<li>收到命令的节点是从节点，而要删除的节点是它的主节点</li>
<li>收到命令的节点和待删除的节点是同一个节点</li>
</ol>
<h4 id="CLUSTER-GETKEYSINSLOT"><a href="#CLUSTER-GETKEYSINSLOT" class="headerlink" title="CLUSTER GETKEYSINSLOT"></a>CLUSTER GETKEYSINSLOT</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(log(N))，N是请求的key的数量</p>
<p>用法：CLUSTER GETKEYSINSLOT slot count</p>
<p>这个命令返回连接节点指定的slot里key的列表。key的最大数量由count指定。所以这个API可以用作key的批处理。这个命令的主要用途是在做rehash的过程中，把slot从一个节点移动到另外一个节点。</p>
<h4 id="CLUSTER-INFO"><a href="#CLUSTER-INFO" class="headerlink" title="CLUSTER INFO"></a>CLUSTER INFO</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>提供Redis集群的相关信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:2</span><br><span class="line">cluster_stats_messages_sent:1483972</span><br><span class="line">cluster_stats_messages_received:1483968</span><br></pre></td></tr></table></figure>
<ul>
<li>cluster_state：ok状态表示节点可以接收查询请求，fail表示至少有一个slot没有分配或者在error状态。</li>
<li>cluster_slots_assigned：已经分配到集群节点的slot。16384个slot全部被分配到集群节点是集群节点正常运行的必要条件</li>
<li>cluster_slots_ok：slot不是FAIL或PFAIL状态的数量</li>
<li>cluster_slots_pfail：slot状态是PFAIL的数量</li>
<li>cluster_slots_fail：slot状态是FAIL的数量，如果不是0，那么集群节点将无法提供服务，除非cluster-require-full-coverage被设置为no</li>
<li>cluster_known_nodes：集群中的节点数量</li>
<li>cluster_size：至少包含一个slot且能够提供服务的master节点数量</li>
<li>cluster_current_epoch：集群本地Current Epoch的值</li>
<li>cluster_my_epoch：当前正在使用节点的Config Epoch值</li>
<li>cluster_stats_messages_sent：通过点到点总线发送消息的数量</li>
<li>cluster_stats_messages_received：通过点到点总线接收消息的数量</li>
</ul>
<h4 id="CLUSTER-KEYSLOT"><a href="#CLUSTER-KEYSLOT" class="headerlink" title="CLUSTER KEYSLOT"></a>CLUSTER KEYSLOT</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(N)，N是key的字节数</p>
<p>返回一个整数，用于标识指定键所散列到的slot。这个命令主要是用于调试和测试。因为它通过一个API来暴露Redis底层hash算法的实现。</p>
<h4 id="CLUSTER-MEET"><a href="#CLUSTER-MEET" class="headerlink" title="CLUSTER MEET"></a>CLUSTER MEET</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>CLUSTER MEET命令用来连接不同Redis节点，以进入工作集群。</p>
<p>有一点基本的共识是节点之间互相都是不信任的，并且被认为是未知节点。以避免因为系统管理错误或者网络地址被修改而导致多个集群的节点混合成一个。</p>
<p>因此，为了使给定的节点能接收另一个节点到Redis Cluster中，有两种方法：</p>
<ol>
<li>系统管理员发送CLUSTER MEET命令强制一个节点会面另一个节点</li>
<li>一个已知节点发送一个保存在gossip部分的节点列表，包含着未知节点。如果接收的节点已经将发送节点标记为已知节点，那么它会处理gossip中的位置节点信息，并给它发送一个握手消息。</li>
</ol>
<p>Redis Cluster是一个完整的网络，在创建网络时，并不需要给所有节点发送CLUSTER MEET命令，只要发送了足够的命令，保证每个节点都有已知节点，其他的事情就交给gossip来处理了。</p>
<h4 id="CLUSTER-NODES"><a href="#CLUSTER-NODES" class="headerlink" title="CLUSTER NODES"></a>CLUSTER NODES</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(N)，N是集群中的节点数</p>
<p>该命令提供了当前连接节点所属集群的配置信息。信息格式和Redis集群在磁盘上存储使用的序列化格式完全一样。</p>
<p>通常，如果你想知道hash slot与节点的关联关系，你应该使用CLUSTER SLOTS命令。CLUSTER NODES主要用于管理任务，调试和配置监控。redis-trib也会使用该命令管理集群。</p>
<p>命令的结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;id&gt; &lt;ip:port&gt; &lt;flags&gt; &lt;master&gt; &lt;ping-sent&gt; &lt;pong-recv&gt; &lt;config-epoch&gt; &lt;link-state&gt; &lt;slot&gt; &lt;slot&gt; ... &lt;slot&gt;</span><br></pre></td></tr></table></figure>
<h4 id="CLUSTER-REPLICAS"><a href="#CLUSTER-REPLICAS" class="headerlink" title="CLUSTER REPLICAS"></a>CLUSTER REPLICAS</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(1)</p>
<p>该命令会列出主节点的从节点列表。输出格式与CLUSTER NODES格式相同。</p>
<p>若特定节点状态未知，或在接收命令节点不是主节点，则命令失败。</p>
<h4 id="CLUSTER-REPLICATE"><a href="#CLUSTER-REPLICATE" class="headerlink" title="CLUSTER REPLICATE"></a>CLUSTER REPLICATE</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>该命令重新配置一个节点成为指定master的从节点。如果收到命令的节点是empty master，那么该节点的角色将由master转换为slave。</p>
<p>一旦一个节点变成另一个master的slave，不需要将这一变化告知集群内的其他节点，心跳消息会把最新配置同步给其他节点。</p>
<p>一个从节点接收这个命令需要满足以下条件：</p>
<ol>
<li>指定节点存在它的节点列表中</li>
<li>指定节点对接收命令的节点未知</li>
<li>指定节点是master</li>
</ol>
<p>如果收到命令的节点不是slave而是master，只有在如下情况下，命令才会执行成功：</p>
<ol>
<li>该节点不保存任何hash slot</li>
<li>该节点是空的，key空间没有任何key</li>
</ol>
<h4 id="CLUSTER-RESET"><a href="#CLUSTER-RESET" class="headerlink" title="CLUSTER RESET"></a>CLUSTER RESET</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(N)，N是已知节点的数量</p>
<p>根据reset类型（hard或soft）重置一个集群的节点。当主节点hold住一个或多个key时，这个命令无法执行，必须先使用FLUSHALL命令删除所有的key。该命令的影响是：</p>
<ol>
<li>集群中的节点都被忽略</li>
<li>所有已分配的slot会被reset，slots-to-nodes关系被完全清除</li>
<li>如果节点是slave，它会被切换成空master。</li>
<li>Hard模式：生成新的节点ID</li>
<li>Hard模式：currentEpoch和configEpoch被置为0</li>
<li>新配置被持久化到节点磁盘上的集群配置信息文件中</li>
</ol>
<h4 id="CLUSTER-SAVECONFIG"><a href="#CLUSTER-SAVECONFIG" class="headerlink" title="CLUSTER SAVECONFIG"></a>CLUSTER SAVECONFIG</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>强制保存配置nodes.conf到磁盘。该命令主要用于nodes.conf文件丢失或删除时重新生成文件。</p>
<h4 id="CLUSTER-SET-CONFIG-EPOCH"><a href="#CLUSTER-SET-CONFIG-EPOCH" class="headerlink" title="CLUSTER SET-CONFIG-EPOCH"></a>CLUSTER SET-CONFIG-EPOCH</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>该命令为一个全新的节点设置config epoch，只在以下情况有效：</p>
<ol>
<li>节点的节点信息表是空的</li>
<li>节点的config epoch是0</li>
</ol>
<p>人工修改一个节点的config epoch是不安全的，但是当epoch产生冲突时，自动解决又非常慢，这时可以使用这个命令进行人工干预。</p>
<h4 id="CLUSTER-SETSLOT"><a href="#CLUSTER-SETSLOT" class="headerlink" title="CLUSTER SETSLOT"></a>CLUSTER SETSLOT</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：CLUSTER SETSLOTslot IMPORTING|MIGRATING|STABLE|NODE [node-id]</p>
<p>CLUSTER SETSLOT根据子命令修改节点的hash slot状态：</p>
<ol>
<li>MIGRATING：将一个hash slot设置为migrating状态</li>
<li>IMPORTING：将一个hash slot设置为importing状态</li>
<li>STABLE：清除migrating或importing状态</li>
<li>NODE：把hash slot绑定到其他节点</li>
</ol>
<p>该命令通常在rehash时使用，将源节点的hash slot置为migrating状态，目标节点的hash slot置为importing状态。</p>
<ul>
<li>CLUSTER SETSLOT <slot> MIGRATING <destination-node-id></destination-node-id></slot></li>
</ul>
<p>该命令将slot设置为migrating状态，接下来要处理的key如果存在，命令正常执行。如果不存在，则节点发出ASK重定向，让客户端去请求destination-node节点。对于批量key处理，如果只有部分节点存在，则返回TRYAGAIN错误。</p>
<ul>
<li>CLUSTER SETSLOT <slot> IMPORTING <source-node-id></source-node-id></slot></li>
</ul>
<p>这是MIGRATING的反操作，接下来涉及该slot的命令都被拒绝，并产生一个MOVED重定向，除非命令跟着一个ASK重定向。</p>
<h4 id="CLUSTER-SLAVES"><a href="#CLUSTER-SLAVES" class="headerlink" title="CLUSTER SLAVES"></a>CLUSTER SLAVES</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>该命令会列出指定master节点的所有slave节点，格式和CLUSTER NODES相同。当指定节点未知或不是master时，命令返回一个错误。</p>
<h4 id="CLUSTER-SLOTS"><a href="#CLUSTER-SLOTS" class="headerlink" title="CLUSTER SLOTS"></a>CLUSTER SLOTS</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(N)，N是slot的总数</p>
<p>该命令返回slot和Redis实例的映射关系。这个命令对客户端很有用，在执行命令时，客户端会根据这个命令返回的信息去连接正确的节点执行命令。</p>
<p>每个节点的信息结构如下：</p>
<ul>
<li>起始slot编号</li>
<li>结束slot编号</li>
<li>slot对应的master节点，用IP/Port表示</li>
<li>master节点的第一个副本</li>
<li>第二个副本</li>
</ul>
<h4 id="READONLY"><a href="#READONLY" class="headerlink" title="READONLY"></a>READONLY</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>开启与Redis Cluster从节点连接的读请求</p>
<p>通常从节点将重定向客户端到认证过的主节点，以获取在指定命令中所涉及的slot，然而客户端可以通过READONLY命令将从节点设置为只读模式。</p>
<p>READONLY告诉Redis Cluster从节点愿意读取可能过时的数据。</p>
<p>当连接处于只读模式，只有操作涉及到该从节点的主节点不服务的键时，集群将会发送一个重定向给客户端，这可能是因为：</p>
<ol>
<li>客户端发送一个有关这个从节点的主节点不服务hash slot的命令</li>
<li>集群被重新配置并且从节点不在服务给定hash slot的命令</li>
</ol>
<h4 id="READWRITE"><a href="#READWRITE" class="headerlink" title="READWRITE"></a>READWRITE</h4><p>最早可用版本：3.0.0</p>
<p>时间复杂度：O(1)</p>
<p>禁止与Redis Cluster从节点连接的读请求。</p>
<p>默认情况下禁止Redis Cluster从节点的读请求，但是可以使用READONLY去在每一个连接的基础上改变这个行为，READWRITE命令将连接的只读模式重置为读写模式。</p>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：HyperLogLog</title>
    <url>/2019/01/15/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AHyperLogLog/</url>
    <content><![CDATA[<p>HyperLogLog是Redis的高级数据结构，它在做基数统计的时候非常有用，每个HyperLogLog的键可以计算接近2<sup>64</sup>不同元素的基数，而大小只需要12KB。<a id="more"></a></p>
<p>HyperLogLog目前只支持3个命令，PFADD、PFCOUNT、PFMERGE。我们先来逐一介绍一下。</p>
<h4 id="PFADD"><a href="#PFADD" class="headerlink" title="PFADD"></a>PFADD</h4><p>最早可用版本：2.8.9</p>
<p>时间复杂度：O(1)</p>
<p>将参数中的元素都加入指定的HyperLogLog数据结构中，这个命令会影响基数的计算。如果执行命令之后，基数估计改变了，就返回1；否则返回0。如果指定的key不存在，那么就创建一个空的HyperLogLog数据结构。该命令也支持不指定元素而只指定键值，如果不存在，则会创建一个新的HyperLogLog数据结构，并且返回1；否则返回0。</p>
<h4 id="PFCOUNT"><a href="#PFCOUNT" class="headerlink" title="PFCOUNT"></a>PFCOUNT</h4><p>最早可用版本：2.8.9</p>
<p>时间复杂度：O(1)，对于多个比较大的key的时间复杂度是O(N)</p>
<p>对于单个key，该命令返回的是指定key的近似基数，如果变量不存在，则返回0。</p>
<p>对于多个key，返回的是多个HyperLogLog并集的近似基数，它是通过将多个HyperLogLog合并为一个临时的HyperLogLog，然后计算出来的。</p>
<p>HyperLogLog可以用很少的内存来存储集合的唯一元素。（每个HyperLogLog只有12K加上key本身的几个字节）</p>
<p>HyperLogLog的结果并不精准，错误率大概在0.81%。</p>
<p>需要注意的是：该命令会改变HyperLogLog，因此使用8个字节来存储上一次计算的基数。所以，从技术角度来讲，PFCOUNT是一个写命令。</p>
<h5 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h5><p>即使理论上处理一个存储密度大的HyperLogLog需要花费较长时间，但是当指定一个key时，PFCOUNT命令仍然具有很高的性能。这是因为PFCOUNT会缓存上一次结算的基数，而多数PFADD命令不会更新寄存器。所以才可以达到每秒上百次请求的效果。</p>
<p>当处理多个key时，最耗时的一步是合并操作。而通过计算出来的并集的基数是不能缓存的。所以多个key的处理速度一般在毫秒级。</p>
<h4 id="PFMERGE"><a href="#PFMERGE" class="headerlink" title="PFMERGE"></a>PFMERGE</h4><p>最早可用版本：2.8.9</p>
<p>时间复杂度：O(N)，N是要合并的HyperLogLog的数量</p>
<p>用法：PFMERGE destkey sourcekey [sourcekey …]</p>
<p>合并多个HyperLogLog，合并后的基数近似于合并前的基数的并集（observed Sets）。计算完之后，将结果保存到指定的key。</p>
<p>除了这三个命令，我们还可以像操作String类型的数据那样，对HyperLogLog数据使用SET和GET命令。关于HyperLogLog的原理以及其他细节，我将在后面介绍，敬请期待。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Hashs</title>
    <url>/2018/11/22/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AHashs/</url>
    <content><![CDATA[<p>Hash是一种String类型的field、value的映射表，因此，它非常适合存储对象。下面我们来一一介绍与Hash相关的命令。<a id="more"></a></p>
<h4 id="HDEL"><a href="#HDEL" class="headerlink" title="HDEL"></a>HDEL</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N)，其中N为要删除的field的个数</p>
<p>HDEL命令用于删除指定key的指定的一个或多个field。如果指定的field不存在于指定的key中则会被忽略，如果指定的key不存在，会当做空的hash进行处理，向客户端返回0。</p>
<p>命令的返回值是实际删除的field的个数，不包括不存在的field。</p>
<p>从2.4.0版本开始，该命令支持一次删除多个field。在此之前，如果想一次性删除多个field，只能利用Redis的事务来实现。</p>
<h4 id="HEXISTS"><a href="#HEXISTS" class="headerlink" title="HEXISTS"></a>HEXISTS</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(1)</p>
<p>HEXISTS命令用来验证指定的key是否包含指定的field，如果包含，返回1；如果不包含或者key不存在，返回0。</p>
<h4 id="HGET"><a href="#HGET" class="headerlink" title="HGET"></a>HGET</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(1)</p>
<p>返回指定的key中指定的field对应的value。如果field不在key中或者key不存在，则返回nil。</p>
<h4 id="HGETALL"><a href="#HGETALL" class="headerlink" title="HGETALL"></a>HGETALL</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N)，N为hash的大小，即key中field的个数。</p>
<p>返回key所存储的所有field以及field对应的value。每个value跟在field的后面被返回，因此，返回值的长度是hash的size的2倍。如果key不存在，则返回空列表。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGETALL noexist</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; HSET mykey field1 <span class="string">"follow"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET mykey field2 <span class="string">"Jackeyzhe2018"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HGETALL mykey</span><br><span class="line">1) <span class="string">"field1"</span></span><br><span class="line">2) <span class="string">"follow"</span></span><br><span class="line">3) <span class="string">"field2"</span></span><br><span class="line">4) <span class="string">"Jackeyzhe2018"</span></span><br></pre></td></tr></table></figure>
<h4 id="HINCRBY"><a href="#HINCRBY" class="headerlink" title="HINCRBY"></a>HINCRBY</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HINCRBY key field increment</span><br></pre></td></tr></table></figure>
<p>用来对指定key的指定field进行增量操作，返回计算后的结果。如果key不存在，或者key中不包含指定的field，则会先创建一个value为0的hash，如果value不是数字类型，则会报错。该命令支持的数字范围是64位有符号整数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys * <span class="comment">#演示使用，生产环境不要用</span></span><br><span class="line">1) <span class="string">"mykey"</span></span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash field1 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field1</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">127.0.0.1:6379&gt; HSET myhash fieldStr <span class="string">"follow"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash fieldStr 1</span><br><span class="line">(error) ERR <span class="built_in">hash</span> value is not an <span class="built_in">integer</span></span><br><span class="line">127.0.0.1:6379&gt; HGETALL myhash</span><br><span class="line">1) <span class="string">"field1"</span></span><br><span class="line">2) <span class="string">"1"</span></span><br><span class="line">3) <span class="string">"fieldStr"</span></span><br><span class="line">4) <span class="string">"follow"</span></span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash field2 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; HGETALL myhash</span><br><span class="line">1) <span class="string">"field1"</span></span><br><span class="line">2) <span class="string">"1"</span></span><br><span class="line">3) <span class="string">"fieldStr"</span></span><br><span class="line">4) <span class="string">"follow"</span></span><br><span class="line">5) <span class="string">"field2"</span></span><br><span class="line">6) <span class="string">"2"</span></span><br></pre></td></tr></table></figure>
<h4 id="HINCRBYFLOAT"><a href="#HINCRBYFLOAT" class="headerlink" title="HINCRBYFLOAT"></a>HINCRBYFLOAT</h4><p>最早可用版本：2.6.0</p>
<p>时间复杂度：O(1)</p>
<p>用来对指定的key中指定的field进行浮点类型的加法，如果field不存在，则会先创建一个value为0的field。如果value或者increments不能解析为float类型，则会报错。通过下面的例子可以看到，浮点数的加法会存在一些偏差。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT myhash field3 0.3</span><br><span class="line"><span class="string">"0.3"</span></span><br><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT myhash field3 1.0e3</span><br><span class="line"><span class="string">"1000.29999999999999999"</span></span><br><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT myhash field3 -1.0e3</span><br><span class="line"><span class="string">"0.29999999999999999"</span></span><br><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT myhash fieldStr 0.1</span><br><span class="line">(error) ERR <span class="built_in">hash</span> value is not a <span class="built_in">float</span></span><br><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT myhash field3 <span class="string">"haha"</span></span><br><span class="line">(error) ERR value is not a valid <span class="built_in">float</span></span><br></pre></td></tr></table></figure>
<h4 id="HKEYS"><a href="#HKEYS" class="headerlink" title="HKEYS"></a>HKEYS</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N)，其中N为指定key中field的个数</p>
<p>HKEYS命令用于返回指定key中所包含的field列表，如果key不存在，则返回空列表。</p>
<h4 id="HLEN"><a href="#HLEN" class="headerlink" title="HLEN"></a>HLEN</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(1)</p>
<p>返回指定的key所包含的field的个数。如果key不存在，则返回0。</p>
<h4 id="HMGET"><a href="#HMGET" class="headerlink" title="HMGET"></a>HMGET</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N)：N是请求的field的个数</p>
<p>返回指定key中指定的一个或多个field的值。如果field不存在，则返回nil，如果key不存在，同样会返回field数量的nil。因为不存在的key被作为空的hash处理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMGET myhash field1 field2 no-exist</span><br><span class="line">1) <span class="string">"1"</span></span><br><span class="line">2) <span class="string">"2"</span></span><br><span class="line">3) (nil)</span><br><span class="line">127.0.0.1:6379&gt; HMGET no-exist field1 field2</span><br><span class="line">1) (nil)</span><br><span class="line">2) (nil)</span><br></pre></td></tr></table></figure>
<h4 id="HMSET"><a href="#HMSET" class="headerlink" title="HMSET"></a>HMSET</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N)：N是需要设置的field的个数</p>
<p>为指定的key设置一个或多个field。如果field已经存在，则会被覆盖。如果指定的key不存在，则会创建一个新的hash。</p>
<h4 id="HSCAN"><a href="#HSCAN" class="headerlink" title="HSCAN"></a>HSCAN</h4><p>最早可用版本：2.8.0</p>
<p>时间复杂度：每次请求的时间复杂度为O(1)，完成整个迭代的时间复杂度为O(N)</p>
<p>该命令与SCAN命令相似，可以参考我的另外一篇文章<a href="https://jackeyzhe.github.io/2018/09/22/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AKeys/#SCAN">Redis命令详解：Keys</a>中对SCAN用法的介绍，如果你想要有更深入了了解，可以看我的另外一篇文章<a href="https://jackeyzhe.github.io/2018/09/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis%E7%9A%84scan%E5%91%BD%E4%BB%A4/">深入理解Redis的scan命令</a>。</p>
<h4 id="HSET"><a href="#HSET" class="headerlink" title="HSET"></a>HSET</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(1)</p>
<p>为指定的key中的field设置value，如果key不存在，则会创建一个新的hash，如果field已经存在，则会覆盖旧值。如果是新增的field，设置完成后会返回1，如果是更新已有的field，设置完成后会返回0。</p>
<h4 id="HSETNX"><a href="#HSETNX" class="headerlink" title="HSETNX"></a>HSETNX</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(1)</p>
<p>同样是为指定的key中的field设置value，与HSET命令不同的是，如果field已经存在，则不会有任何操作，直接返回0。</p>
<h4 id="HSTRLEN"><a href="#HSTRLEN" class="headerlink" title="HSTRLEN"></a>HSTRLEN</h4><p>最早可用版本：3.2.0</p>
<p>时间复杂度：O(1)</p>
<p>返回指定key中field对应value的字符串长度，如果key或field不存在，返回0。</p>
<h4 id="HVALS"><a href="#HVALS" class="headerlink" title="HVALS"></a>HVALS</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N)，N为hash的size</p>
<p>返回指定key的hash的所有value。如果key不存在，则会返回空列表。</p>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Lists</title>
    <url>/2018/11/23/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ALists/</url>
    <content><![CDATA[<p>List是Redis的基础数据类型之一，类似于Java中的LinkedList。一个列表最多包含2<sup>32</sup>个元素，常被用作模拟队列操作，接下来我们具体介绍一下List相关的命令。<a id="more"></a></p>
<h4 id="BLPOP"><a href="#BLPOP" class="headerlink" title="BLPOP"></a>BLPOP</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BLPOP key [key ...] timeout</span><br></pre></td></tr></table></figure>
<p>BLPOP是LPOP的阻塞版本，当列表没有元素可以被弹出时，连接将被阻塞。当给定多个key，会按参数key的顺序检查各个列表，弹出第一个非空列表的的头元素。timeout表示阻塞的最大秒数，timeout为0表示无限阻塞。</p>
<p>这里有一个问题，当多个元素同时push进一个list时，阻塞的BLPOP命令会有什么操作。在说明之前，我们先思考一下如何操作才会出现这样的情况：</p>
<ul>
<li>对list执行LPUSH mylist a b c这样的命令</li>
<li>对同一个list进行多次push操作，这些操作是在事务中执行的</li>
<li>使用Redis2.6以后的版本执行Lua脚本进行push操作</li>
</ul>
<p>对于这个问题，Redis2.4版本和Redis2.6以后的版本处理方法有所不同。</p>
<p>假如客户端A执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BLPOP mylist 0</span><br></pre></td></tr></table></figure>
<p>这时mylist为空，客户端A会被阻塞，此时客户端B执行了命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LPUSH mylist a b c</span><br></pre></td></tr></table></figure>
<p>如果在Redis2.6版本之后，客户端A会返回c，因为在客户端Bpush了元素a、b、c后，其从左到右的顺序是c、b、a，但是在Redis2.4版本中，客户端会在push操作的上下文，所以当LPUSH开始往list里push第一个元素时，它就被传送到客户端A，也就是客户端A会接收到a。</p>
<p>有时，我们会有这样的需求：我们需要为了等待Set的新元素而阻塞队列，这样就需要一个阻塞版的SPOP，可惜目前还没有支持这样的命令。不过我们可以使用BLPOP命令来实现，下面是实现的伪代码：</p>
<p>消费者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LOOP forever</span><br><span class="line">    WHILE SPOP(key) returns elements</span><br><span class="line">        ... process elements ...</span><br><span class="line">    END</span><br><span class="line">    BRPOP helper_key</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>生产者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MULTI</span><br><span class="line">SADD key element</span><br><span class="line">LPUSH helper_key x</span><br><span class="line">EXEC</span><br></pre></td></tr></table></figure>
<h4 id="BRPOP"><a href="#BRPOP" class="headerlink" title="BRPOP"></a>BRPOP</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(1)</p>
<p>它与BLPOP基本相同，不同的地方在于它是从尾部弹出元素，而BLPOP是从头部弹出元素。</p>
<h4 id="BRPOPLPUSH"><a href="#BRPOPLPUSH" class="headerlink" title="BRPOPLPUSH"></a>BRPOPLPUSH</h4><p>最早可用版本：2.2.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BRPOPLPUSH <span class="built_in">source</span> destination timeout</span><br></pre></td></tr></table></figure>
<p>它是RPOPLPUSH的阻塞版本，当source包含元素时，它与RPOPLPUSH表现的一样，当source为空时，Redis会被阻塞，直到另一个客户端push元素，或者达到timeout时间限制。</p>
<h4 id="LINDEX"><a href="#LINDEX" class="headerlink" title="LINDEX"></a>LINDEX</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N)，N是找到目标元素所跨越元素的个数，当目标元素为第一个或者最后一个时，时间复杂度为O(1)。</p>
<p>该命令用于返回列表中指定位置的元素，index是从0开始的，-1表示倒数第一个元素，-2表示倒数第二个元素，以此类推。当key不是一个list时，会返回一个错误。当index超出范围时返回nil。</p>
<h4 id="LINSERT"><a href="#LINSERT" class="headerlink" title="LINSERT"></a>LINSERT</h4><p>最早可用版本：2.2.0</p>
<p>时间复杂度：O(N)，N为在找到基准value前所跨越的元素个数。也就是说，如果插入到头部，时间复杂度为O(1)，如果插入到尾部，时间复杂度为O(N)。</p>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LINSERT key BEFORE|AFTER pivot value</span><br></pre></td></tr></table></figure>
<p>该命令把value插入到基准值pivot的前面或者后面，如果key不存在，list被当做空列表，不会发生任何操作。如果key存储的不是list，则会报错。命令的返回值是，插入操作后，list的长度，如果找不到基准值pivot，则会返回-1。</p>
<h4 id="LLEN"><a href="#LLEN" class="headerlink" title="LLEN"></a>LLEN</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>返回指定key的list的长度，如果key不存在，则被看作是空列表，返回0。如果key存储的不是list，则会报错。</p>
<h4 id="LPOP"><a href="#LPOP" class="headerlink" title="LPOP"></a>LPOP</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>该命令用于删除并返回list的第一个元素。当key不存在时，返回nil。</p>
<h4 id="LPUSH"><a href="#LPUSH" class="headerlink" title="LPUSH"></a>LPUSH</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>将所有指定的value插入列表的头部，如果key不存在，就先创建一个空列表并进行插入操作，如果key存储的不是list，则会返回一个错误。我们可以一次插入多个元素，他们从左到右依次被插入到list中，因此，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LPUSH mylist a b c</span><br></pre></td></tr></table></figure>
<p> 命令生成的列表，c是第一个元素，a是第三个元素。该命令的返回值是插入操作后列表的长度。需要注意的一点是：在Redis2.4版本以前（不包括2.4）是不支持一次插入多个元素的。</p>
<h4 id="LPUSHX"><a href="#LPUSHX" class="headerlink" title="LPUSHX"></a>LPUSHX</h4><p>最早可用版本：2.2.0</p>
<p>时间复杂度：O(1)</p>
<p>当key存在时，在头部插入指定元素，key不存在时，不进行插入操作。</p>
<h4 id="LRANGE"><a href="#LRANGE" class="headerlink" title="LRANGE"></a>LRANGE</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(S+N)，S是start元素的偏移量，N是指定范围元素的个数</p>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LRANGE key start stop</span><br></pre></td></tr></table></figure>
<p>返回指定key的指定范围的元素，start和stop都是下标（从0开始），同样，下标可以是负数，-1表示倒数第一个，-2表示倒数第二个。命令返回的结果会包含下标为stop的元素。如果start超出list的长度返回，则会返回一个空的列表，如果stop超出list的长度返回，则会返回到最后一个元素。</p>
<h4 id="LREM"><a href="#LREM" class="headerlink" title="LREM"></a>LREM</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LREM key count value</span><br></pre></td></tr></table></figure>
<p>移除list中前count次出现的value</p>
<ul>
<li>count&gt;0时：从头到尾匹配value</li>
<li>count=0时：移除全部匹配到value的元素</li>
<li>count&lt;0时，从尾部到头部匹配value</li>
</ul>
<p>当key不存在时，被当做空列表看待，直接返回0。</p>
<h4 id="LSET"><a href="#LSET" class="headerlink" title="LSET"></a>LSET</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N)，N为list的长度</p>
<p>设置指定下标的value，如果下标超出范围，则会返回一个错误。</p>
<h4 id="LTRIM"><a href="#LTRIM" class="headerlink" title="LTRIM"></a>LTRIM</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N)，N删除掉的元素的个数</p>
<p>该命令用来修剪一个已经存在的list，修剪后的list只包含指定范围的元素。start和stop都是从0开始的索引，例如，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LTRIM foobar 0 2</span><br></pre></td></tr></table></figure>
<p>就是只保留foobar的前3个元素。start和stop也可以是负数，-1表示倒数第一个元素，-2表示倒数第二个，以此类推。如果下标超出范围，并不会报错，而是进行如下处理：如果start比list的最后一个元素的下标大，或者start&gt;end，结果就是空list，如果end大于最大下标，Redis会将其当成最后一个元素来处理。</p>
<h4 id="RPOP"><a href="#RPOP" class="headerlink" title="RPOP"></a>RPOP</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>删除并返回list的最后一个元素。当key不存在时，返回nil。</p>
<h4 id="RPOPLPUSH"><a href="#RPOPLPUSH" class="headerlink" title="RPOPLPUSH"></a>RPOPLPUSH</h4><p>最早可用版本：1.2.0</p>
<p>时间复杂度：O(1)</p>
<p>原子性的返回并删除source的最后一个元素，并把该元素存储到destination的第一个元素的位置。举个栗子，source保存了元素a、b、c，destination保存了x、y、z，执行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RPOPLPUSH <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure>
<p>后，source保存的会是a、b，而destination保存的则是c、x、y、z。该命令的返回值是那个从source被移出和存入destination的元素。</p>
<h4 id="RPUSH"><a href="#RPUSH" class="headerlink" title="RPUSH"></a>RPUSH</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>将指定元素插入到指定key的尾部。如果key不存在，就创建一个空的列表。如果key保存的不是list，则会返回一个错误。在2.4版本之后，可以使用一条命令一次插入多个值，插入的顺序是从左到右。</p>
<h4 id="RPUSHX"><a href="#RPUSHX" class="headerlink" title="RPUSHX"></a>RPUSHX</h4><p>最早可用版本：2.2.0</p>
<p>时间复杂度：O(1)</p>
<p>它和RPUSH唯一不同的一点就是如果key不存在，就不会进行任何操作。</p>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Pub/Sub</title>
    <url>/2019/08/28/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9APub-Sub/</url>
    <content><![CDATA[<p>Redis发布订阅模式相关命令。<a id="more"></a></p>
<h4 id="PSUBSCRIBE"><a href="#PSUBSCRIBE" class="headerlink" title="PSUBSCRIBE"></a>PSUBSCRIBE</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N)，N是已订阅的客户端数。</p>
<p>订阅给定规则的客户端，支持的形式包括：</p>
<ul>
<li>h?llo 订阅hello,hallo和hxllo等</li>
<li>h*llo 订阅hllo和heeeello等</li>
<li>h[ae] 订阅hello和hallo，但不订阅hillo</li>
</ul>
<p>如果要逐字匹配，要使用\来转义特殊字符。</p>
<h4 id="PUBLISH"><a href="#PUBLISH" class="headerlink" title="PUBLISH"></a>PUBLISH</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N+M)，N是已订阅的客户端数，M是订阅总数</p>
<p>发布消息到指定频道。</p>
<h4 id="PUBSUB"><a href="#PUBSUB" class="headerlink" title="PUBSUB"></a>PUBSUB</h4><p>最早可用版本：2.8.0</p>
<p>时间复杂度：O(N)，N是活跃的频道数</p>
<p>该命令用于检查Pub/Sub子系统的状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PUBSUB CHANNELS [pattern]</span><br></pre></td></tr></table></figure>
<p>列出当前活跃的频道（至少有一个订阅者）。不过不指定pattern，则列出全部频道。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PUBSUB NUMSUB [channel-1 ... channel-N]</span><br></pre></td></tr></table></figure>
<p>返回指定频道的订阅者。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PUBSUB NUMPAT</span><br></pre></td></tr></table></figure>
<p>返回指定模式的订阅数（使用PSUBSCRIBE命令执行）</p>
<h4 id="PUNSUBSCRIBE"><a href="#PUNSUBSCRIBE" class="headerlink" title="PUNSUBSCRIBE"></a>PUNSUBSCRIBE</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N+M)，N是匹配规则的客户端已经订阅的数量，M是系统中匹配规则的订阅总数 </p>
<p>用法：PUNSUBSCRIBE [pattern [pattern …]]</p>
<p>退订所有匹配规则的频道，如果没有指定规则，则退订所有的频道。</p>
<h4 id="SUBSCRIBE"><a href="#SUBSCRIBE" class="headerlink" title="SUBSCRIBE"></a>SUBSCRIBE</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N)，N是订阅频道的数量</p>
<p>给客户端订阅指定的频道。</p>
<h4 id="UNSUBSCRIBE"><a href="#UNSUBSCRIBE" class="headerlink" title="UNSUBSCRIBE"></a>UNSUBSCRIBE</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N)，N是订阅频道的数量</p>
<p>给客户端退订指定的频道。如果不指定频道，则退订全部。</p>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Geo</title>
    <url>/2019/09/06/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AGeo/</url>
    <content><![CDATA[<p>Redis Geo相关命令。<a id="more"></a></p>
<h4 id="GEOADD"><a href="#GEOADD" class="headerlink" title="GEOADD"></a>GEOADD</h4><p>最早可用版本：3.2.0</p>
<p>时间复杂度：O(log(N))，N是Sorted set元素数量</p>
<p>用法：GEOADDkey longitude latitude member [longitude latitude member …]</p>
<p>将指定的地理空间位置（纬度、经度、名称）添加到指定key中。这些数据将存储到sorted set，这样为了方便使用GEORADIUS或GEORADIUSBYMEMBER命令。</p>
<p>该命令采用标准格式参数x,y，所以经度必须在纬度之前。输入的坐标有如下限制：</p>
<ul>
<li>有效的经度从-180度到180度</li>
<li>有效的纬度从-85.05112878度到85.05112878度</li>
</ul>
<p>当坐标位置超出上述指定范围时，该命令返回一个错误。</p>
<h4 id="GEODIST"><a href="#GEODIST" class="headerlink" title="GEODIST"></a>GEODIST</h4><p>最早可用版本：3.2.0</p>
<p>时间复杂度：O(log(N))</p>
<p>用法：GEODIST key member1 member2 [unit]</p>
<p>返回两个给定位置之间的距离。</p>
<p>如果两个位置之间的其中一个不存在，那么命令返回空值。</p>
<p>指定单位的参数unit必须是以下其中一个：</p>
<ul>
<li>m表示单位为米</li>
<li>km表示单位为千米</li>
<li>mi表示单位为英里</li>
<li>ft表示单位为英尺</li>
</ul>
<p>如果用户没有显示指定单位参数，默认使用米作为单位。</p>
<p>GEODIST命令在计算距离时会假设地球为完美球形，极限情况下，这一假设最大会造成0.5%的误差。</p>
<h4 id="GEOHASH"><a href="#GEOHASH" class="headerlink" title="GEOHASH"></a>GEOHASH</h4><p>最早可用版本：3.2.0</p>
<p>时间复杂度：O(log(N))</p>
<p>返回一个或多个元素位置的Geohash表示。</p>
<p>用法：GEOHASH key member [member …]</p>
<p>返回一个或多个位置元素的Geohash表示。</p>
<p>通常，Redis使用Geohash技术的变体表示元素的位置，位置使用52位整数进行编码。由于编码和解码过程的初始最大和最小坐标不同，所以编码也不是标准的编码方式。</p>
<p>该命令返回11个字符的Geohash字符串，和内部的52位表示方法相比没有精度的损失。返回的Geohash有以下属性：</p>
<ol>
<li>它可以移除右边的字符以缩短长度，这只会导致精度的损失，但仍指向同一区域</li>
<li>它可以在heohash.org网站使用，地址是<a href="http://geohash.org/" target="_blank" rel="noopener">http://geohash.org/</a><geohash-string></geohash-string></li>
<li>前缀相似的字符串指向的位置离得很近，但这不代表前缀不同的字符串就离得很远</li>
</ol>
<h4 id="GEOPOS"><a href="#GEOPOS" class="headerlink" title="GEOPOS"></a>GEOPOS</h4><p>最早可用版本：3.2.0</p>
<p>时间复杂度：O(log(N))</p>
<p>用法：GEOPOS key member [member …]</p>
<p>返回指定key中的指定位置信息。</p>
<h4 id="GEORADIUS"><a href="#GEORADIUS" class="headerlink" title="GEORADIUS"></a>GEORADIUS</h4><p>最早可用版本：3.2.0</p>
<p>时间复杂度：O(N+log(M))，N是半径区域内元素数量，M是指定key中元素数量</p>
<p>用法：GEORADIUS key longitude latitude radiusm|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH][COUNT count] [ASC|DESC] [STORE key][STOREDIST key]</p>
<p>以给定经纬度为中心，返回键包含的位置元素与中心距离不超过最大距离的所有位置元素。</p>
<p>命令额外选项：</p>
<ul>
<li>WITHDIST：在返回位置元素的同时，将位置元素与中心的距离也一并返回，单位与用户给定距离的单位一直</li>
<li>WITHCOORD：将位置元素的经度和纬度也一并返回</li>
<li>WITHHASH：以52位有符号整数的形式，返回位置元素经过原始geohash编码的有序集合分值。这个选项主要用于底层应用或调试。</li>
</ul>
<p>命令默认返回结果未排序，可以指定ASC或DESC按距离排序。</p>
<p>COUNT表示指定返回元素的数量，如果不指定则返回全部符合的元素。</p>
<p>当GEORADIUS和GEORADIUSBYMEMBER命令有了STORE和STOREDIST参数时，这两命令被标记成了写命令。在集群中，如果设置了READONLY，它们将被重定向到主节点，即使它们没有做写操作。但为了解决这个问题，在Redis4.0引入了这两个命令的变种，分别是GEORADIUS_RO和GEORADIUSBYMEMBER_RO。</p>
<h4 id="GEORADIUSBYMEMBER"><a href="#GEORADIUSBYMEMBER" class="headerlink" title="GEORADIUSBYMEMBER"></a>GEORADIUSBYMEMBER</h4><p>最早可用版本：3.2.0</p>
<p>时间复杂度：O(N+log(M))，N是半径区域内元素数量，M是指定key中元素数量</p>
<p>用法：GEORADIUSBYMEMBER key member radiusm|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH][COUNT count] [ASC|DESC] [STORE key][STOREDIST key]</p>
<p>这个命令和GEORADIUS命令一样，都可以找出位置范围内的元素，但指定中心点的方式不同，该命令直接指定key中的元素作为中心，而不像GEORADIUS一样指定经纬度。</p>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Keys</title>
    <url>/2018/09/22/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AKeys/</url>
    <content><![CDATA[<p>介绍完Redis连接相关命令后，再来介绍一下与Key相关的命令，Redis作为一个key-value数据库，对Key进行操作是无法避免的。<a id="more"></a></p>
<h4 id="DEL"><a href="#DEL" class="headerlink" title="DEL"></a>DEL</h4><p>最早可用版本1.0.0</p>
<p>删除指定的键值对，如果指定的key不存在，则忽略。DEL命令的时间复杂度是O(N)，对于除字符串外的其他数据类型，命令的时间复杂度为O(M)，M是值的元素的个数。所以，在生产环境尽量避免一次性删除过多复杂数据类型的操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET key1 <span class="string">"jackey"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET key2 <span class="string">"zhe"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DEL key1 key2 key3</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure>
<h4 id="DUMP"><a href="#DUMP" class="headerlink" title="DUMP"></a>DUMP</h4><p>最早可用版本2.6.0</p>
<p>使用一种Redis的格式序列化指定键存储的值。可用使用RESTORE命令将这个值反序列化。</p>
<p>这种序列化格式有以下3个特点：</p>
<ul>
<li>它包含有64位的校验和，用于错误检查，RESTORE命令在反序列化之前会先检查校验和</li>
<li>值的编码格式和RDB文件的编码格式相同</li>
<li>RDB的版本会被序列化到值中，因此，不同版本的Redis可能会因为不兼容RDB版本而拒绝反序列化</li>
</ul>
<p>序列化的值不包含过期时间的相关信息，可以使用PTTL命令获取当前值的存活时间。如果值不存在则会返回nil</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET key1 <span class="string">"jackey"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DUMP key1</span><br><span class="line"><span class="string">"\x00\x06jackey\b\x00\xec\x89'G'X\xfc:"</span></span><br><span class="line">127.0.0.1:6379&gt; DUMP not-exist-key</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<p>DUMP时间复杂度分为两部分：访问key值的时间复杂度为O(1)，而序列化值的时间复杂度为O(N*M)，N是组成值的元素的数量，M是元素的平均大小。如果序列化比较短的字符串，则该命令的时间复杂度可以看做O(1)。</p>
<h4 id="EXISTS"><a href="#EXISTS" class="headerlink" title="EXISTS"></a>EXISTS</h4><p>最早可用版本1.0.0</p>
<p>用于判断key是否存在。3.0.3版本以后支持多参数，即可以一次性判断多个key，返回值是存在的key的数量。对于判断单个key是否存在，会返回1或者0，因此，该命令是向后兼容的。</p>
<p>需要注意的是：如果参数中有重复的存在命令，则返回结果不会去重。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET key1 <span class="string">"jackey"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET key2 <span class="string">"zhe"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXISTS key1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS not-exist-key</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; EXISTS key1 key2 not-exist-key</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; EXISTS key1 key1 key1</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>
<h4 id="EXPIRE"><a href="#EXPIRE" class="headerlink" title="EXPIRE"></a>EXPIRE</h4><p>最早可用版本1.0.0</p>
<p>为指定的key设置存活时间。存活时间会被DEL，SET，GETSET和所有的STORE命令删除或者覆盖。如果我们只修改key的值而不修改存活时间或者保存到一个新的key中，则原来的key的存活时间保持不变。如果使用RENAME对一个key重命名，那么原有key的存活时间会赋给新的key。</p>
<p>如果想要清除存活时间，使指定的key成为一个永久的key，则可以使用PERSIST命令，我们稍后会详细介绍这个命令。</p>
<p>如果使用EXPIRE/PEXPIRE为某个key设置的存活时间为非正数，或者使用EXPIREAT/PEXPIREAT设置了一个过去的时间，则这个key会直接被删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EXPIRE key1 -1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS key1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<p>对一个已经有存活时间的key再次使用EXPIRE设置存活时间，则将key的存活时间更新，在许多应用中我们都会用到这一点。</p>
<p>注意：在Redis的2.1.3版本之前，如果修改一个带有存活时间的key的值，则会删除整个key。</p>
<p>关于时间精度，Redis2.4版本中，一个key过期的一秒内仍可以访问，而到了2.6版本，这一时间已经被精确到了1毫秒。因为从2.6版本开始，存活时间保存的是绝对时间（Unix的时间戳），而这就意味着，你的计算机的时间需要保证可靠，如果你将RDB文件放到另一台机器上加载，当这两台机器的时间差距较大时，你就会发现可能有些key被删除了或者有些key的存活时间被延长了。</p>
<p>下面我们在来讨论一下Redis究竟是如何使key过期的，Redis的过期策略有两种：一种是被动的，一种是主动的。</p>
<p>被动过期就是当客户端访问某个key，服务端会去检查这个key的存活时间，判断是否过期。当然，这种过期策略存在一定的问题，如果某个key一直都不访问，就不会被发现它过期了，那么它将永远“苟活”在内存中。所以Redis会定期随机的查看被设置过存活时间的key，看它们是否过期，如果过期了，就会及时清理掉。Redis每秒会做10次下面的操作：</p>
<ol>
<li>随机查看20个设置过存活时间的key（从设置存活时间的set中取）</li>
<li>删除所有过期的key</li>
<li>如果过期的key超过25%，那么会从第一步开始再执行一次</li>
</ol>
<h4 id="EXPIREAT"><a href="#EXPIREAT" class="headerlink" title="EXPIREAT"></a>EXPIREAT</h4><p>最早可用版本1.2.0</p>
<p>此命令和EXPIRE的作用相同，不同之处是它的参数需要传Unix时间戳（即从1970年1月1日起的毫秒数）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET key2</span><br><span class="line"><span class="string">"zhe"</span></span><br><span class="line">127.0.0.1:6379&gt; EXPIREAT key2 1537733374</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; TTL key2</span><br><span class="line">(<span class="built_in">integer</span>) 12960</span><br></pre></td></tr></table></figure>
<h4 id="KEYS"><a href="#KEYS" class="headerlink" title="KEYS"></a>KEYS</h4><p>最早可用版本1.0.0</p>
<p>这个命令会返回匹配到的所有key，时间复杂度为O(N)。在官方文档中说，在入门级的笔记本电脑上，Redis扫描100万条key只需要40毫秒，但是我们仍然要避免在生产环境使用这个命令。特别是千万不要使用KEYS *这样的命令，因为你不知道生产环境存在多少key，这样的命令有可能使你的生产环境的Redis陷入很长一段时间的不可用状态。所以，请马上删除应用层代码中的KEYS命令或者抓紧时间更新自己的简历。</p>
<p>如果需要查找key，可以使用SCAN命令或者sets命令。</p>
<p>虽然我们非常不建议使用KEYS命令，但是它的匹配策略还是要介绍一下的：</p>
<p>？是单个字符的通配符，*是任意个数的通配符，[ae]会匹配到a或e，^e表示不匹配e，a-c表示匹配a或b或c，特殊符号使用\隔开。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSET key1hello jackey key2hello zhe age 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; KEYS key?hello</span><br><span class="line">1) <span class="string">"key1hello"</span></span><br><span class="line">2) <span class="string">"key2hello"</span></span><br><span class="line">127.0.0.1:6379&gt; KEYS k*</span><br><span class="line">1) <span class="string">"key1hello"</span></span><br><span class="line">2) <span class="string">"key2hello"</span></span><br><span class="line">127.0.0.1:6379&gt; KEYS *age*</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">2) <span class="string">"key1hello"</span></span><br><span class="line">3) <span class="string">"key2hello"</span></span><br></pre></td></tr></table></figure>
<h4 id="MIGRATE"><a href="#MIGRATE" class="headerlink" title="MIGRATE"></a>MIGRATE</h4><p>最早可用版本2.6.0</p>
<p>这个命令用来将源实例的key以原子操作传输到目标实例，然后将源实例的key删除。相当于在源实例执行了DUMP+DEL操作，在目标实例执行了RESTORE操作。这一操作会阻塞进行传输的两个实例，在传输过程中，key总会存在于一个实例中，除非发生超时错误。在3.2版本以后，MIGRATE可以将多个key作为管线一次性传输。</p>
<p>在执行MIGRATE命令时，必须要设置一个超时时间，如果到了超时时间命令仍未执行完，则会抛出一个IOERR。但返回这个错误时，两个实例的状态可能有两种：要么两个实例都存在指定的key，要么只有源实例存在指定的key。总之，key是不会丢失的。</p>
<p>从3.0.6版本开始，MIGRATE支持一次传输多个key，为了保证不过载或者出现环形操作，MIGRATE需要使用KEYS参数，而原来指定的key的参数要被设置为空字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MIGRATE 192.168.1.34 6379 <span class="string">""</span> 0 5000 KEYS key1 key2 key3</span><br></pre></td></tr></table></figure>
<p>这里还有两个选填参数需要介绍：一个是COPY，加上这个参数的话，传输完成后不会删除源实例中的key。另一个是REPLACE，这个参数的作用是替换目标实例已存在的key。这两个参数在3.0版本以后才可以使用。</p>
<h4 id="MOVE"><a href="#MOVE" class="headerlink" title="MOVE"></a>MOVE</h4><p>最早可用版本1.0.0</p>
<p>不知道大家还记不记得前文中我们提到过的SELECT命令，SELECT用来切换数据库。使用MOVE命令就是将当前数据库的key移动到指定的数据库中，如果指定库中已经存在这个key或者当前库不存在这个key，那么这个命令什么也不做。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">2) <span class="string">"key1hello"</span></span><br><span class="line">3) <span class="string">"key2hello"</span></span><br><span class="line">127.0.0.1:6379&gt; MOVE age 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">"key1hello"</span></span><br><span class="line">2) <span class="string">"key2hello"</span></span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; KEYS *</span><br><span class="line">1) <span class="string">"age"</span></span><br></pre></td></tr></table></figure>
<h4 id="OBJECT"><a href="#OBJECT" class="headerlink" title="OBJECT"></a>OBJECT</h4><p>最早可用版本2.2.3</p>
<p>OBJECT用来查看Redis对象内部的相关信息。这一命令在调试时经常被使用。下面我们来介绍OBJECT命令的具体用法：</p>
<ul>
<li>OBJECT REFCOUNT key：返回指定key的值的引用数量</li>
<li>OBJECT ENCODING key：返回指定key的内部存储使用的编码格式</li>
<li>OBJECT IDLETIME key：返回指定key的空闲时间（有多长时间没有被读写），目前最小精度为10秒，这一命令经常在Redis淘汰机制中使用（淘汰策略为LRU或noeviction）</li>
<li>OBJECT FREQ key：返回指定key访问频率的对数，当淘汰策略为LFU时，这一命令会被用到</li>
<li>OBJECT HELP：返回帮助信息</li>
</ul>
<p>对象的编码格式也有很多种：</p>
<ul>
<li>Strings会被编码为raw或int</li>
<li>Lists会被编码为ziplist或linkedlist</li>
<li>Sets会被编码为intset或hashtable</li>
<li>Hashs会被编码为ziplist或hashtable</li>
<li>Sorted Sets会被编码为ziplist或skiplist</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; OBJECT REFCOUNT key1hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; OBJECT IDLETIME key2hello</span><br><span class="line">(<span class="built_in">integer</span>) 3637</span><br><span class="line">127.0.0.1:6379&gt; OBJECT ENCODING age</span><br><span class="line"><span class="string">"int"</span></span><br></pre></td></tr></table></figure>
<h4 id="PERSIST"><a href="#PERSIST" class="headerlink" title="PERSIST"></a>PERSIST</h4><p>最早可用版本2.2.0</p>
<p>删除指定key的过期时间，使之变成永久的key。</p>
<h4 id="PEXPIRE"><a href="#PEXPIRE" class="headerlink" title="PEXPIRE"></a>PEXPIRE</h4><p>最早可用版本2.6.0</p>
<p>PEXPIRE的作用和EXPIRE一样，只不过参数中的时间单位是毫秒。</p>
<h4 id="PEXPIREAT"><a href="#PEXPIREAT" class="headerlink" title="PEXPIREAT"></a>PEXPIREAT</h4><p>最早可用版本2.6.0</p>
<p>作用和EXPIREAT相同，参数同样是毫秒。</p>
<h4 id="PTTL"><a href="#PTTL" class="headerlink" title="PTTL"></a>PTTL</h4><p>最早可用版本2.6.0</p>
<p>返回指定key的剩余存活时间的毫秒数。2.8以后的版本返回值有些变化，如果key不存在，则返回-2；如果key是永久的，则返回-1。</p>
<h4 id="RANDOMKEY"><a href="#RANDOMKEY" class="headerlink" title="RANDOMKEY"></a>RANDOMKEY</h4><p>最早可用版本1.0.0</p>
<p>此命令用于从当前数据库返回一个随机的key。</p>
<h4 id="RENAME"><a href="#RENAME" class="headerlink" title="RENAME"></a>RENAME</h4><p>最早可用版本1.0.0</p>
<p>重命名一个key。如果key不存在，则会返回错误。而如果新的key已经存在，则此命令会覆盖原来的key（它其实是执行了一个隐式的DEL命令，因此如果原来的key存储的对象很大的话， 删除操作延时会很高）。在3.2版本以前，如果源key和目标key相同的话，会报错。</p>
<h4 id="RENAMENX"><a href="#RENAMENX" class="headerlink" title="RENAMENX"></a>RENAMENX</h4><p>如果新的key不存在的话，重命名key，如果存在的话返回0，成功返回1。</p>
<h4 id="RESTORE"><a href="#RESTORE" class="headerlink" title="RESTORE"></a>RESTORE</h4><p>最早可用版本2.6.0</p>
<p>用法：RESTORE key ttl serialized-value [REPLACE]</p>
<p>此命令是将一组数据反序列化，并存到key。如果ttl是0，则key是永久的。在Redis3.0版本以后，如果不使用REPLACE参数并且key已经存在，则会返回一个错误“Target key name is busy”。</p>
<h4 id="SCAN"><a href="#SCAN" class="headerlink" title="SCAN"></a>SCAN</h4><p>最早可用版本2.8.0</p>
<p>用法：SCAN cursor MATCH pattern COUNT count</p>
<p>其中cursor为游标，MATCH和COUNT为可选参数。</p>
<p>SCAN命令和SSCAN、HSCAN、ZSCAN命令都用于增量的迭代元素集，它每次返回小部分数据，不会像KEYS那样阻塞Redis。SCAN命令是基于游标的，每次调用后，都会返回一个游标，用于下一次迭代。当游标返回0时，表示迭代结束。</p>
<p>SCAN每次返回的数量并不固定，也有可能返回数据为空。另外，SCAN命令和KEYS命令一样支持匹配。</p>
<p>我们在Redis里存入10000个key用于测试。</p>
<p>结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scan 0 match key24* count 1000</span><br><span class="line">1) <span class="string">"1688"</span></span><br><span class="line">2) 1) <span class="string">"key2411"</span></span><br><span class="line">   2) <span class="string">"key2475"</span></span><br><span class="line">   3) <span class="string">"key2494"</span></span><br><span class="line">   4) <span class="string">"key2406"</span></span><br><span class="line">   5) <span class="string">"key2478"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 1688 match key24* count 1000</span><br><span class="line">1) <span class="string">"2444"</span></span><br><span class="line">2)  1) <span class="string">"key2458"</span></span><br><span class="line">    2) <span class="string">"key249"</span></span><br><span class="line">    3) <span class="string">"key2407"</span></span><br><span class="line">    4) <span class="string">"key2434"</span></span><br><span class="line">    5) <span class="string">"key241"</span></span><br><span class="line">    6) <span class="string">"key2497"</span></span><br><span class="line">    7) <span class="string">"key2435"</span></span><br><span class="line">    8) <span class="string">"key2413"</span></span><br><span class="line">    9) <span class="string">"key2421"</span></span><br><span class="line">   10) <span class="string">"key248"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 2444 match key24* count 1000</span><br><span class="line">1) <span class="string">"818"</span></span><br><span class="line">2)  1) <span class="string">"key2459"</span></span><br><span class="line">    2) <span class="string">"key2462"</span></span><br><span class="line">    3) <span class="string">"key2409"</span></span><br><span class="line">    4) <span class="string">"key2454"</span></span><br><span class="line">    5) <span class="string">"key2431"</span></span><br><span class="line">    6) <span class="string">"key2423"</span></span><br><span class="line">    7) <span class="string">"key2476"</span></span><br><span class="line">    8) <span class="string">"key2428"</span></span><br><span class="line">    9) <span class="string">"key2493"</span></span><br><span class="line">   10) <span class="string">"key2420"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 818 match key24* count 1000</span><br><span class="line">1) <span class="string">"9190"</span></span><br><span class="line">2)  1) <span class="string">"key2402"</span></span><br><span class="line">    2) <span class="string">"key2415"</span></span><br><span class="line">    3) <span class="string">"key2429"</span></span><br><span class="line">    4) <span class="string">"key2424"</span></span><br><span class="line">    5) <span class="string">"key2425"</span></span><br><span class="line">    6) <span class="string">"key2400"</span></span><br><span class="line">    7) <span class="string">"key2472"</span></span><br><span class="line">    8) <span class="string">"key2479"</span></span><br><span class="line">    9) <span class="string">"key2448"</span></span><br><span class="line">   10) <span class="string">"key245"</span></span><br><span class="line">   11) <span class="string">"key2487"</span></span><br><span class="line">   12) <span class="string">"key2430"</span></span><br><span class="line">   13) <span class="string">"key2405"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 9190 match key24* count 1000</span><br><span class="line">1) <span class="string">"12161"</span></span><br><span class="line">2)  1) <span class="string">"key2488"</span></span><br><span class="line">    2) <span class="string">"key2437"</span></span><br><span class="line">    3) <span class="string">"key2404"</span></span><br><span class="line">    4) <span class="string">"key2440"</span></span><br><span class="line">    5) <span class="string">"key2461"</span></span><br><span class="line">    6) <span class="string">"key2416"</span></span><br><span class="line">    7) <span class="string">"key2436"</span></span><br><span class="line">    8) <span class="string">"key2403"</span></span><br><span class="line">    9) <span class="string">"key2460"</span></span><br><span class="line">   10) <span class="string">"key2452"</span></span><br><span class="line">   11) <span class="string">"key2449"</span></span><br><span class="line">   12) <span class="string">"key2482"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 12161 match key24* count 1000</span><br><span class="line">1) <span class="string">"11993"</span></span><br><span class="line">2)  1) <span class="string">"key2483"</span></span><br><span class="line">    2) <span class="string">"key2491"</span></span><br><span class="line">    3) <span class="string">"key242"</span></span><br><span class="line">    4) <span class="string">"key2466"</span></span><br><span class="line">    5) <span class="string">"key2446"</span></span><br><span class="line">    6) <span class="string">"key2465"</span></span><br><span class="line">    7) <span class="string">"key243"</span></span><br><span class="line">    8) <span class="string">"key2438"</span></span><br><span class="line">    9) <span class="string">"key2457"</span></span><br><span class="line">   10) <span class="string">"key246"</span></span><br><span class="line">   11) <span class="string">"key2422"</span></span><br><span class="line">   12) <span class="string">"key2418"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 11993 match key24* count 1000</span><br><span class="line">1) <span class="string">"7853"</span></span><br><span class="line">2) 1) <span class="string">"key2498"</span></span><br><span class="line">   2) <span class="string">"key2451"</span></span><br><span class="line">   3) <span class="string">"key2439"</span></span><br><span class="line">   4) <span class="string">"key2495"</span></span><br><span class="line">   5) <span class="string">"key2408"</span></span><br><span class="line">   6) <span class="string">"key2410"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 7853 match key24* count 1000</span><br><span class="line">1) <span class="string">"5875"</span></span><br><span class="line">2)  1) <span class="string">"key2486"</span></span><br><span class="line">    2) <span class="string">"key2490"</span></span><br><span class="line">    3) <span class="string">"key244"</span></span><br><span class="line">    4) <span class="string">"key2401"</span></span><br><span class="line">    5) <span class="string">"key2463"</span></span><br><span class="line">    6) <span class="string">"key2481"</span></span><br><span class="line">    7) <span class="string">"key2477"</span></span><br><span class="line">    8) <span class="string">"key2468"</span></span><br><span class="line">    9) <span class="string">"key2433"</span></span><br><span class="line">   10) <span class="string">"key2489"</span></span><br><span class="line">   11) <span class="string">"key2455"</span></span><br><span class="line">   12) <span class="string">"key2426"</span></span><br><span class="line">   13) <span class="string">"key24"</span></span><br><span class="line">   14) <span class="string">"key2450"</span></span><br><span class="line">   15) <span class="string">"key2414"</span></span><br><span class="line">   16) <span class="string">"key2442"</span></span><br><span class="line">   17) <span class="string">"key2473"</span></span><br><span class="line">   18) <span class="string">"key2467"</span></span><br><span class="line">   19) <span class="string">"key2469"</span></span><br><span class="line">   20) <span class="string">"key2456"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 5875 match key24* count 1000</span><br><span class="line">1) <span class="string">"14311"</span></span><br><span class="line">2)  1) <span class="string">"key2453"</span></span><br><span class="line">    2) <span class="string">"key2492"</span></span><br><span class="line">    3) <span class="string">"key2480"</span></span><br><span class="line">    4) <span class="string">"key2427"</span></span><br><span class="line">    5) <span class="string">"key2443"</span></span><br><span class="line">    6) <span class="string">"key2417"</span></span><br><span class="line">    7) <span class="string">"key2432"</span></span><br><span class="line">    8) <span class="string">"key240"</span></span><br><span class="line">    9) <span class="string">"key2445"</span></span><br><span class="line">   10) <span class="string">"key2484"</span></span><br><span class="line">   11) <span class="string">"key2444"</span></span><br><span class="line">   12) <span class="string">"key247"</span></span><br><span class="line">   13) <span class="string">"key2485"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 14311 match key24* count 1000</span><br><span class="line">1) <span class="string">"16383"</span></span><br><span class="line">2)  1) <span class="string">"key2441"</span></span><br><span class="line">    2) <span class="string">"key2474"</span></span><br><span class="line">    3) <span class="string">"key2447"</span></span><br><span class="line">    4) <span class="string">"key2471"</span></span><br><span class="line">    5) <span class="string">"key2470"</span></span><br><span class="line">    6) <span class="string">"key2464"</span></span><br><span class="line">    7) <span class="string">"key2412"</span></span><br><span class="line">    8) <span class="string">"key2419"</span></span><br><span class="line">    9) <span class="string">"key2499"</span></span><br><span class="line">   10) <span class="string">"key2496"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 16383 match key24* count 1000</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) (empty list or <span class="built_in">set</span>)</span><br></pre></td></tr></table></figure>
<p>可以看到虽然我们设置的count为1000，但Redis每次返回的数值只有10个左右。</p>
<h4 id="SORT"><a href="#SORT" class="headerlink" title="SORT"></a>SORT</h4><p>最早可用版本1.0.0</p>
<p>当有N个元素需要排序，并且要返回M个元素时，SORT命令的时间复杂度为O(N+M*log(M))</p>
<p>此命令用于返回或保存list，set和sorted set的键，默认将数字或者可排序的key进行排序，Redis会将其视为双精度浮点数。</p>
<p>如果想要对字符串按字典顺序排序，可以使用ALPHA参数。</p>
<p>如果想要按照外部字段进行排序，可以使用BY参数。</p>
<h4 id="TOUCH"><a href="#TOUCH" class="headerlink" title="TOUCH"></a>TOUCH</h4><p>最早可用版本3.2.1</p>
<p>修改某一个或多个key的最后访问时间，如果key不存在，则忽略。</p>
<h4 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h4><p>最早可用版本1.0.0</p>
<p>返回指定key的剩余存活时间，单位为秒。</p>
<p>在2.6版本及以前，如果key不存在或者是永久key，都会返回-1。从2.8版本开始，如果key不存在，则返回-2，如果key为永久key，则返回-1。</p>
<h4 id="TYPE"><a href="#TYPE" class="headerlink" title="TYPE"></a>TYPE</h4><p>最早可用版本1.0.0</p>
<p>返回key存储的值的类型。类型即为我们在<a href="https://jackeyzhe.github.io/2018/09/17/Redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">Redis基础数据结构</a>一文中描述的5中数据类型。</p>
<h4 id="UNLINK"><a href="#UNLINK" class="headerlink" title="UNLINK"></a>UNLINK</h4><p>最早可用版本4.0.0</p>
<p>这个命令和DEL类似，会删除指定的key。所不同的是，此命令的时间复杂度为O(1)，它先将key从keyspace中删除，此时指定的key已经删除，但是内存没有释放。所以，这个命令会在另一个线程中做释放内存的操作。这一步的操作时间复杂度为O(N)。</p>
<h4 id="WAIT"><a href="#WAIT" class="headerlink" title="WAIT"></a>WAIT</h4><p>最早可用版本3.0.0</p>
<p>这个命令会阻塞客户端，直到前面所有的写操作都完成并且保存了指定数量的副本。该命令总会返回副本数量或者超时。</p>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Sets</title>
    <url>/2018/12/19/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ASets/</url>
    <content><![CDATA[<p>Redis的Set结构相当于Java中的HashSet，是无序的元素集合，并且元素都是唯一的。由于Set是通过hash表实现的，所以它的增加、删除、查找操作的时间复杂度都是O(1)。最大成员个数为2<sup>32</sup>-1。<a id="more"></a></p>
<h4 id="SADD"><a href="#SADD" class="headerlink" title="SADD"></a>SADD</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：每个元素的添加的时间复杂度为O(1)，如果要添加N个，时间复杂度就为O(N)</p>
<p>用法：SADD key member [member…]</p>
<p>将指定的成员保存到key，如果成员已经存在，则直接忽略。如果key不存在，则先新建一个空set，再将成员添加进去。如果key存储不是一个set，则会报错。该命令执行成功后会返回实际添加成功的元素的个数。</p>
<p>在2.4版本之后可以支持多个参数，即一个命令添加多个成员。</p>
<h4 id="SCARD"><a href="#SCARD" class="headerlink" title="SCARD"></a>SCARD</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>返回key存储的set的元素个数。</p>
<h4 id="SDIFF"><a href="#SDIFF" class="headerlink" title="SDIFF"></a>SDIFF</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N)，N是所给出的元素个数的总和</p>
<p>返回第一个set与后面元素的差集。不存在的key都被当做空set处理。</p>
<p>栗子时间：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD key1 a</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD key1 b</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD key1 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD key2 b</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD key3 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD key3 d</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SDIFF key1 key2 key3</span><br><span class="line">1) <span class="string">"a"</span></span><br></pre></td></tr></table></figure>
<h4 id="SDIFFSTORE"><a href="#SDIFFSTORE" class="headerlink" title="SDIFFSTORE"></a>SDIFFSTORE</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N)，N是所给出的元素个数的总和</p>
<p>用法：SDIFFSTORE destination key [key…]</p>
<p>这个命令和SDIFF命令的作用相同，但是不同的是，该命令不返回差集，而是将差集存储到destination，如果destination已经存在，就将覆盖旧值。该命令的返回值是差集中元素的个数。</p>
<h4 id="SINTER"><a href="#SINTER" class="headerlink" title="SINTER"></a>SINTER</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N*M)，N是最小set的元素个数，M是set的个数</p>
<p>返回给出的所有set的交集。我们沿用刚刚SDIFF命令中使用的三个key，给key2增加一个元素c，此时三个key存储的元素情况为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key1=&#123;a,b,c&#125;</span><br><span class="line">key2=&#123;b,c&#125;</span><br><span class="line">key3=&#123;c,d&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD key2 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SINTER key1 key2 key3</span><br><span class="line">1) <span class="string">"c"</span></span><br></pre></td></tr></table></figure>
<h4 id="SINTERSTORE"><a href="#SINTERSTORE" class="headerlink" title="SINTERSTORE"></a>SINTERSTORE</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N*M)，N是最小set的元素个数，M是set的个数</p>
<p>该命令与SINTER的关系就像SDIFF与SDIFFSTORE的关系一样，因此我们不过多介绍了。</p>
<h4 id="SISMEMBER"><a href="#SISMEMBER" class="headerlink" title="SISMEMBER"></a>SISMEMBER</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>该命令用于判断某个元素是否属于指定的key，如果属于，返回1；如果不属于或者key不存在，返回0。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD myset <span class="string">"jackeyzhe"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset <span class="string">"jackeyzhe"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset <span class="string">"2018"</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<h4 id="SMEMBERS"><a href="#SMEMBERS" class="headerlink" title="SMEMBERS"></a>SMEMBERS</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N)，N是set的元素个数</p>
<p>返回指定set的全部成员，当SINTER只有一个参数时，作用与该命令相同。</p>
<h4 id="SMOVE"><a href="#SMOVE" class="headerlink" title="SMOVE"></a>SMOVE</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>将成员从一个set转移到另一个set中，这个操作是原子操作。如果源set不存在，或者不包含要转移的成员，那么就不会有任何操作，直接返回0。如果转移的成员在目标set中已经存在，那么只需要将该成员从源set中删除即可。如果源set或者目标set中的一个不是set结构，那么该命令就会报错。</p>
<p>如果成员被成功转移，就会返回1，如果没有进行转移操作，就会返回0。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD from_set <span class="string">"a"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD from_set <span class="string">"b"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMOVE from_set to_set <span class="string">"a"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS from_set</span><br><span class="line">1) <span class="string">"b"</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS to_set</span><br><span class="line">1) <span class="string">"a"</span></span><br></pre></td></tr></table></figure>
<h4 id="SPOP"><a href="#SPOP" class="headerlink" title="SPOP"></a>SPOP</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：SPOP key [count]</p>
<p>从指定set中删除并返回一个或多个随机元素。3.2版本以后支持count参数，即可以一次返回多个元素。如果key不存在，则返回nil。</p>
<p>如果count大于set中元素的个数，那么该命令就会返回set中现有的所有元素。</p>
<h4 id="SRANDMEMBER"><a href="#SRANDMEMBER" class="headerlink" title="SRANDMEMBER"></a>SRANDMEMBER</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：当没有count参数时是O(1)，否则为O(N)，N为count的绝对值</p>
<p>该命令用于随机返回set中的元素。从2.6版本开始支持count参数，如果count是正数，则返回count个不同元素的数组；如果count是负数，则允许同一个元素多次返回。</p>
<h4 id="SREM"><a href="#SREM" class="headerlink" title="SREM"></a>SREM</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N)，N为指定member的个数</p>
<p>该命令用于从set中删除指定元素，如果不包含该元素，那么直接忽略。如果key不存在，则会当做空set处理，直接返回0。从2.4版本开始，该命令支持一次删除多个成员。</p>
<h4 id="SSCAN"><a href="#SSCAN" class="headerlink" title="SSCAN"></a>SSCAN</h4><p>此命令是SCAN命令的同类，可以通过我的另一篇文章<a href="https://jackeyzhe.github.io/2018/09/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis%E7%9A%84scan%E5%91%BD%E4%BB%A4/">深入理解Redis的scan命令</a>来进行更深入的了解</p>
<h4 id="SUNION"><a href="#SUNION" class="headerlink" title="SUNION"></a>SUNION</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N)，N为给出的所有set的元素个数之和</p>
<p>返回给定set的并集。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMEMBERS key2</span><br><span class="line">1) <span class="string">"b"</span></span><br><span class="line">2) <span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS key3</span><br><span class="line">1) <span class="string">"d"</span></span><br><span class="line">2) <span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt; SUNION key2 key3</span><br><span class="line">1) <span class="string">"d"</span></span><br><span class="line">2) <span class="string">"b"</span></span><br><span class="line">3) <span class="string">"c"</span></span><br></pre></td></tr></table></figure>
<h4 id="SUNIONSTORE"><a href="#SUNIONSTORE" class="headerlink" title="SUNIONSTORE"></a>SUNIONSTORE</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N)，N为给出的所有set的元素个数之和</p>
<p>该命令与SUNION的关系就像SDIFF与SDIFFSTORE的关系一样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUNIONSTORE mykey key2 key3</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS mykey</span><br><span class="line">1) <span class="string">"d"</span></span><br><span class="line">2) <span class="string">"b"</span></span><br><span class="line">3) <span class="string">"c"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Sorted Sets</title>
    <url>/2019/01/06/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ASorted-Sets/</url>
    <content><![CDATA[<p>Sorted Set（也称ZSET）和Set一样也是string类型的集合，你可以将它理解为Java中SortedSet和HashMap的集合体，一方面它是一个set，保证了元素的唯一性，另一方面它给每个value赋予了一个权重score，用来进行排序。集合中成员的最大个数为2<sup>32</sup>-1个。<a id="more"></a></p>
<h4 id="BZPOPMAX"><a href="#BZPOPMAX" class="headerlink" title="BZPOPMAX"></a>BZPOPMAX</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(log(N))，N是元素个数</p>
<p>用法：BZPOPMAX key [key …] timeout</p>
<p>BZPOPMAX是ZPOPMAX的原始阻塞版。如果没有存在sorted set不能pop出元素，则连接会被阻塞。该命令会返回第一个非空的有序set的最高分的元素。</p>
<p>timeout参数是用来指定最大的阻塞时间，如果是0，则无限阻塞。</p>
<p>当没有元素被pop出，并且阻塞时间达到timeout时，返回nil。</p>
<p>如果有元素被pop出，则返回三个值：第一个是该元素来自哪个zset，第二个是pop元素的score，第三个是pop元素的value。</p>
<h4 id="BZPOPMIN"><a href="#BZPOPMIN" class="headerlink" title="BZPOPMIN"></a>BZPOPMIN</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(log(N))，N是元素个数</p>
<p>用法：BZPOPMIN key [key …] timeout</p>
<p>BZPOPMIN是ZPOPMIN的阻塞版本。它与BZPOPMAX相似，唯一不同的是它返回的是第一个非空有序set的最低分的元素。</p>
<h4 id="ZADD"><a href="#ZADD" class="headerlink" title="ZADD"></a>ZADD</h4><p>最早可用版本：1.2.0</p>
<p>时间复杂度：O(log(N))，N是元素个数</p>
<p>用法：ZADD key [NX|XX][CH][INCR]score member [score member …]</p>
<p>将所有指定的成员和它的score加入zset，如果要插入的成员已经存在，则会更新该成员的分数，并将它排到正确的位置。如果key不存在，则创建一个新的zset并且插入成员。如果key存在，但不是zset类型，就会报错。score是双精度的浮点数，+inf和-inf同样有效。</p>
<p>在Redis3.2版本之后，ZADD命令支持了以下参数：</p>
<ul>
<li>XX：只更新已有的成员，不新增</li>
<li>NX：只新增成员，不更新</li>
<li>CH：将返回值从新增成员数修改为发生变化的成员总数</li>
<li>INCR：当指定这个参数时，ZADD命令和ZINCRBY相似，但是只能接受一个成员的参数</li>
</ul>
<h5 id="分数的范围"><a href="#分数的范围" class="headerlink" title="分数的范围"></a>分数的范围</h5><p>Redis的Sorted Set的分数范围从-(2^53)到+(2^53)。或者说是-9007199254740992 到 9007199254740992。更大的整数在内部用指数表示。</p>
<h5 id="相同分数的成员"><a href="#相同分数的成员" class="headerlink" title="相同分数的成员"></a>相同分数的成员</h5><p>由于所有的成员都是唯一的，当分数相同时，成员将按照字典序进行排序。它比较的是成员的字节数组，当所有成员的分数都相同时，范围查询可以用ZRANGEBYLEX命令（分数范围查询用ZRANGEBYSCORE命令）。</p>
<p>该命令返回值是新增成员的数量，如果是INCR参数模式，就返回新增成员的分数。</p>
<p>Redis2.4版本以后该命令才支持指定多个成员/分数对。</p>
<h4 id="ZCARD"><a href="#ZCARD" class="headerlink" title="ZCARD"></a>ZCARD</h4><p>最早可用版本：1.2.0</p>
<p>时间复杂度：O(1)</p>
<p>当key存在时，返回zset的成员数量；否则返回0。</p>
<h4 id="ZCOUNT"><a href="#ZCOUNT" class="headerlink" title="ZCOUNT"></a>ZCOUNT</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(log(N))，N是zset的成员个数</p>
<p>用法：ZCOUNT key min max</p>
<p>返回分数在min到max（默认包括min和max）之间的成员个数。</p>
<p>ZCOUNT命令的时间复杂度为O(log(N))，因为它使用了ZRANK进行排序，然后获取范围的成员个数。</p>
<h4 id="ZINCRBY"><a href="#ZINCRBY" class="headerlink" title="ZINCRBY"></a>ZINCRBY</h4><p>最早可用版本：1.2.0</p>
<p>时间复杂度：O(log(N))，N是zset的成员个数</p>
<p>用法：ZINCRBY key increment member</p>
<p>给指定zset中的指定的成员加上increment分数。如果成员不存在，则新增成员，将分数置为increment。如果key不存在，则先创建一个zset，然后加入新的成员。命令的返回值是成员的新分数。</p>
<h4 id="ZINTERSTORE"><a href="#ZINTERSTORE" class="headerlink" title="ZINTERSTORE"></a>ZINTERSTORE</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N <em> K)+O(M </em> log(M))，N是输入的zset中的最小的成员数量，K为输入的zset的数量。M是结果中zset的成员数量</p>
<p>用法：ZINTERSTORE destination numkeys key [key …][WEIGHTS weight [weight …]][AGGREGATE SUM|MIN|MAX]</p>
<p>ZINTERSTORE命令用于计算给出的numkeys个zset的交集，并将结果保存到destination中。在给出要计算的key和其他参数之前，必须先给出numkeys。默认情况下，输出的zset成员的分数，会是输入的zset的成员的分数之和。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset1 1 <span class="string">"jackey"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD myzset1 2 <span class="string">"zhe"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD myzset2 1 <span class="string">"jackey"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD myzset2 2 <span class="string">"zhe"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD myzset2 3 <span class="string">"2018"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZINTERSTORE deszset 2 myzset1 myzset2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE deszset 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">"jackey"</span></span><br><span class="line">2) <span class="string">"2"</span></span><br><span class="line">3) <span class="string">"zhe"</span></span><br><span class="line">4) <span class="string">"4"</span></span><br></pre></td></tr></table></figure>
<p>WEIGHTS用来对每一个zset设置一个乘数因子，在计算分数时乘以指定的数值，默认是1。</p>
<p>AGGREGATE参数用来指定分数的聚合策略，默认是SUM，也就是相加。还可以选择取最大或最小的分数。</p>
<p>如果destination已经存在，则覆盖原来的值。命令的返回值是结果的成员个数。</p>
<h4 id="ZLEXCOUNT"><a href="#ZLEXCOUNT" class="headerlink" title="ZLEXCOUNT"></a>ZLEXCOUNT</h4><p>最早可用版本：2.8.9</p>
<p>时间复杂度：O(log(N))，N是zset的成员个数</p>
<p>用法：ZLEXCOUNT key min max</p>
<p>当所有成员的分数都相同时，使用这个命令计算min和max之间的成员个数。</p>
<p>关于min和max：</p>
<ul>
<li>成员名称前需要加上[，[符号和成员名称之间不能有空格</li>
<li>可以使用-和+表示最大值和最小值</li>
<li>计算数量时，包括min和max</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myzset 0 a 0 b 0 e 0 d 0 i 0 f 0 k</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT myzset - +</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT myzset b e</span><br><span class="line">(error) ERR min or max not valid string range item</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT myzset [b [e</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myzset 0 -1</span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">2) <span class="string">"b"</span></span><br><span class="line">3) <span class="string">"d"</span></span><br><span class="line">4) <span class="string">"e"</span></span><br><span class="line">5) <span class="string">"f"</span></span><br><span class="line">6) <span class="string">"i"</span></span><br><span class="line">7) <span class="string">"k"</span></span><br></pre></td></tr></table></figure>
<h4 id="ZPOPMAX"><a href="#ZPOPMAX" class="headerlink" title="ZPOPMAX"></a>ZPOPMAX</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(log(N)*M)，N是zset的成员数量，M是弹出的成员数量</p>
<p>用法：ZPOPMAX key [count]</p>
<p>该命令用于移除并返回一定数量的分数最高的成员。count默认是1，count大于zset成员，当返回多个元素时，分数最高的最先被返回。</p>
<h4 id="ZPOPMIN"><a href="#ZPOPMIN" class="headerlink" title="ZPOPMIN"></a>ZPOPMIN</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(log(N)*M)，N是zset的成员数量，M是弹出的成员数量</p>
<p>该命令和ZPOPMAX相反，返回的是分数最低的元素。只有这点不同，其他都相同。</p>
<h4 id="ZRANGE"><a href="#ZRANGE" class="headerlink" title="ZRANGE"></a>ZRANGE</h4><p>最早可用版本：1.2.0</p>
<p>时间复杂度：O(log(N)+M)，N是zset的成员数量，M是返回的成员数量</p>
<p>用法：ZRANGE key start stop [WITHSCORES]</p>
<p>该命令返回指定范围的成员，按照分数从低到高的顺序排。start和stop都是从0开始，也可以是负数，-1表示倒数第一个。返回的时候包括start和stop位置的成员。</p>
<p>如果start大于zset成员数量或者start大于stop，则返回空集合；如果stop大于最后一位，则返回start到最后一位的成员。</p>
<p>WITHSCORES参数表示返回的结果中是否要带分数。</p>
<h4 id="ZRANGEBYLEX"><a href="#ZRANGEBYLEX" class="headerlink" title="ZRANGEBYLEX"></a>ZRANGEBYLEX</h4><p>最早可用版本：2.8.9</p>
<p>时间复杂度：O(log(N)+M)，N是zset的成员数量，M是返回的成员数量</p>
<p>用法：ZRANGEBYLEX key min max [LIMIT offset count]</p>
<p>前面我们提到过，当所有的成员的分数相同时，它们会按照字典顺序排列。对于中情况，ZRANGEBYLEX命令就是用来返回指定区间成员的。指定成员时可以使用(或者[，(表示不包含指定的成员，[表示包含。</p>
<p>成员字符串作为二进制数组来排序，默认是ASCII字符集的顺序。</p>
<p>LIMIT参数用于分页，类似于SQL中的LIMIT关键字。</p>
<h4 id="ZRANGEBYSCORE"><a href="#ZRANGEBYSCORE" class="headerlink" title="ZRANGEBYSCORE"></a>ZRANGEBYSCORE</h4><p>最早可用版本：1.0.5</p>
<p>时间复杂度：O(log(N)+M)，N是zset的成员数量，M是返回的成员数量</p>
<p>用法：ZRANGEBYSCORE key min max [WITHSCORES][LIMIT offset count]</p>
<p>这个命令用来返回指定分数范围的成员，包括min和max。如果分数相同，则按字典顺序排列。</p>
<p>LIMIT参数用来分页。</p>
<p>在Redis2.0以后，可用使用WITHSCORES参数，使返回值中带有分数。</p>
<p>我们可以使用(表示不包括指定的分数，举个栗子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZRANGEBYSCORE zset (1 5</span><br></pre></td></tr></table></figure>
<p>取的分数范围是1&lt;score&lt;=5</p>
<h4 id="ZRANK"><a href="#ZRANK" class="headerlink" title="ZRANK"></a>ZRANK</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(log(N))</p>
<p>该命令用于返回指定的成员从低到高的排名。返回值从0开始，第一个元素的rank是0，第二个是1……</p>
<p>如果成员存在，返回它的rank值；如果不存在，返回nil。</p>
<h4 id="ZREM"><a href="#ZREM" class="headerlink" title="ZREM"></a>ZREM</h4><p>最早可用版本：1.2.0</p>
<p>时间复杂度：O(M*log(N))，N是zset的成员数量，M是要删除的成员数量</p>
<p>从zset中删除指定的成员。返回值为实际删除的成员数量。</p>
<p>Redis2.4版本以后支持一次指定多个成员。</p>
<h4 id="ZREMRANGEBYLEX"><a href="#ZREMRANGEBYLEX" class="headerlink" title="ZREMRANGEBYLEX"></a>ZREMRANGEBYLEX</h4><p>最早可用版本：2.8.9</p>
<p>时间复杂度：O(log(N)+M)，N是zset的成员数量，M是要删除的成员数量</p>
<p>用法：ZREMRANGEBYLEX key min max</p>
<p>该命令用于删除指定返回的成员，最好用于所有分数都相同的集合，否则结果会不准确。</p>
<p>关于min和max的描述可以查看ZRANGEBYLEX命令。</p>
<h4 id="ZREMRANGEBYRANK"><a href="#ZREMRANGEBYRANK" class="headerlink" title="ZREMRANGEBYRANK"></a>ZREMRANGEBYRANK</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(log(N)+M)，N是zset的成员数量，M是要删除的成员数量</p>
<p>用法：ZREMRANGEBYRANK key start stop</p>
<p>用于删除指定rank范围的成员。start和stop的介绍可以查看ZRANGE命令。</p>
<h4 id="ZREMRANGEBYSCORE"><a href="#ZREMRANGEBYSCORE" class="headerlink" title="ZREMRANGEBYSCORE"></a>ZREMRANGEBYSCORE</h4><p>最早可用版本：1.2.0</p>
<p>时间复杂度：O(log(N)+M)，N是zset的成员数量，M是要删除的成员数量</p>
<p>用法：ZREMRANGEBYSCORE key min max</p>
<p>删除指定分数范围的成员，默认包括min和max的分数，在2.1.6版本以后可以不包括min和max，具体可以查看ZRANGEBYSCORE命令。</p>
<h4 id="ZREVRANGE"><a href="#ZREVRANGE" class="headerlink" title="ZREVRANGE"></a>ZREVRANGE</h4><p>最早可用版本：1.2.0</p>
<p>时间复杂度：O(log(N)+M)，N是zset的成员数量，M是要返回的成员数量</p>
<p>用法：ZREVRANGE key start stop [WITHSCORES]</p>
<p>返回分数从高到低的成员，也就是说，顺序与ZRANGE相反。其他条件都相同。</p>
<h4 id="ZREVRANGEBYLEX"><a href="#ZREVRANGEBYLEX" class="headerlink" title="ZREVRANGEBYLEX"></a>ZREVRANGEBYLEX</h4><p>最早可用版本：1.2.0</p>
<p>时间复杂度：O(log(N)+M)，N是zset的成员数量，M是要返回的成员数量</p>
<p>该命令是ZRANGEBYLEX命令的倒序版本。</p>
<p>####ZREVRANGEBYSCORE</p>
<p>最早可用版本：2.2.0</p>
<p>时间复杂度：O(log(N)+M)，N是zset的成员数量，M是要返回的成员数量</p>
<p>是ZRANGEBYSCORE命令的倒序。</p>
<h4 id="ZREVRANK"><a href="#ZREVRANK" class="headerlink" title="ZREVRANK"></a>ZREVRANK</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(log(N))</p>
<p>是ZRANK的倒序。</p>
<h4 id="ZSCAN"><a href="#ZSCAN" class="headerlink" title="ZSCAN"></a>ZSCAN</h4><p>最早可用版本：2.8.0</p>
<p>时间复杂度：每次调用为O(1)</p>
<p>用法：ZSCAN key cursor [MATCH pattern][COUNT count]</p>
<p>这是一个SCAN类的命令，可以看<a href="https://jackeyzhe.github.io/2018/09/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis%E7%9A%84scan%E5%91%BD%E4%BB%A4/">这里</a>进行更深入的了解。</p>
<h4 id="ZSCORE"><a href="#ZSCORE" class="headerlink" title="ZSCORE"></a>ZSCORE</h4><p>最早可用版本：1.2.0</p>
<p>时间复杂度：O(1)</p>
<p>该命令用于返回指定成员的分数。如果指定成员不存在或者key不存在，则返回nil。</p>
<h4 id="ZUNIONSTORE"><a href="#ZUNIONSTORE" class="headerlink" title="ZUNIONSTORE"></a>ZUNIONSTORE</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(N)+O(M log(M))，N是输入的zset的大小之和，M是结果的zset的大小</p>
<p>用法：ZUNIONSTORE destination numkeys key [key …][WEIGHTS weight [weight …]][AGGREGATE SUM|MIN|MAX]</p>
<p>计算给出的zset的并集，并把结果存到destination，在给定要计算的key和其他参数之前，要给出numkeys，也就是key的数量。默认情况下，结果中的成员的分数，是输入的zset的该成员分数的和。</p>
<p>关于WEIGHTS和AGGREGATE参数，可以查看ZINTERSTORE命令中的介绍。</p>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Streams</title>
    <url>/2019/07/01/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AStreams/</url>
    <content><![CDATA[<p>Redis5.0迎来了一种新的数据结构Streams，没有了解过的同学可以先阅读<a href="https://jackeyzhe.github.io/2019/03/28/%E3%80%90%E8%AF%91%E3%80%91Redis%E5%96%9C%E6%8F%90%E6%96%B0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9ARedis-streams/">前文</a>，今天来介绍一下Streams相关的命令。<a id="more"></a></p>
<h4 id="XACK"><a href="#XACK" class="headerlink" title="XACK"></a>XACK</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：XACK key group ID [ID…]</p>
<p>这个命令用于删除消费者组的pending entries list中的元素。通常情况下，调用XREADGROUP命令或者消费者调用XCLAIM命令时，会使一个消息阻塞，并存到PEL中，阻塞的消息被发送给消费者时，服务器并不知道消息是否被处理。</p>
<p>当消费者成功消费消息后，会调用XACK命令，服务器就会将消息从PEL中删除，并释放内存。</p>
<h4 id="XADD"><a href="#XADD" class="headerlink" title="XADD"></a>XADD</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(1)</p>
<p>向指定的stream添加元素。如果key不存在，就创建一个新的stream。</p>
<p>entry由一系列field-value对组成，存储顺序由用户添加顺序决定。XADD命令是唯一一个向stream中添加数据的命令。删除数据的命令则有XDEL和XTRIM。</p>
<p>在stream中，entry ID是唯一标识。XADD命令中ID参数是*时，会自动生成唯一ID。然而在生产环境中并不常用，通常需要我们指定一种格式较好的唯一ID。</p>
<p>默认的ID生成策略是：“Unix毫秒时间戳-同一毫秒值内的序列号”。</p>
<p>当用户显式指定ID时，最小值是0-1，且ID必须是递增的。</p>
<p>用户可以使用MAXLEN指定stream的最大元素数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XADD mystream MAXLEN ~ 1000 * ... entry fields here ..</span><br></pre></td></tr></table></figure>
<p>上面的波浪线表示不是严格的限制1000个，也可以多出几十个。</p>
<h4 id="XCLAIM"><a href="#XCLAIM" class="headerlink" title="XCLAIM"></a>XCLAIM</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(log N)</p>
<p>用法：XCLAIM key group consumer min-idle-time ID [ID …][IDLE ms] [TIME ms-unix-time] [RETRYCOUNT count][FORCE] [JUSTID]</p>
<p>这个命令用于改变pending消息的所有权，新的owner是命令参数中的consumer。</p>
<p>命令的使用场景是：</p>
<ol>
<li>一个消费者关联了一个stream</li>
<li>消费者A通过XREADGROUP读取一条消息</li>
<li>这个消息被加入到PEL中，并发送给指定的消费者，但是没有调用XACK命令来确认</li>
<li>这时消费者突然挂掉</li>
<li>其他的消费者就会使用XPENDING命令检查待处理消息列表，为了继续处理这些命令，它们使用XCLAIM命令改变这些消息的所有者。</li>
</ol>
<p>接下来解释一下命令的各个选项：</p>
<ol>
<li>IDLE<ms>：设置消息空闲时间，默认是0。消息只有在空闲时间大于IDLE时才会被认领。</ms></li>
<li>TIME<ms-unix-time>：和IDLE相同，不过它是绝对时间</ms-unix-time></li>
<li>RETRYCOUNT <count>：设置重试次数，通常XCLAIM不会改变这个值，它通常用于XPENDING命令，用来发现一些长时间未被处理的消息。</count></li>
<li>FORCE：在PEL中创建待处理消息，即使指定的ID尚未分配给客户端的PEL。</li>
<li>JUSTID：只返回认领的消息ID数组，不返回实际消息。</li>
</ol>
<h4 id="XDEL"><a href="#XDEL" class="headerlink" title="XDEL"></a>XDEL</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(1)</p>
<p>删除stream中的entry并返回删除的数量。</p>
<h4 id="XGROUP"><a href="#XGROUP" class="headerlink" title="XGROUP"></a>XGROUP</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：每个子命令是O(1)</p>
<p>该命令用于管理stream相关的消费者组。使用XGROUP命令你可以：</p>
<ul>
<li>创建与一个stream相关联的消费者组</li>
<li>销毁一个消费者组</li>
<li>从消费者组中删除指定的消费者</li>
<li>设置消费者组的last delivered ID</li>
</ul>
<p>创建新的消费者组的命令是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP CREATE mystream consumer-group-name $</span><br></pre></td></tr></table></figure>
<p>最后一个参数是stream中已传递的最后一个ID，使用$表示这个消费者组只能获取到新的元素。</p>
<p>销毁消费者组的命令是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP DESTROY mystream some-consumer-group</span><br></pre></td></tr></table></figure>
<p>即使消费者组存在活跃的消费者和等待消息，它仍然会被删除，所以执行这个命令需要格外谨慎。</p>
<p>删除指定消费者的命令是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP DELCONSUMER mystream consumer-group-name myconsumer123</span><br></pre></td></tr></table></figure>
<p>当一个新的consumer的名字被提到时，就会自动创建消费者。当消费者不再使用时，我们可以将它删除，上面的命令返回消费者在被删除之前所拥有的待处理消息。</p>
<p>设置last delivered ID的命令是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP SETID mystream my-consumer-group 0</span><br></pre></td></tr></table></figure>
<p>最后，如果不记得语法，可以使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP HELP</span><br></pre></td></tr></table></figure>
<h4 id="XINFO"><a href="#XINFO" class="headerlink" title="XINFO"></a>XINFO</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(N)，N是CONSUMERS和GROUPS返回的item数量</p>
<p>用法：XINFO [CONSUMERS key groupname] [GROUPS key][STREAM key] [HELP]</p>
<p>这个命令用于返回stream和相关消费者组的不同信息。它有三种形式。</p>
<ul>
<li>XINFO STREAM <key>        这个命令返回stream的通用信息</key></li>
<li>XINFO GROUPS <key>       这个命令用于获得stream相关的消费者组的信息</key></li>
<li>XINFO CONSUMERS <key>  <group> 这个命令返回指定消费者组的消费者列表</group></key></li>
</ul>
<h4 id="XLEN"><a href="#XLEN" class="headerlink" title="XLEN"></a>XLEN</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(1)</p>
<p>返回stream中的entry数量。如果key不存在，则返回0。对于长度为0的stream，Redis不会删除，因为可能存在关联的消费者组。</p>
<h4 id="XPENDING"><a href="#XPENDING" class="headerlink" title="XPENDING"></a>XPENDING</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(N)，N是返回的元素数量</p>
<p>用法：XPENDING key group [start end count] [consumer]</p>
<p>通过消费者组捕获数据，但不是确认这些数据。</p>
<p>XPENDING命令是检查待处理消息列表的接口，用于观察和了解消费者组正在发生的事情：哪些客户端是活跃的，哪些消息等待消费，或者查看是否有空闲的消息。这个命令通常与XCLAIM一起使用，用于处理长时间未被处理的消息。</p>
<p>这个命令的返回值是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; XPENDING mystream group55 - + 10</span><br><span class="line">1) 1) 1526984818136-0</span><br><span class="line">   2) <span class="string">"consumer-123"</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 196415</span><br><span class="line">   4) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<p>其中包括：</p>
<ol>
<li>消息ID</li>
<li>获取并要确认消息的消费者名称</li>
<li>自上次消息传递给消费者以来经过的毫秒数</li>
<li>该消息被传递的次数</li>
</ol>
<h4 id="XRANGE"><a href="#XRANGE" class="headerlink" title="XRANGE"></a>XRANGE</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(N)，N是返回的元素数量</p>
<p>用法：XRANGE key start end [COUNT count]</p>
<p>该命令用于返回stream中指定ID范围的数据，可以使用-和+表示最小和最大ID。ID也可以指定为不完全ID，即只指定Unix时间戳，就可以获取指定时间范围内的数据。</p>
<h4 id="XREAD"><a href="#XREAD" class="headerlink" title="XREAD"></a>XREAD</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(N)，N是返回的元素数量</p>
<p>用法：XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key …] ID [ID …]</p>
<p>从一个或多个stream中读取数据，仅返回ID大于调用者报告的最后接收ID的条目。</p>
<p>BLOCK项用于指定阻塞时长。STREAMS项必须在最后，用于指定stream和ID。</p>
<h4 id="XREADGROUP"><a href="#XREADGROUP" class="headerlink" title="XREADGROUP"></a>XREADGROUP</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(log(N)+M) ，N是返回的元素数量，M是一个常量。</p>
<p>用法：XREADGROUPGROUP group consumer [COUNT count] [BLOCK milliseconds] STREAMS key [key …] ID [ID …]</p>
<p>XREADGROUP是XREAD的特殊版本，支持消费者组。</p>
<h4 id="XREVRANGE"><a href="#XREVRANGE" class="headerlink" title="XREVRANGE"></a>XREVRANGE</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(log(N)+M) ，N是返回的元素数量，M是一个常量。</p>
<p>此命令与XRANGE唯一的区别是顺序相反。</p>
<h4 id="XTRIM"><a href="#XTRIM" class="headerlink" title="XTRIM"></a>XTRIM</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(log(N)+M) ，N是返回的元素数量，M是一个常量。</p>
<p>用法：XTRIM key MAXLEN [~] count</p>
<p>该命令用于裁剪流为指定数量的项目。这个命令被设计为接受多种策略，但目前只实现了MAXLEN一种。</p>
<p>如果要裁剪到stream中最新的1000个项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XTRIM mystream MAXLEN 1000</span><br></pre></td></tr></table></figure>
<p>可以使用以下形式提高效率：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XTRIM mystream MAXLEN ~ 1000</span><br></pre></td></tr></table></figure>
<p>~表示用户不需要精确的1000个项目，可以多出几十个，但是不能少于1000.</p>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Transactions</title>
    <url>/2019/03/04/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ATransactions/</url>
    <content><![CDATA[<p>Redis的事务和我们常见的数据库的事务最大的区别就是，Redis的事务中如果有一个命令执行失败，其他命令仍然可以执行成功。Redis的事务以MULTI开始，由EXEC触发。在EXEC前的操作都将被放入缓存队列中。在事务执行过程中其他客户端的命令不会插到事务中执行。下面就来介绍一下Redis事务相关的命令。<a id="more"></a></p>
<h4 id="DISCARD"><a href="#DISCARD" class="headerlink" title="DISCARD"></a>DISCARD</h4><p>最早可用版本：2.0.0</p>
<p>放弃所有队列中的命令，将连接状态置为正常状态。如果事务被WATCH，则取消所有的WATCH。</p>
<h4 id="EXEC"><a href="#EXEC" class="headerlink" title="EXEC"></a>EXEC</h4><p>最早可用版本：1.2.0</p>
<p>执行队列中的全部命令，将连接状态置为正常状态。如果某些key处于被监视状态，并且队列中有和这些key相关的命令。那么EXEC命令只有在这些key的值没有变化的情况下事务才会执行，否则事务被打断。</p>
<h4 id="MULTI"><a href="#MULTI" class="headerlink" title="MULTI"></a>MULTI</h4><p>最早可用版本：1.2.0</p>
<p>标记事务块的开始，之后的命令被顺序插入缓存队列中，可以用EXEC命令执行这些命令。</p>
<h4 id="UNWATCH"><a href="#UNWATCH" class="headerlink" title="UNWATCH"></a>UNWATCH</h4><p>最早可用版本：2.2.0</p>
<p>时间复杂度：O(1)</p>
<p>清除掉所有被WATCH的key，如果调用了EXEC或者DISCARD命令，则不用手动调用UNWATCH命令。</p>
<h4 id="WATCH"><a href="#WATCH" class="headerlink" title="WATCH"></a>WATCH</h4><p>最早可用版本：2.2.0</p>
<p>时间复杂度：对每个都是O(1)</p>
<p>将指定的key标记为被监视状态，如果事务执行前被改动，则事务会被打断。</p>
<p>最后举一个事务被打断的栗子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET lock_time 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; WATCH lock_time</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET transcation_key z <span class="comment">#这时另一个客户端执行了命令 SET lock_time 2</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCR lock_time</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; GET transcation_key</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Strings</title>
    <url>/2018/10/07/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AStrings/</url>
    <content><![CDATA[<p>String类型是Redis中比较常用的类型，因此，和String相关的命令也比较多<a id="more"></a></p>
<h4 id="APPEND"><a href="#APPEND" class="headerlink" title="APPEND"></a>APPEND</h4><p>最早可用版本2.0.0</p>
<p>当指定的key存在，并且value是字符串时，APPEND命令会在字符串末尾追加指定的字符串，如果指定的key不存在，则会创建一个空的字符串，并且追加上指定的value，效果类似于SET命令。</p>
<p>该命令的返回值是执行后字符串的长度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EXISTS mykey</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; APPEND mykey Jackeyzhe</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; APPEND mykey 2018</span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; GET mykey</span><br><span class="line"><span class="string">"Jackeyzhe2018"</span></span><br></pre></td></tr></table></figure>
<p>APPEND常被用作为定长的数据提供紧凑的存储。可以通过GETRANGE命令来获取指定长度范围的字符串，这里推荐使用Unix的时间戳作为key，既不会因为单个key过大而影响效率，又节省了大量命名空间。</p>
<h4 id="BITCOUNT"><a href="#BITCOUNT" class="headerlink" title="BITCOUNT"></a>BITCOUNT</h4><p>最早可用版本2.6.0</p>
<p>该命令的时间复杂度是O(N)，用来统计字符串中被设置为1的比特数。默认检查整个字符串，当然也可以指定起始和结束位置。起始和结束位置可以是负数，例如-1表示最后一个字节，-2表示倒数第二字节，以此类推。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETBIT bitkey 0 1   <span class="comment">#0001</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT bitkey</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitkey 2 1   <span class="comment">#0101</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT bitkey</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure>
<p>这个命令可以用来统计实时的数据。例如，统计用户上线历史，我们可以使用用户名作为key，如果第n天上线，将对应的第n位置为1。这样，即使统计10年的数据，每个用户所使用的内存空间仅仅是456字节。对于这样的数据量来讲，BITCOUNT处理的速度和其他时间复杂度为O(1)的命令是一个数量级的。</p>
<h4 id="BITFIELD"><a href="#BITFIELD" class="headerlink" title="BITFIELD"></a>BITFIELD</h4><p>最早可用版本3.2.0</p>
<p>用法：BITFIELD key [GET type offset] [SET type offset value] ][INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]</p>
<p>这个命令把Redis的字符串看作是一个bit数组。可以把指定偏移位置的bit当做指定的类型处理。例如，以下命令是对偏移量100的8位有符号整数增1，获取偏移量为0的4位无符号整数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; BITFIELD mykey INCRBY i8 100 1 GET u4 0</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
<p>该命令支持的子命令有：</p>
<ul>
<li>GET<type><offset></offset></type></li>
<li>SET<type><offset><value></value></offset></type></li>
<li>INCRBY<type><offset><increment></increment></offset></type></li>
</ul>
<p>另外还有一个OVERFLOW命令用来进行INCRBY后的益处控制。下面是OVERFLOW的三种控制方法，默认为WRAP算法。</p>
<ul>
<li>WRAP：回环算法，适用于有符号和无符号两种类型。对于无符号整型，回环计数将对整型最大值进行取模操作；对有符号整数，上溢从最小负数开始，下溢从最大正数开始。例如，i8最大为127，加1后变成-128。</li>
<li>SAT：饱和算法，上溢后保持最大整数，下溢后保持最小整数。</li>
<li>FAIL：失败算法，这种模式下发生上溢或者下溢，不会做任何操作，返回值为NULL。</li>
</ul>
<p>该命令的偏移量有两种指定方式，如果是不带前缀的数字，则以字符串位计算，如果数字前有#前缀，则计算偏移量时应该指定数字乘以整型宽度。</p>
<h4 id="BITOP"><a href="#BITOP" class="headerlink" title="BITOP"></a>BITOP</h4><p>最早可用版本：2.6.0</p>
<p>时间复杂度：O(N)</p>
<p>用法：BITOP operation destkey key [key …]</p>
<p>对一个或者字符串进行位操作，支持与(AND)、或(OR)、非(NOT)、异或(XOR)操作。除了非操作，其他的都支持多个key作为输入。对于长度不同的字符串，较短的字符串缺少的部分会以0补齐，空key也会被看作全部为0的字符串序列。</p>
<p>该命令返回保存到destkey的字符串长度，也就是输入字符串的最大长度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">"abcde"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key2 <span class="string">"abcd"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; BITOP and dest key1 key2</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; get dest</span><br><span class="line"><span class="string">"abcd\x00"</span></span><br></pre></td></tr></table></figure>
<h4 id="BITPOS"><a href="#BITPOS" class="headerlink" title="BITPOS"></a>BITPOS</h4><p>最早可用版本：2.8.7</p>
<p>时间复杂度：O(N)</p>
<p>用法：BITPOS key bit [start][end]</p>
<p>该命令用于返回第一个被设置为0或1的位置。可以使用start和end参数指定查询范围，需要注意的是，这个范围指的是字节范围而不是位范围，也就是说start=0，end=2表示在前三个字节中查找。start和end都可以为负值，-1表示最后一位，-2表示倒数第二位，以此类推。</p>
<p>我们通过一些例子来看一下某些特殊情况下的返回值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> mykey <span class="string">""</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line"><span class="string">""</span></span><br><span class="line">127.0.0.1:6379&gt; bitpos mykey 0</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; bitpos mykey 1</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">"\xff"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; bitpos key1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; bitpos key1 0</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br></pre></td></tr></table></figure>
<p>如果是空字符串，那么查找0和1都会返回-1。如果是类似”\xff”这样的字符串，它的0-7位都是1，如果查询0时，会返回再往右数一位也就是第8位。</p>
<h4 id="DECR"><a href="#DECR" class="headerlink" title="DECR"></a>DECR</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>对指定的key进行减1操作，操作数最大为64位有符号整数。如果key不存在，则会先将其设置为0，如果类型不符合，则会抛出错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET unexist</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; DECR unexist</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; SET mykey <span class="string">"fdsfe"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECR mykey</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br></pre></td></tr></table></figure>
<h4 id="DECRBY"><a href="#DECRBY" class="headerlink" title="DECRBY"></a>DECRBY</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>这个命令与DECR的参数要求和使用方法相同，唯一不同的是它用来减去指定的数值。</p>
<h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>这个不做过多介绍，是最常用的命令之一。返回指定key的值，如果不是字符串，就返回错误。</p>
<h4 id="GETBIT"><a href="#GETBIT" class="headerlink" title="GETBIT"></a>GETBIT</h4><p>最早可用版本：2.2.0</p>
<p>时间复杂度：O(1)</p>
<p>返回指定偏移量位的bit值，当key不存在时，返回0。</p>
<h4 id="GETRANGE"><a href="#GETRANGE" class="headerlink" title="GETRANGE"></a>GETRANGE</h4><p>最早可用版本：2.4.0</p>
<p>时间复杂度：O(N)</p>
<p>用法：GETRANGE key start end</p>
<p>这个命令在Redis2.0之前叫做SUBSTR，返回指定的key的指定范围（包含start和end）的子串。start和end同样也可以是负数，这点可以参考BITPOS命令。</p>
<h4 id="GETSET"><a href="#GETSET" class="headerlink" title="GETSET"></a>GETSET</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>自动把新的value保存到指定key中，并且返回旧的value。如果key存在，但是保存的数据不是字符串则会报错。</p>
<h4 id="INCR"><a href="#INCR" class="headerlink" title="INCR"></a>INCR</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>该命令用于对指定key进行加1操作，与DECR命令正好相反。执行此操作时，字符串被解析为10进制的64位有符号整数。由于Redis内部有整数形式（integer representation）来保存整数，因此不会有整数存储为字符串的额外开销。</p>
<h4 id="INCRBY"><a href="#INCRBY" class="headerlink" title="INCRBY"></a>INCRBY</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>它与INCR命令的关系就像DECR命令和DECRBY命令的关系一样，只是指定了要加的数值。</p>
<h4 id="INCRBYFLOAT"><a href="#INCRBYFLOAT" class="headerlink" title="INCRBYFLOAT"></a>INCRBYFLOAT</h4><p>最早可用版本：2.6.0</p>
<p>时间复杂度：O(1)</p>
<p>该命令会把字符串解析为浮点数，然后加上指定的浮点数。如果value不是字符串类型或者不能解析为浮点数，则会报错。返回值的精度为小数点后17位。其内部以科学计数法的形式存储。</p>
<h4 id="MGET"><a href="#MGET" class="headerlink" title="MGET"></a>MGET</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(N)，N为取回key的个数</p>
<p>该命令返回多个key的值，对于不是string类型或者不存在的key，都返回nil。</p>
<h4 id="MSET"><a href="#MSET" class="headerlink" title="MSET"></a>MSET</h4><p>最早可用版本：1.0.1</p>
<p>时间复杂度：O(N)，N为需要设置的key的个数</p>
<p>设置所有的key，如果已经存在，则覆盖旧值。MSET命令是原子操作，并且不会失败。</p>
<h4 id="MSETNX"><a href="#MSETNX" class="headerlink" title="MSETNX"></a>MSETNX</h4><p>最早可用版本：1.0.1</p>
<p>时间复杂度：O(N)，N为需要设置的key的个数</p>
<p>设置所有的key，如果有一个key已经存在，则所有的key都会设置不成功。返回1表示所有的key都已经设置成功，返回0表示所有的key都没有设置成功。</p>
<h4 id="PSETEX"><a href="#PSETEX" class="headerlink" title="PSETEX"></a>PSETEX</h4><p>最早可用版本：2.6.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：PSETEX key milliseconds value</p>
<p>该命令类似于SETEX（在后面介绍），唯一不同的时，该命令设置过期时间以毫秒为单位。</p>
<h4 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：SET key value [EX seconds][PX milliseconds][NX|XX]</p>
<p>也是最常用的命令之一。在2.6.12版本，SET命令加上了一些参数：</p>
<ul>
<li>EX seconds – 设置键key的过期时间，单位时秒</li>
<li>PX milliseconds – 设置键key的过期时间，单位时毫秒</li>
<li>NX – 只有键key不存在的时候才会设置key的值</li>
<li>XX – 只有键key存在的时候才会设置key的值</li>
</ul>
<p>加上这参数之后，SET命令已经取代了SETNX、SETEX、PSETEX这三个命令，因此，Redis不再推荐使用这些命令，并且有可能在未来版本中抛弃这些命令。</p>
<h4 id="SETBIT"><a href="#SETBIT" class="headerlink" title="SETBIT"></a>SETBIT</h4><p>最早可用版本：2.2.0</p>
<p>时间复杂度：O(1)</p>
<p>用法：SETBIT key offset value</p>
<p>设置指定位置的bit值。当key不存在时，会先生成一个字符串，这个字符串必须保证offset处有值。offset必须大于0，小于2<sup>32</sup>（因为bitmap的大小限制为512M）。</p>
<h4 id="SETEX"><a href="#SETEX" class="headerlink" title="SETEX"></a>SETEX</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(1)</p>
<p>为指定key设置value，并且给定超时时间（单位是秒），SETEX是原子操作。</p>
<h4 id="SETNX"><a href="#SETNX" class="headerlink" title="SETNX"></a>SETNX</h4><p>最早可用版本：1.0.0</p>
<p>时间复杂度：O(1)</p>
<p>SETNX是”SET if Not Exist”的缩写，也就是说，当key不存在时，才会SET成功，成功返回1，失败返回0。</p>
<h4 id="SETRANGE"><a href="#SETRANGE" class="headerlink" title="SETRANGE"></a>SETRANGE</h4><p>最早可用版本：2.2.0</p>
<p>时间复杂度：O(1)</p>
<p>这个命令用来覆盖key的一部分内容，如果offset超出value的长度，则会为string补0。offset最大值是2<sup>29</sup> -1 (536870911)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET follow jackey</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE follow 8 lol</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; GET follow</span><br><span class="line"><span class="string">"jackey\x00\x00lol"</span></span><br></pre></td></tr></table></figure>
<h4 id="STRLEN"><a href="#STRLEN" class="headerlink" title="STRLEN"></a>STRLEN</h4><p>最早可用版本：2.2.0</p>
<p>时间复杂度：O(1)</p>
<p>返回指定key存储的value的长度，如果value不是字符串，则会报错。如果key不存在，则返回0。</p>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：万物初始</title>
    <url>/2020/04/08/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E4%B8%87%E7%89%A9%E5%88%9D%E5%A7%8B/</url>
    <content><![CDATA[<p>有没有同学记得我们一起挖了多少个坑？嗯…其实我自己也不记得了，今天我们再来挖一个特殊的坑，这个坑可以说是挖到根源了——<strong>元编程</strong>。<a id="more"></a></p>
<p>元编程是编程领域的一个重要概念，它允许程序将代码作为数据，在运行时对代码进行修改或替换。如果你熟悉Java，此时是不是想到了Java的反射机制？没错，它就是属于元编程的一种。</p>
<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>Rust也同样支持反射，Rust的反射是由标准库中的<code>std::any::Any</code>包支持的。</p>
<p>这个包中提供了以下几个方法</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1586171714/Blog/rust/15/rust15-1.png" alt="Any包的方法"></p>
<p>TypeId是Rust中的一种类型，它被用来表示某个类型的唯一标识。<code>type_id(&amp;self)</code>这个方法返回变量的TypeId。</p>
<p><code>is()</code>方法则用来判断某个函数的类型。</p>
<p>可以看一下它的源码实现</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">is</span></span>&lt;T: Any&gt;(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> t = TypeId::of::&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> concrete = <span class="keyword">self</span>.type_id();</span><br><span class="line"></span><br><span class="line">  t == concrete</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到它的实现非常简单，就是对比TypeId。</p>
<p><code>downcast_ref()</code>和<code>downcast_mut()</code>是一对用于将泛型T转换为具体类型的方法。其返回的类型是<code>Option&lt;&amp;T&gt;</code>和<code>Option&lt;&amp;mut T&gt;</code>，也就是说<code>downcast_ref()</code>将类型T转换为不可变引用，而<code>downcast_mut()</code>将T转换为可变引用。</p>
<p>最后我们通过一个例子来看一下这几个函数的具体使用方法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::any::&#123;Any, TypeId&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> v1 = <span class="string">"Jackey"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a: &amp;Any;</span><br><span class="line">    a = &amp;v1;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a.type_id());</span><br><span class="line">    <span class="built_in">assert!</span>(a.is::&lt;&amp;<span class="built_in">str</span>&gt;());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print_any(&amp;v1);</span><br><span class="line">    <span class="keyword">let</span> v2: <span class="built_in">u32</span> = <span class="number">33</span>;</span><br><span class="line">    print_any(&amp;v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">print_any</span></span>(any: &amp;Any) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(v) = any.downcast_ref::&lt;<span class="built_in">u32</span>&gt;() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"u32 &#123;:x&#125;"</span>, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(v) = any.downcast_ref::&lt;&amp;<span class="built_in">str</span>&gt;() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"str &#123;:?&#125;"</span>, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"else"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><p>Rust的反射机制提供的功能比较有限，但是Rust还提供了宏来支持元编程。</p>
<p>到目前为止，宏对我们来说是一个既熟悉又陌生的概念，熟悉是因为我们一直在使用<code>println!</code>宏，陌生则是因为我们从没有详细介绍过它。</p>
<p>对于<code>println!</code>宏，我们直观上的使用感受是它和函数差不多。但两者之间还是有一定的区别的。</p>
<p>我们知道对于函数，它接收参数的个数是固定的，并且在函数定义时就已经固定了。而宏接收的参数个数则是不固定的。</p>
<p>这里我们说的宏都是类似函数的宏，此外，Rust还有一种宏是类似于属性的宏。它有点类似于Java中的注解，通常作为一种标记写在函数名上方。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[route(GET, <span class="meta-string">"/"</span>)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">index</span></span>() &#123;</span><br></pre></td></tr></table></figure>
<p>route在这里是用来指定接口方法的，对于这个服务来讲，根路径的<code>GET</code>请求都被路由到这个index函数上。这样的宏是通过属于<strong>过程宏</strong>，它的定义使用了<code>#[proc_macro_attribute]</code>注解。而函数类似的过程宏在定义时使用的注解是<code>#[proc_macro]</code>。</p>
<p>除了过程宏以外，宏的另一大分类叫做<strong>声明宏</strong>。声明宏是通过<code>macro_rules!</code>来声明定义的宏，它比过程宏的应用要更加广泛。我们曾经接触过的<code>vec!</code>就是声明宏的一种。它的定义如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> vec &#123;</span><br><span class="line">    ( $( $x:expr ),* ) =&gt; &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> temp_vec = <span class="built_in">Vec</span>::new();</span><br><span class="line">            $(</span><br><span class="line">                temp_vec.push($x);</span><br><span class="line">            )*</span><br><span class="line">            temp_vec</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们来定义一个属于自己的宏。</p>
<p>自定义宏需要使用<code>derive</code>注解。（例子来自the book）</p>
<p>我们先来创建一个叫做hello_macro的lib库，只定义一个trait。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">HelloMacro</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">hello_macro</span></span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着再创建一个子目录hello_macro_derive，在hello_macro_derive/Cargo.toml文件中添加依赖</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">[lib]</span><br><span class="line">proc-<span class="keyword">macro</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">syn = <span class="string">"0.14.4"</span></span><br><span class="line">quote = <span class="string">"0.6.3"</span></span><br></pre></td></tr></table></figure>
<p>然后就可以在hello_macro_derive/lib.rs文件中定义我们自定义宏的功能实现了。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> proc_macro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::proc_macro::TokenStream;</span><br><span class="line"><span class="keyword">use</span> quote::quote;</span><br><span class="line"><span class="keyword">use</span> syn;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[proc_macro_derive(HelloMacro)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">hello_macro_derive</span></span>(input: TokenStream) -&gt; TokenStream &#123;</span><br><span class="line">    <span class="comment">// Construct a representation of Rust code as a syntax tree</span></span><br><span class="line">    <span class="comment">// that we can manipulate</span></span><br><span class="line">    <span class="keyword">let</span> ast = syn::parse(input).unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Build the trait implementation</span></span><br><span class="line">    impl_hello_macro(&amp;ast)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">impl_hello_macro</span></span>(ast: &amp;syn::DeriveInput) -&gt; TokenStream &#123;</span><br><span class="line">    <span class="keyword">let</span> name = &amp;ast.ident;</span><br><span class="line">    <span class="keyword">let</span> gen = quote! &#123;</span><br><span class="line">        <span class="keyword">impl</span> HelloMacro <span class="keyword">for</span> #name &#123;</span><br><span class="line">            <span class="function"><span class="keyword">fn</span> <span class="title">hello_macro</span></span>() &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"Hello, Macro! My name is &#123;&#125;"</span>, <span class="built_in">stringify!</span>(#name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    gen.into()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用了两个crate：syn和quote，其中syn是把Rust代码转换成一种特殊的可操作的数据结构，而quote的作用则与它刚好相反。</p>
<p>可以看到，我们自定义宏使用的注解是<code>#[proc_macro_derive(HelloMacro)]</code>，其中HelloMacro是宏的名称，在使用时，我们只需要使用注解<code>#[derive(HelloMacro)]</code>即可。</p>
<p>在使用时我们应该先引入这两个依赖</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">hello_macro = &#123; path = <span class="string">"../hello_macro"</span> &#125;</span><br><span class="line">hello_macro_derive = &#123; path = <span class="string">"../hello_macro/hello_macro_derive"</span> &#125;</span><br></pre></td></tr></table></figure>
<p>然后再来使用</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> hello_macro::HelloMacro;</span><br><span class="line"><span class="keyword">use</span> hello_macro_derive::HelloMacro;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(HelloMacro)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pancakes</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    Pancakes::hello_macro();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果显示，我们能够成功在实现中捕获到结构体的名字。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1586190192/Blog/rust/15/rust15-2.png" alt="result"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们在本文中先后介绍了Rust的两种元编程：反射和宏。其中反射提供的功能能力较弱，但是宏提供的功能非常强大。我们所介绍的宏的相关知识其实只是皮毛，要想真正理解宏，还需要花更多的时间学习。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础数据结构</title>
    <url>/2018/09/17/Redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>Redis是一款完全免费的，高性能的key-value数据库，目前被大多数公司用来做缓存。Redis作为一个内存数据库，它的读写速度非常快：读速度可以达到110000次/s，写的速度是81000次/s 。相比于其他key-value数据库，Redis的另一大特性就是支持多种数据类型。今天我们来一起聊一聊Redis的5种基础数据类型。<a id="more"></a></p>
<h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><p>在学习之前，我们要先自己安装一个Redis环境用来自己动手操作，感受一下。</p>
<h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><p><strong>下载地址：</strong><a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/releases</a></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1537284281/Blog/Redis/Redis_windows_path.png" alt="Redis_window_pack"></p>
<p>Windows用户可以在这个地址下载相应版本的压缩包，在C盘进行解压，解压后，将目录重命名为redis。在cmd中进入该目录，然后运行redis-server.exe redis.windows.conf。另外，也可以把目录加到环境变量中，这样就不需要再cd进入这个目录了。</p>
<p>Redis的server安装好后，再打开一个新的cmd， 运行redis-cli.exe -h 127.0.0.1 -p 6379，就可以开始进行操作了。其中-h参数表示host，-p参数表示port，可以省略，默认是6379。</p>
<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br><span class="line">$ tar xzf redis-4.0.11.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-4.0.11</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>
<p>执行以上命令下载并安装Redis，接着进入src目录，运行redis-server。再执行 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./redis-cli</span><br></pre></td></tr></table></figure>
<p>命令，就可以开始操作了。</p>
<h5 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h5><p>Ubuntu可以直接使用apt-get安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt-get update</span><br><span class="line"><span class="variable">$sudo</span> apt-get install redis-server</span><br></pre></td></tr></table></figure>
<p>启动方法这里不再赘述。</p>
<h5 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h5><p>Mac用户可以使用homebrew安装Redis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure>
<h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><p>除了上述方法以外，我们还可以从GitHub下载源码，对源码进行编译。URL是<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:antirez/redis.git。也可以从<a href="https://redis.io/download" target="_blank" rel="noopener">官网</a>下载Docker，通过运行Docker来操作。</p>
<h4 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h4><p>Redis支持5种基础数据类型，下面我们来一一介绍，由于我本身是Java程序员，因此会将这些数据类型与Java中的数据类型进行类比。当然，你也可以拿自己熟悉的语言来理解。</p>
<h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><p>String是最基本的，也是最常用的类型。它是二进制安全的，也就是说，我们可以将对象序列化成json字符串作为value值存入Redis。在分配内存时，Redis会为一个字符串分配一些冗余的空间，以避免因字符串的值改变而出现频繁的内存分配操作。当字符串长度小于1M时，每次扩容都会加倍现有空间，当长度大于1M时，每次扩容，增加1M，Redis字符串的最大长度是512M。</p>
<h5 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h5><p>Hash是键值对集合，相当于Java中的HashMap，实际结构也和HashMap一样，是数组+链表的结构。所不同的是扩容的方式不同，HashMap是进行一次rehash，而Redis为了不阻塞服务，会创建一个新的数组，在查询时会同时查询两个Hash，然后在逐渐将旧的Hash内容转移到新的中去。一个Hash最大可以存储2<sup>32</sup>-1个键值对。</p>
<h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><p>List相当于Java中的LinkedList，它的插入和删除操作的时间复杂度为O(1)，而查询操作的时间复杂度为O(n)。我们可以利用List的rpush、rpop、lpush和lpop命令来构建队列或者栈。列表最多可以存储2<sup>32</sup>-1个元素。</p>
<h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>Set是String类型的无序集合，并且元素唯一，相当于Java中的HashSet，它的插入、删除、查询操作的时间复杂度都是O(1)。其最大元素数也是2<sup>32</sup>-1个。</p>
<h5 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h5><p>zset可以看做是Java中SortedSet和HashMap的结合，一方面它不允许元素重复，另一方面，它通过score为每个元素进行排序。</p>
<h4 id="两个规则"><a href="#两个规则" class="headerlink" title="两个规则"></a>两个规则</h4><p>对于以上5种数据结构，有两个通用的规则：</p>
<ol>
<li>如果不存在，就先创建，再进行操作</li>
<li>如果元素为空，就会释放内存</li>
</ol>
<h4 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h4><p>我们可以对上面所有的类型设置过期时间，如果时间到了，Redis 会自动删除相应的对象。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>本文简单介绍了Redis的安装方法和Redis的5中基本数据结构。主要目的是帮助没有基础的同学快速入门，对于已经了解Redis的同学也是知识的巩固，想要了解更多关于Redis的知识，可以持续关注我，后面还有更精彩的内容分享给大家。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：亡羊补牢</title>
    <url>/2019/12/30/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E4%BA%A1%E7%BE%8A%E8%A1%A5%E7%89%A2/</url>
    <content><![CDATA[<p>如果你已经开始学习Rust，相信你已经体会过Rust编译器的强大。它可以帮助你避免程序中的大部分错误，但是编译器也不是万能的，如果程序写的不恰当，还是会发生错误，让程序崩溃。所以今天我们就来聊一聊Rust中如何处理程序错误，也就是所谓的“亡羊补牢”。<a id="more"></a></p>
<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>在编程中遇到的非正常情况通常可以分为三类：失败、错误、异常。</p>
<p>Rust中用两种方式来消除失败：强大的类型系统和断言。</p>
<p>对于类型系统，熟悉Java的同学应该比较清楚。例如我们给一个接收参数为int的函数传入了字符串类型的变量。这是由编译器帮我们处理的。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1577629475/Blog/rust/07/Rust07-1.png" alt="rust07-1"></p>
<p>关于断言，Rust支持6种断言。分别是：</p>
<ul>
<li>assert!</li>
<li>assert_eq!</li>
<li>assert_ne!</li>
<li>debug_assert!</li>
<li>debug_assert_eq!</li>
<li>debug_assert_ne!</li>
</ul>
<p>从名称我们就可以看出来这6种断言，可以分为两大类，带debug的和不带debug的，它们的区别就是assert开头的在调试模式和发布模式下都可以使用，而debug开头的只可以在调试模式下使用。再来解释每个大类下的三种断言，assert!是用于断言布尔表达式是否为true，assert_eq!用于断言两个表达式是否相等，assert_ne!用于断言两个表达式是否不相等。当不符合条件时，断言会引发线程恐慌（panic!）。</p>
<p>Rust处理异常的方法有4种：Option<t>、Result&lt;T, E&gt;、线程恐慌（Panic）、程序终止（Abort）。接下来我们对这些方法进行详细介绍。</t></p>
<h3 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option<t></t></h3><p>Option<t>我们在<a href="https://jackeyzhe.github.io/2019/10/27/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E5%8D%83%E4%BA%BA%E5%8D%83%E6%9E%84/">Rust入坑指南：千人千构</a>一文中我们进行过一些介绍，它是一种枚举类型，主要包括两种值：Some(T)和None，Rust也是靠它来避免空指针异常的。</t></p>
<p>在前文中，我们并没有详细介绍如何从Option<t>中提取出T，其实最基本的，可以用match来提取。而我也在前文中给你提供了官方文档的链接，不知道你有没有看。如果还没来得及看也没有关系，我把我看到的一些方法分享给你。</t></p>
<p>这里介绍两种方法，一种是expect，另一种是unwrap系列的方法。我们通过一个例子来感受一下。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="literal">Some</span>(<span class="string">"a"</span>);</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">Option</span>&lt;&amp;<span class="built_in">str</span>&gt; = <span class="literal">None</span>;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(a.expect(<span class="string">"a is none"</span>), <span class="string">"a"</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(b.expect(<span class="string">"b is none"</span>), <span class="string">"b is none"</span>);  <span class="comment">//匹配到None会引起线程恐慌，打印的错误是expect的参数信息</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(a.unwrap(), <span class="string">"a"</span>);   <span class="comment">//如果a是None，则会引起线程恐慌</span></span><br><span class="line">    <span class="built_in">assert_eq!</span>(b.unwrap_or(<span class="string">"b"</span>), <span class="string">"b"</span>); <span class="comment">//匹配到None时返回指定值</span></span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="literal">Some</span>(<span class="number">4</span>).unwrap_or_else(|| <span class="number">2</span> * k), <span class="number">4</span>);<span class="comment">// 与unwrap_or类似，只不过参数是FnOnce() -&gt; T</span></span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="literal">None</span>.unwrap_or_else(|| <span class="number">2</span> * k), <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是从Option<t>中提取值的方法，有时我们会觉得每次处理Option<t>都需要先提取，然后再做相应计算这样的操作比较麻烦，那么有没有更加高效的操作呢？答案是肯定的，我从文档中找到了map和and_then这两种方法。</t></t></p>
<p>其中map方法和unwrap一样，也是一系列方法，包括map、map_or和map_or_else。map会执行参数中闭包的规则，然后将结果再封为Option<t>并返回。</t></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> some_str = <span class="literal">Some</span>(<span class="string">"Hello!"</span>);</span><br><span class="line">    <span class="keyword">let</span> some_str_len = some_str.map(|s| s.len());</span><br><span class="line">    <span class="built_in">assert_eq!</span>(some_str_len, <span class="literal">Some</span>(<span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是，如果参数本身返回的结果就是Option的话，处理起来就比较麻烦，因为每执行一次map都会多封装一层，最后的结果有可能是Some(Some(Some(…)))这样N多层Some的嵌套。这时，我们就可以用and_then来处理了。</p>
<p>利用and_then方法，我们就可以有如下的链式调用：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="literal">Some</span>(<span class="number">2</span>).and_then(sq).and_then(sq), <span class="literal">Some</span>(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">sq</span></span>(x: <span class="built_in">u32</span>) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">u32</span>&gt; &#123; </span><br><span class="line">    <span class="literal">Some</span>(x * x) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于Option<t>我们就先聊到这里，大家只需要记住，它可以用来处理空值，然后能够使用它的一些处理方法就可以了，实在记不住这些方法，也可以在用的时候再去<a href="https://doc.rust-lang.org/std/option/enum.Option.html" target="_blank" rel="noopener">文档</a>中查询。</t></p>
<h3 id="Result-lt-T-E-gt"><a href="#Result-lt-T-E-gt" class="headerlink" title="Result&lt;T, E&gt;"></a>Result&lt;T, E&gt;</h3><p>聊完了Option<t>，我们再来看另一种错误处理方法，它也是一个枚举类型，叫做Result&lt;T, E&gt;，定义如下：</t></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[must_use = <span class="meta-string">"this `Result` may be an `Err` variant, which should be handled"</span>]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">enum</span> <span class="title">Result</span></span>&lt;T, E&gt; &#123;</span><br><span class="line">    <span class="literal">Ok</span>(T),</span><br><span class="line">    <span class="literal">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上，Option<t>可以被看作Result&lt;T, ()&gt;。从定义中我们可以看到Result&lt;T, E&gt;有两个变体：Ok(T)和Err(E)。</t></p>
<p>Result&lt;T, E&gt;用于处理真正意义上的错误，例如，当我们想要打开一个不存在的文件时，或者我们想要将一个非数字的字符串转换为数字时，都会得到一个Err(E)结果。</p>
<p>Result&lt;T, E&gt;的处理方法和Option<t>类似，都可以使用unwrap和expect方法，也可以使用map和and_then方法，并且用法也都类似，这里就不再赘述了。具体的方法使用细节可以自行查看<a href="https://doc.rust-lang.org/std/result/enum.Result.html" target="_blank" rel="noopener">官方文档</a>。</t></p>
<p>这里我们来看一下如何处理不同类型的错误。</p>
<p>Rust在std::io模块定义了统一的错误类型Error，因此我们在处理时可以分别匹配不同的错误类型。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">use</span> std::io::ErrorKind;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> f = File::open(<span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> f = <span class="keyword">match</span> f &#123;</span><br><span class="line">        <span class="literal">Ok</span>(file) =&gt; file,</span><br><span class="line">        <span class="literal">Err</span>(error) =&gt; <span class="keyword">match</span> error.kind() &#123;</span><br><span class="line">            ErrorKind::NotFound =&gt; <span class="keyword">match</span> File::create(<span class="string">"hello.txt"</span>) &#123;</span><br><span class="line">                <span class="literal">Ok</span>(fc) =&gt; fc,</span><br><span class="line">                <span class="literal">Err</span>(e) =&gt; <span class="built_in">panic!</span>(<span class="string">"Problem creating the file: &#123;:?&#125;"</span>, e),</span><br><span class="line">            &#125;,</span><br><span class="line">            ErrorKind::PermissionDenied =&gt; <span class="built_in">panic!</span>(<span class="string">"Permission Denied!"</span>),</span><br><span class="line">            other_error =&gt; <span class="built_in">panic!</span>(<span class="string">"Problem opening the file: &#123;:?&#125;"</span>, other_error),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在处理Result&lt;T, E&gt;时，我们还有一种处理方法，就是<strong>try!</strong>宏。它会使代码变得非常精简，但是在发生错误时，会将错误返回，传播到外部调用函数中，所以我们在使用之前要考虑清楚是否需要传播错误。</p>
<p>对于上面的代码，使用try!宏就会非常精简。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> f = <span class="built_in">try!</span>(File::open(<span class="string">"hello.txt"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>try!使用起来虽然简单，但也有一定的问题。像我们刚才提到的传播错误，再就是有可能出现多层嵌套的情况。因此Rust引入了另一个语法糖来代替try!。它就是问号操作符“<strong>?</strong>”。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::io::Read;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    read_username_from_file();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">read_username_from_file</span></span>() -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">String</span>, io::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> f = File::open(<span class="string">"hello.txt"</span>)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::new();</span><br><span class="line">    f.read_to_string(&amp;<span class="keyword">mut</span> s)?;</span><br><span class="line">    <span class="literal">Ok</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问号操作符必须在处理错误的代码后面，这样的代码看起来更加优雅。</p>
<h3 id="恐慌（Panic）"><a href="#恐慌（Panic）" class="headerlink" title="恐慌（Panic）"></a>恐慌（Panic）</h3><p>我们从最开始就聊到线程恐慌，那道理什么是恐慌呢？</p>
<p>在Rust中，无法处理的错误就会造成线程恐慌，手动执行<strong>panic!</strong>宏时也会造成恐慌。当程序执行panic!宏时，会打印相应的错误信息，同时清理堆栈并退出。但是栈回退和清理会花费大量的时间，如果你想要立即终止程序，可以在Cargo.toml文件中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">程序报错时，如果你想要查看完整的错误栈信息，可以通过设置环境变量``` RUST_BACKTRACE=1```的方式来实现。</span><br><span class="line"></span><br><span class="line">如果程序发生恐慌，我们前面所说的Result&lt;T, E&gt;就不能使用了，Rust为我们提供了catch_unwind方法来捕获恐慌。</span><br><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">use std::panic;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let result = panic::catch_unwind(|| &#123;panic!(&quot;crash and burn&quot;)&#125;);</span><br><span class="line">    assert!(result.is_err());</span><br><span class="line">    println!(&quot;&#123;&#125;&quot;, 1 + 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在上面这段代码中，我们手动执行一个panic宏，正常情况下，程序会在第一行退出，并不会执行后面的代码。而这里我们用了catch_unwind方法对panic进行了捕获，结果如图所示。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1577715961/Blog/rust/07/rust07-2.png" alt="rust07-2"></p>
<p>Rust虽然打印了恐慌信息，但是并没有影响程序的执行，我们的代码<code>println!(&quot;{}&quot;, 1 + 2);</code>可以正常执行。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此，Rust处理错误的方法我们已经基本介绍完了，为什么说是基本介绍完了呢？因为还有一些大佬开发了一些第三方库来帮助我们更加方便的处理错误，其中比较有名的有error-chain和failure，这里就不做过多介绍了。</p>
<p>通过本节的学习，相信你的Rust程序一定会变得更加健壮。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令详解：Server</title>
    <url>/2019/07/01/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AServer/</url>
    <content><![CDATA[<p>Redis命令学习，服务器篇<a id="more"></a></p>
<h4 id="BGREWRITEAOF"><a href="#BGREWRITEAOF" class="headerlink" title="BGREWRITEAOF"></a>BGREWRITEAOF</h4><p>最早可用版本：1.0.0</p>
<p>使Redis重写AOF文件，重写后的AOF文件相较于当前版本的AOF文件占用的空间更小。即使重写失败，数据也不会丢失，因为在重写成功前，旧版本的AOF文件不会改动。重写操作只会在后台没有其他持久化工作时进行：</p>
<ul>
<li>如果Redis子进程正在保存快照，那么重写AOF的操作会到保存工作完成后才开始进行。这种情况下，该命令仍然会返回OK，但是会增加一条额外的返回信息说明。在Redis2.6以后的版本，你可以使用INFO命令查看重写操作是否被预定执行。</li>
<li>如果已经有一个重写AOF命令正在进行，那么该命令会报错，并且不会预定执行重写操作。</li>
</ul>
<p>Redis2.4版本以后，重写AOF操作会自动触发。想要了解更多信息可以查看<a href="https://redis.io/topics/persistence" target="_blank" rel="noopener">持久化文档</a>。</p>
<h4 id="BGSAVE"><a href="#BGSAVE" class="headerlink" title="BGSAVE"></a>BGSAVE</h4><p>最早可用版本：1.0.0</p>
<p>在后台保存当前数据库到磁盘。命令会马上返回OK，Redis会fork出一个子进程来进行此操作，而父进程继续提供服务。可以使用LASTSAVE命令查看保存操作是否成功。</p>
<h4 id="CLIENT-GETNAME"><a href="#CLIENT-GETNAME" class="headerlink" title="CLIENT GETNAME"></a>CLIENT GETNAME</h4><p>最早可用版本：2.6.9</p>
<p>时间复杂度：O(1)</p>
<p>这个命令会返回当前连接使用CLIENT SETNAME设置的连接名称，如果没有设置，则返回空。</p>
<h4 id="CLIENT-ID"><a href="#CLIENT-ID" class="headerlink" title="CLIENT ID"></a>CLIENT ID</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(1)</p>
<p>返回当前连接的ID。每个连接都会保证两点：</p>
<ol>
<li>不会重复，所以如果返回的ID相同，那么调用方就可以确定底层是没有断开重连的。</li>
<li>ID单调递增，如果一个连接的ID大于另一个连接的ID，那么它一定晚于这个连接创建。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jackeyzhe@ubuntu:~/redis-5.0.4/src$ ./redis-cli </span><br><span class="line">127.0.0.1:6379&gt; CLIENT ID</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">jackeyzhe@ubuntu:~/redis-5.0.4/src$ ./redis-cli </span><br><span class="line">127.0.0.1:6379&gt; CLIENT ID</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure>
<h4 id="CLIENT-KILL"><a href="#CLIENT-KILL" class="headerlink" title="CLIENT KILL"></a>CLIENT KILL</h4><p>最早可用版本：2.4.0</p>
<p>时间复杂度：O(N)，N是客户端连接数</p>
<p>用法：CLIENT KILL [ip:port] [ID client-id][TYPE normal|master|slave|pubsub] [ADDR ip:port][SKIPME yes/no]</p>
<p>这个命令用来关闭一个指定的客户端连接。在Redis2.8.11之前，都可以指定要关闭的连接地址，像下面这种形式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CLIENT KILL addr:port</span><br></pre></td></tr></table></figure>
<p>ip:port应该和CLIENT LIST命令中的一行匹配。</p>
<p>在2.8.12及以后的版本，则可以使用以下形式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CLIENT KILL &lt;filter&gt; &lt;value&gt; ... ... &lt;filter&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
<p>这种形式支持多种根据多种属性匹配客户端：</p>
<ul>
<li>CLIENT KILL ADDR ip:port ：这种和旧的形式相同</li>
<li>CLIENT KILL ID client-id ：这种形式允许关闭指定ID的连接</li>
<li>CLIENT KILL TYPE type ：这种形式支持关闭某种类型的客户端，type取值为：normal, master, slave和pubsub（master在Redis3.2之后可以使用）</li>
<li>CLIENT KILL SKIPME yes/no ： 参数默认是yes，也就是不会关闭发出命令的客户端，而如果指定为no，则连自己也一起关闭</li>
</ul>
<p><strong>注意：从Redis5开始type不再使用slave，改为replica</strong></p>
<p>上述的多种过滤器也可以组合使用。使用新的形式时，返回值为关闭的客户端数量。由于Redis是单线程的，所以这个命令不能关闭一个正在执行命令的客户端。</p>
<h4 id="CLIENT-LIST"><a href="#CLIENT-LIST" class="headerlink" title="CLIENT LIST"></a>CLIENT LIST</h4><p>最早可用版本：2.4.0</p>
<p>时间复杂度：O(N)，N是客户端连接数</p>
<p>用法：CLIENT LIST [TYPE normal|master|replica|pubsub]</p>
<p>这个命令用来查看连接的客户端信息，在Redis5之后，可以使用TYPE参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CLIENT LIST</span><br><span class="line">id=3 addr=127.0.0.1:44994 fd=8 name= age=342 idle=3 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=keys</span><br><span class="line">id=4 addr=127.0.0.1:44996 fd=9 name= age=335 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=26 qbuf-free=32742 obl=0 oll=0 omem=0 events=r cmd=client</span><br></pre></td></tr></table></figure>
<p>返回值：每行代表一个客户端连接，字段包括：</p>
<ul>
<li>id：一个64bit唯一ID</li>
<li>name：使用CLIENT SETNAME设置的客户端名称</li>
<li>addr：客户端的地址和端口号</li>
<li>fd：相应的socket文件描述符</li>
<li>age：连接时长，单位为秒</li>
<li>idle：空闲时间，单位为秒</li>
<li>flags：客户端标志</li>
<li>db：当前数据库ID</li>
<li>sub：已订阅频道的数量</li>
<li>psub：已订阅模式的数量</li>
<li>multi：事务中的命令数</li>
<li>qbuf：查询缓存的长度</li>
<li>qbuf-free：查询缓存空闲空间（0表示缓存已满）</li>
<li>obl：输出缓存的长度</li>
<li>oll ：输出列表长度（缓存满时，回复会被放入这个列表中）</li>
<li>omem：输出缓存的内存占用量</li>
<li>events：文件描述符事件</li>
<li>cmd：最后一次执行的命令</li>
</ul>
<p>客户端标志包括以下几种：</p>
<ul>
<li>A：尽可能快的关闭连接</li>
<li>b：客户端在等待阻塞时间</li>
<li>c：写完回复之后关闭连接</li>
<li>d：被监视的key被修改了，事务将失败</li>
<li>i：客户端正在等待虚拟机I/O（已废弃）</li>
<li>M：客户端是master节点</li>
<li>N：没有设置flag</li>
<li>O：客户端是MONITOR模式</li>
<li>P：客户端是Pub/Sub的订阅者</li>
<li>r：客户端是针对集群节点的只读模式</li>
<li>S：客户端连接到此实例的从节点</li>
<li>u：客户端未阻塞</li>
<li>U：客户端通过Unix套接字连接</li>
<li>x：客户端正在执行事务</li>
</ul>
<p>文件描述符事件包括：</p>
<p>r：客户端套接字可读</p>
<p>w：客户端套接字可写</p>
<h4 id="CLIENT-PAUSE"><a href="#CLIENT-PAUSE" class="headerlink" title="CLIENT PAUSE"></a>CLIENT PAUSE</h4><p>最早可用版本：2.9.50</p>
<p>时间复杂度：O(1)</p>
<p>这个命令可以使所有连接暂停一段时间（单位：毫秒）。这个命令通常用来将连接从一个Redis实例迁移到另一个实例，例如当一个实例需要进行系统升级时，我们应该这样做：</p>
<ol>
<li>使用CLIENT PAUSE暂停所有客户端</li>
<li>等待几秒钟，以便从节点与主节点数据同步完成</li>
<li>将一个从节点切换成主节点</li>
<li>重新使客户端连接到新的主节点</li>
</ol>
<p>这个命令通常在事务中和INFO replication命令一起使用，这样做可以使从节点和主节点同步完成。</p>
<h4 id="CLIENT-REPLY"><a href="#CLIENT-REPLY" class="headerlink" title="CLIENT REPLY"></a>CLIENT REPLY</h4><p>最早可用版本：3.2</p>
<p>时间复杂度：O(1)</p>
<p>这个命令用来禁止服务器对当前客户端回复。它有以下几种使用场景：</p>
<ol>
<li>客户端发送fire和forget命令时（不关心什么时候完成的命令）</li>
<li>加载大量数据</li>
<li>正在创建缓存</li>
</ol>
<p>在这些情况下，客户端会忽略服务器的回复，因此，服务器回复是一种资源的浪费。</p>
<p>命令支持3个参数：</p>
<ul>
<li>ON：默认，接收服务器所有回复</li>
<li>OFF：不接收服务器的所有回复</li>
<li>SKIP：不接收下一条命令的回复</li>
</ul>
<h4 id="CLIENT-SETNAME"><a href="#CLIENT-SETNAME" class="headerlink" title="CLIENT SETNAME"></a>CLIENT SETNAME</h4><p>最早可用版本：2.6.9</p>
<p>时间复杂度：O(1)</p>
<p>这个命令用来给连接设置一个名字。这个命令会在CLIENT LIST的输出列表中显示。名字的长度没有限制，但一般不超过Redis字符串类型的长度（512MB）。名字里不能有空格。可以通过设置空字符串的方式来删除一个连接的名称，每个新的连接是没有名称的。</p>
<h4 id="CLIENT-UNBLOCK"><a href="#CLIENT-UNBLOCK" class="headerlink" title="CLIENT UNBLOCK"></a>CLIENT UNBLOCK</h4><p>最早可用版本：5.0.0</p>
<p>时间复杂度：O(log N) N是客户端连接数</p>
<p>用法：CLIENT UNBLOCK client-id [TIMEOUT|ERROR]</p>
<p>这个命令可以解除被阻塞的客户端（执行了BPOP、XREAD、WAIT等命令）。</p>
<p>默认情况下，如果阻塞超时，会解除阻塞。这里也可以有其他参数，TIMEOUT或ERROR。如果设置为ERROR，那么，被强制解除阻塞的连接会返回一个-UNBLOCKED错误。</p>
<p>这个命令主要用于少量连接监控多个key时，如果要监控新的key，又不想使用更多的连接，那么就解除一个连接的阻塞，监控新的key后再重新阻塞。</p>
<h4 id="COMMAND"><a href="#COMMAND" class="headerlink" title="COMMAND"></a>COMMAND</h4><p>最早可用版本：2.8.13</p>
<p>时间复杂度：O(N)，N是Redis命令总数</p>
<p>返回所有Redis命令的相关信息。</p>
<p>返回信息的第一层包含以下内容：</p>
<ul>
<li>命令的名称</li>
<li>命令arity（可接受的参数数量）</li>
<li>命令标志</li>
<li>第一个key在参数列表中的位置</li>
<li>最后一个key在参数列表中的位置</li>
<li>用于定位重复key的step</li>
</ul>
<p>命令arity如果是整数，表示命令的请求参数（包括命令名称）数量是一个固定的值；如果是负数，表示请求参数的最小数量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1) 1) <span class="string">"get"</span></span><br><span class="line">   2) (<span class="built_in">integer</span>) 2</span><br><span class="line">   3) 1) <span class="built_in">readonly</span></span><br><span class="line">   4) (<span class="built_in">integer</span>) 1</span><br><span class="line">   5) (<span class="built_in">integer</span>) 1</span><br><span class="line">   6) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1) 1) <span class="string">"mget"</span></span><br><span class="line">   2) (<span class="built_in">integer</span>) -2</span><br><span class="line">   3) 1) <span class="built_in">readonly</span></span><br><span class="line">   4) (<span class="built_in">integer</span>) 1</span><br><span class="line">   5) (<span class="built_in">integer</span>) -1</span><br><span class="line">   6) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<p>命令标志包括以下几种：</p>
<ul>
<li>write：命令会改变数据</li>
<li>readonly：命令不会改变key的值</li>
<li>denyoom：如果发生OOM，则拒绝命令</li>
<li>admin：服务器管理员命令</li>
<li>pubsub：和订阅模式有关的命令</li>
<li>noscript：脚本中不能执行的命令</li>
<li>random：命令的执行结果随机</li>
<li>sort_for_scrpt：如果在脚本中执行，结果会被排序</li>
<li>loading：允许命令在数据库加载时执行</li>
<li>stale：副本中有过时数据时，仍然可以执行命令</li>
<li>skip_monitor：不在MONITOR中显示命令</li>
<li>asking：集群相关，导入时仍可执行命令</li>
<li>fast：命令操作时间不变或者是log(N)</li>
<li>movablekeys：命令没有预先执行的key，必须自己指定</li>
</ul>
<h4 id="COMMAND-COUNT"><a href="#COMMAND-COUNT" class="headerlink" title="COMMAND COUNT"></a>COMMAND COUNT</h4><p>最早可用版本：2.8.13</p>
<p>时间复杂度：O(1)</p>
<p>返回当前Redis服务器支持的命令数量</p>
<h4 id="COMMANC-GETKEYS"><a href="#COMMANC-GETKEYS" class="headerlink" title="COMMANC GETKEYS"></a>COMMANC GETKEYS</h4><p>最早可用版本：2.8.13</p>
<p>时间复杂度：O(N)</p>
<p>输出命令中的key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; COMMAND GETKEYS mset a b c d e f</span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">2) <span class="string">"c"</span></span><br><span class="line">3) <span class="string">"e"</span></span><br></pre></td></tr></table></figure>
<h4 id="COMMAND-INFO"><a href="#COMMAND-INFO" class="headerlink" title="COMMAND INFO"></a>COMMAND INFO</h4><p>最早可用版本：2.8.13</p>
<p>时间复杂度：O(N)</p>
<p>返回指定命令的详细信息，返回结果的内容和COMMAND一样，如果命令不存在，返回nil。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; COMMAND INFO get</span><br><span class="line">1) 1) <span class="string">"get"</span></span><br><span class="line">   2) (<span class="built_in">integer</span>) 2</span><br><span class="line">   3) 1) <span class="built_in">readonly</span></span><br><span class="line">      2) fast</span><br><span class="line">   4) (<span class="built_in">integer</span>) 1</span><br><span class="line">   5) (<span class="built_in">integer</span>) 1</span><br><span class="line">   6) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>
<h4 id="CONFIG-GET"><a href="#CONFIG-GET" class="headerlink" title="CONFIG GET"></a>CONFIG GET</h4><p>最早可用版本：2.0.0</p>
<p>这个命令可以读redis服务器的配置参数，在2.6版本以后，才可以读到全部配置。命令支持模糊匹配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config get *max-*-entries*</span><br><span class="line">1) <span class="string">"hash-max-zipmap-entries"</span></span><br><span class="line">2) <span class="string">"512"</span></span><br><span class="line">3) <span class="string">"list-max-ziplist-entries"</span></span><br><span class="line">4) <span class="string">"512"</span></span><br><span class="line">5) <span class="string">"set-max-intset-entries"</span></span><br><span class="line">6) <span class="string">"512"</span></span><br></pre></td></tr></table></figure>
<h4 id="CONFIG-RESETSTAT"><a href="#CONFIG-RESETSTAT" class="headerlink" title="CONFIG RESETSTAT"></a>CONFIG RESETSTAT</h4><p>最早可用版本：2.0.0</p>
<p>时间复杂度：O(1)</p>
<p>重置INFO命令中的一些统计信息，包括</p>
<ul>
<li>Key命中数</li>
<li>Key未命中数</li>
<li>命令处理数量</li>
<li>连接数</li>
<li>过期Key的数量</li>
<li>拒绝的连接数</li>
<li>最近的fork(2)时间</li>
<li><code>aof_delayed_fsync</code> 计数器</li>
</ul>
<h4 id="CONFIG-REWRITE"><a href="#CONFIG-REWRITE" class="headerlink" title="CONFIG REWRITE"></a>CONFIG REWRITE</h4><p>最早可用版本：2.8.0</p>
<p>该命令用于重写redis.conf文件，应用最小的改变，使其反映当前服务器的配置。如果原始文件不存在，该命令也可以重头写一个配置文件。</p>
<h4 id="CONFIG-SET"><a href="#CONFIG-SET" class="headerlink" title="CONFIG SET"></a>CONFIG SET</h4><p>最早可用版本：2.0.0</p>
<p>该命令用于修改服务器的配置。可以使用<code>CONFIG GET *</code>查看可修改的配置。</p>
<h4 id="DBSIZE"><a href="#DBSIZE" class="headerlink" title="DBSIZE"></a>DBSIZE</h4><p>最早可用版本：1.0.0</p>
<p>返回当前数据库key的数量</p>
<h4 id="DEBUG-OBJECT"><a href="#DEBUG-OBJECT" class="headerlink" title="DEBUG OBJECT"></a>DEBUG OBJECT</h4><p>最早可用版本：1.0.0</p>
<p>这个命令不应该在客户端使用，具体请看<a href="https://redis.io/commands/object" target="_blank" rel="noopener">OBJECT</a>命令。</p>
<h4 id="DEBUG-SEGFAULT"><a href="#DEBUG-SEGFAULT" class="headerlink" title="DEBUG SEGFAULT"></a>DEBUG SEGFAULT</h4><p>最早可用版本：1.0.0</p>
<p>这个命令用于执行无效的内存访问，导致Redis崩溃，它用于在开发过程中模拟错误。</p>
<h4 id="FLUSHALL"><a href="#FLUSHALL" class="headerlink" title="FLUSHALL"></a>FLUSHALL</h4><p>最早可用版本：1.0.0</p>
<p>删除所有数据库中的key。</p>
<p>4.0.0版本以后，可以使用ASYNC参数，这个参数可以在后台进行删除任务。</p>
<h4 id="FLUSHDB"><a href="#FLUSHDB" class="headerlink" title="FLUSHDB"></a>FLUSHDB</h4><p>最早可用版本：1.0.0</p>
<p>删除当前数据库的所有key。</p>
<h4 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h4><p>INFO命令返回服务器的详细信息。可以执行显示的部分：</p>
<ul>
<li>server：Redis server通用信息</li>
<li>clients：客户端连接部分</li>
<li>memory：内存相关信息</li>
<li>persistence：RDB和AOF相关信息</li>
<li>stats：通用统计信息</li>
<li>replication：主从复制信息</li>
<li>cpu：CPU相关统计</li>
<li>commandstats：Redis命令统计</li>
<li>cluster：Redis集群部分</li>
<li>keyspace：数据库相关信息</li>
</ul>
<h4 id="LASTSAVE"><a href="#LASTSAVE" class="headerlink" title="LASTSAVE"></a>LASTSAVE</h4><p>最早可用版本：1.0.0</p>
<p>返回DB最后一次保存成功的时间。</p>
<h4 id="MEMORY-DOCTOR"><a href="#MEMORY-DOCTOR" class="headerlink" title="MEMORY DOCTOR"></a>MEMORY DOCTOR</h4><p>最早可用版本：4.0.0</p>
<p>该命令报告Redis服务器遇到的与内存相关的问题，并就可能的补救措施提出建议。</p>
<h4 id="MEMORY-HELP"><a href="#MEMORY-HELP" class="headerlink" title="MEMORY HELP"></a>MEMORY HELP</h4><p>最早可用版本：4.0.0</p>
<p>该命令返回描述不同子命令的帮助文本。</p>
<h4 id="MEMORY-MALLOC-STATS"><a href="#MEMORY-MALLOC-STATS" class="headerlink" title="MEMORY MALLOC-STATS"></a>MEMORY MALLOC-STATS</h4><p>最早可用版本：4.0.0</p>
<p>该命令提供了内存分配器的内部统计报告。这个命令只有在使用jemalloc作为分配器时可用。</p>
<h4 id="MEMORY-PURGE"><a href="#MEMORY-PURGE" class="headerlink" title="MEMORY PURGE"></a>MEMORY PURGE</h4><p>最早可用版本：4.0.0</p>
<p>该命令尝试清除脏页面，以便内存分配器回收。</p>
<h4 id="MEMORY-STATS"><a href="#MEMORY-STATS" class="headerlink" title="MEMORY STATS"></a>MEMORY STATS</h4><p>最早可用版本：4.0.0</p>
<p>返回内存的使用情况，包括以下维度：（没有特别说明，则以字节为单位）</p>
<ul>
<li>peak.allocated：Redis内存消耗的峰值</li>
<li>total.allocated：Redis使用的内存总数</li>
<li>startup.allocated：Redis启动时，初始化所需要的内存</li>
<li>replication.backlog：复制log积压的大小</li>
<li>clients.slaves：所有副本的总开销</li>
<li>clients.normal：所有客户端的总开销</li>
<li>aof.buffer：当前AOF缓冲区的总开销</li>
<li>dbXXX：对于每个数据库，主字典和到期字典的开销</li>
<li>overhead.total：所有的间接开销</li>
<li>keys.count：所有数据库中key的总数</li>
<li>keys.bytes-per-key：净内存使用和keys.count的比率</li>
<li>dataset.bytes：数据集的开销</li>
<li>dataset.percentage：数据集开销所占百分比</li>
<li>peak.percentage：peak.allocated占total.allocated的百分比</li>
<li>fragmentation：碎片内存的比率</li>
</ul>
<h4 id="MEMORY-USAGE"><a href="#MEMORY-USAGE" class="headerlink" title="MEMORY USAGE"></a>MEMORY USAGE</h4><p>最早可用版本：4.0.0</p>
<p>时间复杂度：O(N)</p>
<p>用法 <code>MEMORY USAGE key [Samples count]</code></p>
<p>该命令返回了指定key和它的value存储所占用的内存大小。</p>
<p>对于嵌套数据类型，可以使用SAMPLES参数，其中count是采样嵌套的数量，默认是5，如果要对所有嵌套值进行采样，需要将SAMPLES设置为0。</p>
<h4 id="MONITOR"><a href="#MONITOR" class="headerlink" title="MONITOR"></a>MONITOR</h4><p>最早可用版本：1.0.0</p>
<p>MONITOR是一个调试命令，它可以回溯Redis服务器处理的每个命令。它可以帮助理解数据库发生了什么。这个命令可以通过redis-cli和telnet使用。</p>
<p>安全起见，某些命令是不会被MONITOR记录的（如CONFIG）</p>
<h4 id="REPLICAOF"><a href="#REPLICAOF" class="headerlink" title="REPLICAOF"></a>REPLICAOF</h4><p>最早可用版本：5.0.0</p>
<p>这个命令可以改变从服务器的从属关系。</p>
<p>对于一台从服务器来说，执行<code>REPLICAOF NO ONE</code>命令，结果是当前服务器变成master。而执行<code>REPLICAOF host port</code>命令会改变原从属关系，是从服务器归属于新的master。</p>
<h4 id="ROLE"><a href="#ROLE" class="headerlink" title="ROLE"></a>ROLE</h4><p>最早可用版本：2.8.12</p>
<p>返回Redis实例的角色信息：包括：master、slave和sentinel</p>
<p>对于master节点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1) <span class="string">"master"</span></span><br><span class="line">2) (<span class="built_in">integer</span>) 3129659</span><br><span class="line">3) 1) 1) <span class="string">"127.0.0.1"</span></span><br><span class="line">      2) <span class="string">"9001"</span></span><br><span class="line">      3) <span class="string">"3129242"</span></span><br><span class="line">   2) 1) <span class="string">"127.0.0.1"</span></span><br><span class="line">      2) <span class="string">"9002"</span></span><br><span class="line">      3) <span class="string">"3129543"</span></span><br></pre></td></tr></table></figure>
<p>第一行是master字符串；第二行是主从复制的偏移量；用于标记重新同步时开始的位置，第三行开始是从节点的信息，包括IP、端口号和最后同步的从节点偏移量。</p>
<p>对于从节点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1) <span class="string">"slave"</span></span><br><span class="line">2) <span class="string">"127.0.0.1"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 9000</span><br><span class="line">4) <span class="string">"connected"</span></span><br><span class="line">5) (<span class="built_in">integer</span>) 3167038</span><br></pre></td></tr></table></figure>
<p>第一行返回slave字符串；第二行是IP；第三行是端口号；第四行是与主节点连接状态，可以是connect（需要与主节点连接），connecting（正在连接），sync（尝试进行主从同步），connected（从节点在线）；第五行是从节点收到的数据量</p>
<p>对于sentinel</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1) <span class="string">"sentinel"</span></span><br><span class="line">2) 1) <span class="string">"resque-master"</span></span><br><span class="line">   2) <span class="string">"html-fragments-master"</span></span><br><span class="line">   3) <span class="string">"stats-master"</span></span><br><span class="line">   4) <span class="string">"metadata-master"</span></span><br></pre></td></tr></table></figure>
<p>第一行是sentinel；第二行之后是监控master的名字。</p>
<h4 id="SAVE"><a href="#SAVE" class="headerlink" title="SAVE"></a>SAVE</h4><p>最早可用版本：1.0.0</p>
<p>同步的执行保存当前数据集快照，并写入到RDB文件。<strong>不要在生产环境使用这个命令！</strong></p>
<h4 id="SHUTDOWN"><a href="#SHUTDOWN" class="headerlink" title="SHUTDOWN"></a>SHUTDOWN</h4><p>最早可用版本：1.0.0</p>
<p>这个命令有以下操作：</p>
<ul>
<li>停止全部客户端</li>
<li>如果设置了save point，就会执行SAVE命令</li>
<li>如果AOF是enabled，刷新AOF文件</li>
<li>退出服务器</li>
</ul>
<p>如果启用了持久化，则可以保证数据不丢失。</p>
<p>如果执行SHUTDOWN SAVE，即便没有save point，仍然会强制执行保存操作。</p>
<p>如果执行SHUTDOWN NOSAVE，有保存点也不会执行保存操作。</p>
<h4 id="SLAVEOF"><a href="#SLAVEOF" class="headerlink" title="SLAVEOF"></a>SLAVEOF</h4><p>最早可用版本：1.0.0</p>
<p>该命令被REPLICAOF替代</p>
<h4 id="SLOWLOG"><a href="#SLOWLOG" class="headerlink" title="SLOWLOG"></a>SLOWLOG</h4><p>最早可用版本：2.2.12</p>
<p>这个命令用来读取并重置慢查询的日志。通过<em>slowlog-log-slower-than</em>参数设置慢查询的时间，超过这个时间就会被记录</p>
<h4 id="TIME"><a href="#TIME" class="headerlink" title="TIME"></a>TIME</h4><p>最早可用版本：2.6.0</p>
<p>时间复杂度：O(1)</p>
<p>该命令返回当前服务器时间的秒数，以及当前秒中已经过去的微秒数。</p>
]]></content>
      <tags>
        <tag>Redis命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis总结篇</title>
    <url>/2019/09/07/Redis%E6%80%BB%E7%BB%93%E7%AF%87/</url>
    <content><![CDATA[<p>Redis的文章已经写了很长时间了，在这期间，也依靠对Redis的熟悉在面试过程中获得了一些加分。在新的工作中也面临了新的挑战，因此决定对Redis的文章暂时告一段落，这里也对之前的学习进行一下总结。<a id="more"></a></p>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>首先，我们要了解什么是Redis，并尝试安装Redis，以方便后面进行一些试验。然后就是掌握最基础的数据结构，这在《<a href="https://jackeyzhe.github.io/2018/09/17/Redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">Redis基础数据结构</a>》一文中都有介绍。</p>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p>在有了基础之后，就可以开始尝试进行一些实际操作。对Redis命令的了解是少不了的。各个命令按照功能可以分为以下类别：</p>
<ul>
<li><a href="https://jackeyzhe.github.io/2018/09/19/Redis命令详解：Connection/">Connection</a></li>
<li><a href="https://jackeyzhe.github.io/2018/09/22/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AKeys/">Keys</a></li>
<li><a href="https://jackeyzhe.github.io/2018/10/07/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AStrings/">Strings</a></li>
<li><a href="https://jackeyzhe.github.io/2018/11/22/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AHashs/">Hashs</a></li>
<li><a href="https://jackeyzhe.github.io/2018/11/23/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ALists/">Lists</a></li>
<li><a href="https://jackeyzhe.github.io/2018/12/19/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ASets/">Sets</a></li>
<li><a href="https://jackeyzhe.github.io/2019/01/06/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ASorted-Sets/">Sorted Sets</a></li>
<li><a href="https://jackeyzhe.github.io/2019/01/15/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AHyperLogLog/">HyperLogLog</a></li>
<li><a href="https://jackeyzhe.github.io/2019/03/04/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ATransactions/">Transactions</a></li>
<li><a href="https://jackeyzhe.github.io/2019/07/01/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AServer/">Server</a></li>
<li><a href="https://jackeyzhe.github.io/2019/07/01/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AStreams/">Streams</a></li>
<li><a href="https://jackeyzhe.github.io/2019/08/28/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9APub-Sub/">Pub/Sub</a></li>
<li><a href="https://jackeyzhe.github.io/2019/08/28/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9ACluster/">Cluster</a></li>
<li><a href="https://jackeyzhe.github.io/2019/09/06/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AGeo/">Geo</a></li>
<li><a href="https://jackeyzhe.github.io/2019/06/10/Redis-Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/">Scripting</a></li>
</ul>
<p>在有了这些基础后，我们知道了生产环境中是禁止使用keys命令的，通常使用scan命令来查询/遍历key。所以我们在《<a href="https://jackeyzhe.github.io/2018/09/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis%E7%9A%84scan%E5%91%BD%E4%BB%A4/">深入理解Redis的scan命令</a>》一文中对SCAN命令有了更详细的介绍。</p>
<h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><p>当然，只知道这些还不够，在实际工作中，Redis通常以集群的方式部署，所以我们又介绍了部署Redis集群的三种方式。其中包括：</p>
<ul>
<li>哨兵模式：《<a href="https://jackeyzhe.github.io/2018/11/04/玩转Redis集群之Sentinel/">玩转Redis集群之Sentinel</a>》</li>
<li>Codis代理：《<a href="https://jackeyzhe.github.io/2018/11/14/%E7%8E%A9%E8%BD%ACRedis%E9%9B%86%E7%BE%A4%E4%B9%8BCodis/">玩转Redis集群之Codis</a>》</li>
<li>官方集群Cluster：《<a href="https://jackeyzhe.github.io/2018/11/27/%E7%8E%A9%E8%BD%ACRedis%E9%9B%86%E7%BE%A4%E4%B9%8BCluster/">玩转Redis集群之Cluster</a>》</li>
</ul>
<p>开发Codis的团队现在还做了分布式MySQL——<a href="https://github.com/pingcap/tidb" target="_blank" rel="noopener">TiDB</a>，感兴趣的同学可以了解一下。</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p>学到这里，你已经学会了“怎么用”，但是作为一名优秀的程序员，一定不能就此止步，还应该知道你用的东西究竟是怎么做出来的。因此，我们一起走近了源码，对Redis命令执行过程，以及一些底层存储方式做了更加深入的了解。</p>
<p><a href="https://jackeyzhe.github.io/2019/01/04/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/">走近源码：Redis的启动过程</a></p>
<p><a href="https://jackeyzhe.github.io/2019/01/05/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/">走近源码：Redis如何执行命令</a></p>
<p><a href="https://jackeyzhe.github.io/2019/01/12/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/">走近源码：Redis命令执行过程（客户端）</a></p>
<p><a href="https://jackeyzhe.github.io/2019/02/26/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9A%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog/">走近源码：神奇的HyperLogLog</a></p>
<p><a href="https://jackeyzhe.github.io/2019/03/23/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9A%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84/">走近源码：压缩列表是怎样炼成的</a></p>
<p><a href="https://jackeyzhe.github.io/2019/04/18/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E8%B7%B3%E8%B7%83%E5%88%97%E8%A1%A8%E7%A9%B6%E7%AB%9F%E6%80%8E%E4%B9%88%E8%B7%B3/">走近源码：Redis跳跃列表究竟怎么跳</a></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>最后，我们还了解了一些其他的技术，包括管道、Lua以及Redis的通信协议。</p>
<p><a href="https://jackeyzhe.github.io/2019/04/27/%E9%80%9F%E5%BA%A6%E4%B8%8D%E5%A4%9F%EF%BC%8C%E7%AE%A1%E9%81%93%E6%9D%A5%E5%87%91%E2%80%94%E2%80%94Redis%E7%AE%A1%E9%81%93%E6%8A%80%E6%9C%AF/">速度不够，管道来凑——Redis管道技术</a></p>
<p><a href="https://jackeyzhe.github.io/2019/05/13/Redis-Lua%E8%84%9A%E6%9C%AC%E5%B0%8F%E5%AD%A6%E6%95%99%E7%A8%8B/">Redis Lua脚本小学教程</a></p>
<p><a href="https://jackeyzhe.github.io/2019/06/10/Redis-Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/">Redis Lua脚本中学教程（上）</a></p>
<p><a href="https://jackeyzhe.github.io/2019/06/16/Redis-Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/">Redis Lua脚本中学教程（下）</a></p>
<p><a href="https://jackeyzhe.github.io/2019/06/17/Redis-Lua%E8%84%9A%E6%9C%AC%E5%A4%A7%E5%AD%A6%E6%95%99%E7%A8%8B/">Redis Lua脚本大学教程</a></p>
<p><a href="https://jackeyzhe.github.io/2019/06/23/%E6%B5%85%E8%B0%88Redis%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/">浅谈Redis通信协议</a></p>
<h4 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h4><p>Redis的相关知识远远不止这些，所以我还要和大家一起继续学习。这里推荐一些学习资料：</p>
<ul>
<li><a href="https://redis.io/" target="_blank" rel="noopener">Redis官网</a></li>
<li><a href="http://antirez.com/latest/0" target="_blank" rel="noopener">作者antirez的博客</a></li>
<li><a href="https://book.douban.com/subject/25900156/" target="_blank" rel="noopener">Redis设计与实现</a></li>
<li>老钱的Redis小册</li>
</ul>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1567827703/Blog/Redis/%E8%80%81%E9%92%B1Redis.png" alt="老钱小册"></p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：坑主驾到</title>
    <url>/2019/09/21/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E5%9D%91%E4%B8%BB%E9%A9%BE%E5%88%B0/</url>
    <content><![CDATA[<p>欢迎大家和我一起入坑Rust，以后我就是坑主，我主要负责在前面挖坑，各位可以在上面看，有手痒的也可以和我一起挖。这个坑到底有多深？我也不知道，我是抱着有多深就挖多深的心态来的，下面我先跳了，各位请随意。<a id="more"></a></p>
<h3 id="Rust简介"><a href="#Rust简介" class="headerlink" title="Rust简介"></a>Rust简介</h3><p>众所周知，在编程语言中，更易读的高级语言和控制底层资源的低级语言是一对矛盾体。Rust想要挑战这一现状，它尝试为开发者提供更好的体验的同时给予开发者控制底层细节的权限（比如内存使用）。</p>
<p>低级语言在开发过程中很容易出现各种细微的错误，它们难以发现但是可能影响巨大。其他大部分低级语言只能靠覆盖面更广的测试用例和经验丰富的开发者来解决这些问题。而Rust则依靠严格的编译器来杜绝这些问题。</p>
<p><em>Ps：以后会见识到Rust编译器的「厉害」</em></p>
<p>Rust的一些工具：</p>
<ul>
<li>Cargo，依赖包的管理和构建工具，可以帮你减轻添加、编译和管理依赖包的痛苦</li>
<li>Rustfmt，用于保证开发者代码风格的一致性</li>
<li>Rust语言服务器支持集成IDE（我用的是IDEA）</li>
</ul>
<h3 id="安装Rust"><a href="#安装Rust" class="headerlink" title="安装Rust"></a>安装Rust</h3><p>如果你的操作系统是Linux或macOS，在终端执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>
<p>安装过程中的选项使用默认就好（一路回车），直到出现以下信息时，表示安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Rust is installed now. Great!</span><br></pre></td></tr></table></figure>
<p>安装脚本会自动把Rust添加到环境变量PATH中，可以重启终端或者手动执行命令使添加生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> <span class="variable">$HOME</span>/.cargo/env</span><br></pre></td></tr></table></figure>
<p>当然也可以添加到你的.bash_profile文件中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.cargo/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure>
<p>最后，执行以下命令来检查Rust是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rustc --version</span><br></pre></td></tr></table></figure>
<p>另外，当你尝试编译Rust代码，但报了linker不可执行的错误时，你需要手动安装一个linker，C编译器通常会包含正确的linker。Rust的一些公共包也会依赖C语言代码和编译器。所以最好现在安装一个。</p>
<h4 id="IDEA集成Rust"><a href="#IDEA集成Rust" class="headerlink" title="IDEA集成Rust"></a>IDEA集成Rust</h4><p>IDEA中集成Rust也很简单，只需要在Preference-&gt;Plugins中搜索Rust，安装Rust插件后重启IDEA就可以了。</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>又到了经典的Hello World时间，这次我不想直接一个简单的print就结束了，我们一开始提到了Cargo是Rust依赖包的管理工具，所以我想体验一下Cargo的用法。</p>
<p>首先新建一个项目，可以直接用在IDEA中new project，也可以使用Cargo命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new hello-world</span><br><span class="line"><span class="built_in">cd</span> hello-world</span><br></pre></td></tr></table></figure>
<p>新建好项目以后，它的结构长这样子</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1569055727/Blog/rust/01/rust01.png" alt="rust-new-project"></p>
<p>其中</p>
<ul>
<li>main.rs是我们代码的入口文件</li>
<li>Cargo.toml是记录Rust元数据的文件，包括依赖。</li>
<li>Cargo.lock是记录增加依赖log的文件，不能手动修改。</li>
</ul>
<p>接着我们在Cargo.toml文件中添加我们需要的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">ferris-says = <span class="string">"0.1"</span></span><br></pre></td></tr></table></figure>
<p>这时IDEA会自动安装依赖包，如果没有安装，也可以手动执行命令来安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo build</span><br></pre></td></tr></table></figure>
<p>依赖安装好以后，就可以开始写代码了：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> ferris_says::say;</span><br><span class="line"><span class="keyword">use</span> std::io::&#123;stdout, BufWriter&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> stdout = stdout();</span><br><span class="line">    <span class="keyword">let</span> out = <span class="string">b"Hello World!"</span>;</span><br><span class="line">    <span class="keyword">let</span> width = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> writer = BufWriter::new(stdout.lock());</span><br><span class="line">    say(out, width, &amp;<span class="keyword">mut</span> writer).unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">----------------</span><br><span class="line">| Hello World! |</span><br><span class="line">----------------</span><br><span class="line">              \</span><br><span class="line">               \</span><br><span class="line">                  _~^~^~_</span><br><span class="line">              \) /  o o  \ (/</span><br><span class="line">                <span class="string">'_   -   _'</span></span><br><span class="line">                / <span class="string">'-----'</span> \</span><br></pre></td></tr></table></figure>
<p>没错，这是一个小螃蟹，至于它是谁，来看看官方解释</p>
<blockquote>
<p>Ferris is the unofficial mascot of the Rust Community. Many Rust programmers call themselves “Rustaceans,” a play on the word “<a href="https://en.wikipedia.org/wiki/Crustacean" target="_blank" rel="noopener">crustacean</a>.” We refer to Ferris with the pronouns “they,” “them,” etc., rather than with gendered pronouns.</p>
<p>Ferris is a name playing off of the adjective, “ferrous,” meaning of or pertaining to iron. Since Rust often forms on iron, it seemed like a fun origin for our mascot’s name!</p>
<p>You can find more images of Ferris on <a href="http://rustacean.net/" target="_blank" rel="noopener">http://rustacean.net/</a>.</p>
</blockquote>
<p>关于toml文件可能有些读者不太熟悉（其实我自己也不太熟），这里简单介绍一下吧，它的全称是「Tom’s Obvious, Minimal Language」，是一种配置文件格式。它的语义是比较明显的，因此易于阅读。同时格式可以明确的映射到hash表，所以也可以被多种语言轻松解析。</p>
<p>GitHub地址是：<a href="https://github.com/toml-lang/toml" target="_blank" rel="noopener">https://github.com/toml-lang/toml</a></p>
<p>有兴趣的同学可以做更深入的了解。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>至此，我确信自己已经跳进来了，有想跟进的朋友记得关注我哦。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：千人千构</title>
    <url>/2019/10/27/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E5%8D%83%E4%BA%BA%E5%8D%83%E6%9E%84/</url>
    <content><![CDATA[<p>坑越来越深了，在坑里的同学让我看到你们的双手！<a id="more"></a></p>
<p>前面我们聊过了Rust最基本的几种数据类型。不知道你还记不记得，如果不记得可以先复习一下。上一个坑挖好以后，有同学私信我说坑太深了，下来的时候差点崴了脚。我只能对他说抱歉，下次还有可能更深。不过这篇文章不会那么深了，本文我将带大家探索Structs和Enums这两个坑，没错，是双坑。是不是很惊喜？好了，言归正传。我们先来介绍Structs。</p>
<h3 id="Structs"><a href="#Structs" class="headerlink" title="Structs"></a>Structs</h3><p>Structs在许多语言里都有，是一种自定义的类型，可以类比到Java中的类。Rust中使用Structs使用的是struct关键字。例如我们定义一个用户类型。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    username: <span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span>,</span><br><span class="line">    sign_in_count: <span class="built_in">u64</span>,</span><br><span class="line">    active: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化时可以直接将上面对应的数据类型替换为正确的值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">build_user</span></span>(email: <span class="built_in">String</span>, username: <span class="built_in">String</span>) -&gt; User &#123;</span><br><span class="line">    User &#123;</span><br><span class="line">        email: email,</span><br><span class="line">        username: username,</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面仔细观察这<code>email: email</code>和<code>username: username</code>这两行代码，有没有觉得有点麻烦？，如果User的所有属性值都是从函数参数传进来，那么我们每个参数名都要重复一遍。还好Rust为我们提供了语法糖，可以省去一些代码。</p>
<h4 id="初始化Struct时省去变量名"><a href="#初始化Struct时省去变量名" class="headerlink" title="初始化Struct时省去变量名"></a>初始化Struct时省去变量名</h4><p>对于上面的初始化代码，我们可以做一些简化。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">build_user</span></span>(email: <span class="built_in">String</span>, username: <span class="built_in">String</span>) -&gt; User &#123;</span><br><span class="line">    User &#123;</span><br><span class="line">        email,</span><br><span class="line">        username,</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可以认为这是Rust的一个语法糖，当变量名和字段名相同时，初始化Struct的时候就可以省略变量名。让开发者不必做过多无意义的重复工作（写两遍email）。</p>
<h4 id="在其他实例的基础上创建Struct"><a href="#在其他实例的基础上创建Struct" class="headerlink" title="在其他实例的基础上创建Struct"></a>在其他实例的基础上创建Struct</h4><p>除了上面的语法糖以外，在创建Struct时，Rust还提供了另一个语法糖，例如我们新建一个user2，它只有邮箱和用户名与user1不同， 其他属性都相同，那么我们可以使用如下代码：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(unused_variables)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    username: <span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span>,</span><br><span class="line">    sign_in_count: <span class="built_in">u64</span>,</span><br><span class="line">    active: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user1 = User &#123;</span><br><span class="line">    email: <span class="built_in">String</span>::from(<span class="string">"someone@example.com"</span>),</span><br><span class="line">    username: <span class="built_in">String</span>::from(<span class="string">"someusername123"</span>),</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    sign_in_count: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user2 = User &#123;</span><br><span class="line">    email: <span class="built_in">String</span>::from(<span class="string">"another@example.com"</span>),</span><br><span class="line">    username: <span class="built_in">String</span>::from(<span class="string">"anotherusername567"</span>),</span><br><span class="line">    ..user1</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的<code>..user1</code>表示剩下的字段的值都和user1相同。</p>
<h4 id="Tuple-Struct"><a href="#Tuple-Struct" class="headerlink" title="Tuple Struct"></a>Tuple Struct</h4><p>接下来再来介绍两个特殊形式的Struct，一种是Tuple Struct，定义时与Tuple相似</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Color</span></span>(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>);</span><br></pre></td></tr></table></figure>
<p>它与Tuple的不同在于，你可以赋予Tuple Struct一个有意义的名字，而不只是无意义的一堆值。需要注意的是，这里我们定义的Color和Point是两种不同的类型，它们之间不能互相赋值。另外，如果你想要取得Tuple Struct中某个字段的值，和Tuple一样，使用<code>.</code>即可。</p>
<h4 id="空字段Struct"><a href="#空字段Struct" class="headerlink" title="空字段Struct"></a>空字段Struct</h4><p>这里还有一种特殊的Struct，即没有字段的Struct。它叫做类单元结构（unit-like structs）。这种结构体一般用于实现某些特征，但又没有需要存储的数据。</p>
<h4 id="Struct-方法"><a href="#Struct-方法" class="headerlink" title="Struct 方法"></a>Struct 方法</h4><p>方法和函数非常相似，不同之处在于，定义方法时，必须有与之关联的Struct，并且方法的第一个参数必须是self。我们先来看一下如何定义一个方法：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们提到，方法必须与Struct关联，这里使用<code>impl</code>关键字定义一段指定Struct的实现代码，然后在这个代码块中定义Struct相关的方法，注意我们的area方法符合规则，第一个参数是self。调用时只需要用<code>.</code>就可以。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;;</span><br><span class="line">	rect1.area();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的<code>&amp;self</code>其实是代替了<code>rectangle: &amp;Rectangle</code>，至于这里为什么要使用&amp;符号，我们在<a href="[https://jackeyzhe.github.io/2019/10/13/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/](https://jackeyzhe.github.io/2019/10/13/Rust入坑指南：核心概念/">前文</a> )已经做了介绍。当然，这里self也不是必须要加&amp;符号，你可以认为它是一个正常的参数，根据需要来使用。</p>
<p>有些同学可能会有些困惑，我们已经有了函数了，为什么还要使用方法？这其实主要是为了代码的结构。我们需要将Struct实例可以做的操作都放到impl实现代码块中，方便修改和查找。而使用函数则可能存在开发人员随便找个位置来定义的尴尬情况，这对于后期维护代码的开发人员来讲将是一种灾难。</p>
<p>现在我们已经知道，方法必须定义在impl代码块中，且第一个参数必须是self，但有时你会在Impl代码块中看到第一个参数不是self的，而且Rust也允许这种行为。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">square</span></span>(size: <span class="built_in">u32</span>) -&gt; Rectangle &#123;</span><br><span class="line">        Rectangle &#123; width: size, height: size &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是什么情况？刚才说的不对？其实不然，这种函数叫做相关函数（associated functions）。它仍然是函数，而不是方法并且直接和Struct相关，类似于Java中的静态方法。调用时直接使用双冒号（<code>::</code>），我们之前见过很多次的<code>String::from(&quot;Hi&quot;)</code>就是String的相关函数。</p>
<p>最后提一点，Rust支持为一个Struct定义多个实现代码块。但是我们并不推荐这样使用。</p>
<p>至此，第一个坑Struct就挖好了，接下来就是第二个坑Enum。</p>
<h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><p>很多编程语言都支持枚举类型，Rust也不例外。因此枚举对于大部分开发人员来说并不陌生，这里我们简单介绍一些使用方法及特性。</p>
<p>先来看一下Rust中如何定义枚举和获取枚举值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddrKind</span></span> &#123;</span><br><span class="line">    V4,</span><br><span class="line">    V6,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> six = IpAddrKind::V6;</span><br><span class="line"><span class="keyword">let</span> four = IpAddrKind::V4;</span><br></pre></td></tr></table></figure>
<p>这里的例子只是最简单的定义枚举的方法，每个枚举的值也可以关联其他类型的的值。例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Message</span></span> &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    Move &#123; x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span> &#125;,</span><br><span class="line">    Write(<span class="built_in">String</span>),</span><br><span class="line">    ChangeColor(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此外，Enum也可以像Struct拥有impl代码块，你也可以在里面定义方法。</p>
<h4 id="Option枚举"><a href="#Option枚举" class="headerlink" title="Option枚举"></a>Option枚举</h4><p>Option是Rust标准库中定义的一个枚举。如果你用过Java8的话，一定知道一个Optional类，专门用来处理null值。Rust中是不存在null值的，因为它太容易引起bug了。但如果确实需要的时候怎么办呢，这就需要Option枚举登场了。我们先来看一看它的定义：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Option</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">Some</span>(T),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很简单对不对。它是一个枚举，只有两个值，一个是Some，一个是None，其中Some还关联了一个类型T的值，这个T类似于Java中的泛型，即它可以是任意类型。</p>
<p>在使用时，可以直接使用Some或None，前面不用加<code>Option::</code>。当你使用None时，必须要指定T的具体类型。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> some_number = <span class="literal">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> some_string = <span class="literal">Some</span>(<span class="string">"a string"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> absent_number: <span class="built_in">Option</span>&lt;<span class="built_in">i32</span>&gt; = <span class="literal">None</span>;</span><br></pre></td></tr></table></figure>
<p>需要注意的是Option\&lt;T>与T并不是相同的类型。你可以在<a href="https://doc.rust-lang.org/std/option/enum.Option.html" target="_blank" rel="noopener">官方文档</a>中查看从Option\&lt;T>中提取出T的方法。</p>
<h4 id="match流程控制"><a href="#match流程控制" class="headerlink" title="match流程控制"></a>match流程控制</h4><p>Rust有一个很强大的流程控制操作叫做match，它有些类似于Java中的switch。首先匹配一系列的模式，然后执行相应的代码。与Java中switch不同的是，switch只能支持数值/枚举类型（现在也可以支持字符串），match可以支持任意类型。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Coin</span></span> &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    Quarter,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">value_in_cents</span></span>(coin: Coin) -&gt; <span class="built_in">u8</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> coin &#123;</span><br><span class="line">        Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::Quarter =&gt; <span class="number">25</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此外，match还可以支持模式中绑定值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UsState</span></span> &#123;</span><br><span class="line">    Alabama,</span><br><span class="line">    Alaska,</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Coin</span></span> &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    Quarter(UsState),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">value_in_cents</span></span>(coin: Coin) -&gt; <span class="built_in">u8</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> coin &#123;</span><br><span class="line">        Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::Quarter(state) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"State quarter from &#123;:?&#125;!"</span>, state);</span><br><span class="line">            <span class="number">25</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="match与Option-lt-T"><a href="#match与Option-lt-T" class="headerlink" title="match与Option\&lt;T>"></a>match与Option\&lt;T></h4><p>前面我们聊到了从Option\&lt;T>中提取T的值，我们来介绍一种通过match提取的方法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">plus_one</span></span>(x: <span class="built_in">Option</span>&lt;<span class="built_in">i32</span>&gt;) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="literal">None</span>,</span><br><span class="line">        <span class="literal">Some</span>(i) =&gt; <span class="literal">Some</span>(i + <span class="number">1</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> five = <span class="literal">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> six = plus_one(five);</span><br><span class="line"><span class="keyword">let</span> none = plus_one(<span class="literal">None</span>);</span><br></pre></td></tr></table></figure>
<p>这种方法在参数中必须声明T的具体类型，这里再思考一个问题，如果我们确定x一定不会是None，那么可不可以去掉None的那个条件？</p>
<h4 id="占位符"><a href="#占位符" class="headerlink" title="_占位符"></a><code>_</code>占位符</h4><p>答案是不可以，Rust要求match必须列举出所有可能的条件。例如，如果一个u8类型的，就需要列举0到255这些条件。这样做的话，可能一天也写不了几个match语句吧。所以Rust又给我们准备了一个语法糖。</p>
<p>针对上述情况，就可以写成下面这样：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> some_u8_value = <span class="number">0u8</span>;</span><br><span class="line"><span class="keyword">match</span> some_u8_value &#123;</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">"one"</span>),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">"three"</span>),</span><br><span class="line">    <span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">"five"</span>),</span><br><span class="line">    <span class="number">7</span> =&gt; <span class="built_in">println!</span>(<span class="string">"seven"</span>),</span><br><span class="line">    _ =&gt; (),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们只需要列举我们关心的几种情况，然后用占位符<code>_</code>表示剩余所有情况。看到这我只想感叹一句，这糖真甜啊。</p>
<h4 id="if-let"><a href="#if-let" class="headerlink" title="if let"></a>if let</h4><p>对于我们只关心一个条件的match来讲，还有一种更加简洁的语法，那就是if let。</p>
<p>举个栗子，我们只想要Option\&lt;u8>中值为3时打印相关信息，利用我们已经掌握的知识，可以这样写。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> some_u8_value = <span class="literal">Some</span>(<span class="number">0u8</span>);</span><br><span class="line"><span class="keyword">match</span> some_u8_value &#123;</span><br><span class="line">    <span class="literal">Some</span>(<span class="number">3</span>) =&gt; <span class="built_in">println!</span>(<span class="string">"three"</span>),</span><br><span class="line">    _ =&gt; (),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果用if let呢，就会更加简洁一些。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(<span class="number">3</span>) = some_u8_value &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"three"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里要注意，当match只有一个条件时，才可以使用if let替代。</p>
<p>有同学可能会问，既然叫if let，那么有没有else条件呢？答案是有的。对于下面这种情况</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">match</span> coin &#123;</span><br><span class="line">    Coin::Quarter(state) =&gt; <span class="built_in">println!</span>(<span class="string">"State quarter from &#123;:?&#125;!"</span>, state),</span><br><span class="line">    _ =&gt; count += <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果替换成if let语句，应该是</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> Coin::Quarter(state) = coin &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"State quarter from &#123;:?&#125;!"</span>, state);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第二个坑也挖好了，来总结一下吧。本文我们首先介绍了Struct，它类似于Java中的类，可以供开发人员自定义类型。然后介绍了两种初始化Struct时的简化代码的方法。接着是定义Struct相关的方法。在介绍完Struct以后，紧接着又介绍了大家都很熟悉的Enum枚举类型。重点说了Rust中特殊的枚举Option，然后介绍了match和if let这两种流程控制语法。</p>
<p>最后，按照国际惯例，我还是要诚挚的邀请你早日入坑。坑里真的是冬暖夏凉~</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：居安思危</title>
    <url>/2020/03/31/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E5%B1%85%E5%AE%89%E6%80%9D%E5%8D%B1/</url>
    <content><![CDATA[<p>任何事情都是相对的，就像Rust给我们的印象一直是安全、快速，但实际上，完全的安全是不可能实现的。因此，Rust中也是会有不安全的代码的。<a id="more"></a></p>
<p>严格来讲，Rust语言可以分为<strong>Safe Rust</strong>和<strong>Unsafe Rust</strong>。Unsafe Rust是Safe Rust的超集。在Unsafe Rust中并不会禁用任何的安全检查，Unsafe Rust出现的原因是为了让开发者可以做一些更加底层的操作。这些事情本身也是不安全的，如果仍然要进行Rust的安全检查，那么就无法进行这些操作。</p>
<p>在进行下面这5种操作时，Unsafe Rust不会进行安全检查。</p>
<ul>
<li>解引用原生指针</li>
<li>调用unsafe的函数或方法</li>
<li>访问或修改可变的静态变量</li>
<li>实现unsafe的trait</li>
<li>读写联合体中的字段</li>
</ul>
<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>Unsafe Rust的关键字是unsafe，它可以用来修饰函数、方法和trait，也可以用来标记代码块。</p>
<p>标准库中也有不少函数是unsafe的。例如String中的<code>from_utf8_unchecked()</code>函数。它的定义如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">unsafe</span> <span class="function"><span class="keyword">fn</span> <span class="title">from_utf8_unchecked</span></span>(bytes: <span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt;) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> &#123; vec: bytes &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数被标记为unsafe的原因是函数并没有检查传入参数是否是合法的UTF-8序列。也就是提醒使用者注意，使用这个函数要自己保证参数的合法性。</p>
<p>用unsafe标记的trait也比较常见，在前面我们见过的Send和Sync都是unsafe的trait。它们被用来保证线程安全， 将其标记为unsafe是告诉开发者，如果自己实现这两个trait，那么代码就会有安全风险。</p>
<p>我们在调用unsafe函数或方法时，需要使用unsafe代码块。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sparkle_heart = <span class="built_in">vec!</span>[<span class="number">240</span>, <span class="number">159</span>, <span class="number">146</span>, <span class="number">150</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> sparkle_heart = <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="built_in">String</span>::from_utf8_unchecked(sparkle_heart)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="string">"💖"</span>, sparkle_heart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在了解了unsafe的基础语法之后，我们再来具体看看前面提到的5种操作。</p>
<h3 id="解引用原生指针"><a href="#解引用原生指针" class="headerlink" title="解引用原生指针"></a>解引用原生指针</h3><p>Rust的原生指针分为两种：可变类型<code>*mut T</code>和不可变类型<code>*const T</code>。</p>
<p>与引用和智能指针不同，原生指针具有以下特性：</p>
<ul>
<li>可以不遵循借用规则，在同一代码块中可以同时出现可变和不可变指针，也可以同时有多个可变指针</li>
<li>不保证指向有效内存</li>
<li>允许是null</li>
<li>不会自动清理内存</li>
</ul>
<p>由这些特性可以看出，原生指针并不受Rust那一套安全规则的限制，因此，解引用原生指针是一种不安全的操作。换句话说，我们应该把这种操作放在unsafe代码块中。下面这段代码就展示了原生指针的第一条特性，以及如何解引用原生指针。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;num <span class="keyword">as</span> *<span class="keyword">const</span> <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> r2 = &amp;<span class="keyword">mut</span> num <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="built_in">i32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"r1 is: &#123;&#125;"</span>, *r1);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"r2 is: &#123;&#125;"</span>, *r2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Rust编程中，原生指针常被用作和C语言打交道，原生指针有一些特有的方法，例如可以用<code>is_null()</code>来判断原生指针是否是空指针，用<code>offset()</code>来获取指定偏移量的内存地址的内容，使用<code>read()/write()</code>方法来读写内存等。</p>
<h3 id="调用unsafe的函数或方法"><a href="#调用unsafe的函数或方法" class="headerlink" title="调用unsafe的函数或方法"></a>调用unsafe的函数或方法</h3><p>调用unsafe的函数或方法必须放到unsafe代码块中，这点我们在基础知识中已经介绍过。因为函数本身被标记为unsafe，也就意味着调用它可能存在风险。这点无需赘述。</p>
<h3 id="访问或修改可变的静态变量"><a href="#访问或修改可变的静态变量" class="headerlink" title="访问或修改可变的静态变量"></a>访问或修改可变的静态变量</h3><p>对于不可变的静态变量，我们访问它不会存在任何安全问题，但是对于可变的静态变量而言，如果我们在多线程中都访问同一个变量，那么就会造成数据竞争。这当然也是一种不安全的操作。所以要放到unsafe代码块中，此时线程安全应由开发者自己来保证。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">mut</span> COUNTER: <span class="built_in">u32</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add_to_count</span></span>(inc: <span class="built_in">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        COUNTER += inc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    add_to_count(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"COUNTER: &#123;&#125;"</span>, COUNTER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中我们没有使用多线程，这里只是想展示一下如何访问和修改可变静态变量。</p>
<h3 id="实现unsafe的trait"><a href="#实现unsafe的trait" class="headerlink" title="实现unsafe的trait"></a>实现unsafe的trait</h3><p>当trait中包含一个或多个编译器无法验证其安全性的方法时，这个trait就必须被标记为unsafe。而想要实现unsafe的trait，首先在实现代码块的关键字<code>impl</code>前也要加上unsafe标记。其次，无法被编译器验证安全性的方法，其安全性必须由开发者自己来保证。</p>
<p>前面我们也提到了，常见的unsafe的trait有Send和Sync这两个。</p>
<h3 id="读写联合体中的字段"><a href="#读写联合体中的字段" class="headerlink" title="读写联合体中的字段"></a>读写联合体中的字段</h3><p>Rust中的Union联合体和Enum相似。我们可以使用union关键字来定义一个联合体。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">MyUnion</span></span> &#123;</span><br><span class="line">    i: <span class="built_in">i32</span>,</span><br><span class="line">    f: <span class="built_in">f32</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> my_union = MyUnion&#123;i: <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, my_union.i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在初始化时，我们每次只能指定一个字段的值。这就造成我们在访问联合体中的字段时，有可能会访问到未定义的字段。因此，Rust让我们把访问操作放到unsafe代码块中，以此来警示我们必须自己保证程序的安全性。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文我们聊了Unsafe Rust的一些使用场景和使用方法。你只需要记住Unsafe的5种操作就好，在遇到这些操作时，一定要使用unsafe代码块。unsafe代码块不光是为了“骗”过编译器，要时刻提醒自己，<strong>unsafe代码块中的程序要由开发者自己保证其正确性</strong>。</p>
<ul>
<li>解引用原生指针</li>
<li>调用unsafe的函数或方法</li>
<li>访问或修改可变的静态变量</li>
<li>实现unsafe的trait</li>
<li>读写联合体中的字段</li>
</ul>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：最后一舞</title>
    <url>/2020/04/19/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E6%9C%80%E5%90%8E%E4%B8%80%E8%88%9E/</url>
    <content><![CDATA[<p>Rust入坑指南系列我觉得应该告一段落了，最后来做一个总结吧。<a id="more"></a></p>
<p>在我看来，Rust语言本身设计得算是非常好了。Ownership和borrow帮助我们保证了程序了安全性。同时也提供了Unsafe，给开发者更多玩一些骚操作的空间。唯一的缺点就是入门比较困难了吧，我现在的水平感觉自己也就是刚刚入门。而《Rust入坑指南》也是希望帮助更多想要学习Rust的同学快速入门。</p>
<p>这里简单回顾一下学习过程吧。</p>
<p>最开始接触一门语言一定绕不开Hello，World</p>
<p>Rust也是一样，所以我们的第一篇文章就是关于Rust的安装、Hello，World程序的。</p>
<p><a href="https://jackeyzhe.github.io/2019/09/21/Rust入坑指南：坑主驾到/">Rust入坑指南：坑主驾到</a></p>
<p>接着就是介绍一些基础的语法、Rust的所有权、数据结构这些概念。关于这部分知识我用了四篇文章来做介绍。其中最重要的应该是Rust所有权了，这也是Rust语言的亮点之一。</p>
<p><a href="https://jackeyzhe.github.io/2019/10/08/Rust入坑指南：常规套路/">Rust入坑指南：常规套路</a></p>
<p><a href="https://jackeyzhe.github.io/2019/10/13/Rust入坑指南：核心概念/">Rust入坑指南：核心概念</a></p>
<p><a href="https://jackeyzhe.github.io/2019/10/27/Rust入坑指南：千人千构/">Rust入坑指南：千人千构</a></p>
<p><a href="https://jackeyzhe.github.io/2019/11/27/Rust入坑指南：鳞次栉比/">Rust入坑指南：鳞次栉比</a></p>
<p>接着呢，我们介绍了Package和Crate，用来帮助我们组织代码的。同时Crate也是为了让我们可以直接使用别人的代码，避免重复造轮子。</p>
<p><a href="https://jackeyzhe.github.io/2019/11/03/Rust入坑指南：有条不紊/">Rust入坑指南：有条不紊</a></p>
<p>之后又是两个比较通用的概念，大多数编程语言时都要涉及到的：异常处理和泛型</p>
<p><a href="https://jackeyzhe.github.io/2019/12/30/Rust入坑指南：亡羊补牢/">Rust入坑指南：亡羊补牢</a></p>
<p><a href="https://jackeyzhe.github.io/2020/01/14/Rust入坑指南：海纳百川/">Rust入坑指南：海纳百川</a></p>
<p>如果你对代码的正确性不放心，那么一定要写下完备的单元测试，这是对自己的代码负责。</p>
<p><a href="https://jackeyzhe.github.io/2020/02/21/Rust入坑指南：步步为营/">Rust入坑指南：步步为营</a></p>
<p>除了OwnerShip和borrow之外，Rust的另外两个比较核心的概念也需要了解，分别是生命周期和智能指针。这两篇文章可以帮你快速了解这两个概念。</p>
<p><a href="https://jackeyzhe.github.io/2020/03/02/Rust入坑指南：朝生暮死/">Rust入坑指南：朝生暮死</a></p>
<p><a href="https://jackeyzhe.github.io/2020/03/09/Rust入坑指南：智能指针/">Rust入坑指南：智能指针</a></p>
<p>接着是并发编程，Rust声称的安全并发，究竟是怎么保证的？</p>
<p><a href="https://jackeyzhe.github.io/2020/03/15/Rust入坑指南：齐头并进（上）/">Rust入坑指南：齐头并进（上）</a></p>
<p><a href="https://jackeyzhe.github.io/2020/03/23/Rust入坑指南：齐头并进（下）/">Rust入坑指南：齐头并进（下）</a></p>
<p>Safe Rust有这样那样的限制，有的开发者可能会觉得束手束脚，难以发挥实力。这时就可以考虑看看Unsafe Rust了。</p>
<p><a href="https://jackeyzhe.github.io/2020/03/31/Rust入坑指南：居安思危/">Rust入坑指南：居安思危</a></p>
<p>最后是Rust的元编程，我们从最开始就在使用的<code>println!</code>宏，它是如何定义的呢？我们又怎么定义自己的宏？希望这篇文章对你有帮助。</p>
<p><a href="https://jackeyzhe.github.io/2020/04/08/Rust入坑指南：万物初始/">Rust入坑指南：万物初始</a></p>
<p>经过这几个月的学习，我对Rust也有了一个初步的了解，在这里要感谢对我的分享提出意见的同学。也希望我的分享能对大家有所帮助。</p>
<p>虽然标题叫最后一舞，但是后面我还是会继续保持学习，也会不定期分享一些入门的代码案例给大家。</p>
<p>Rust编程，我们后会有期。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：常规套路</title>
    <url>/2019/10/08/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E5%B8%B8%E8%A7%84%E5%A5%97%E8%B7%AF/</url>
    <content><![CDATA[<p>搭建好了开发环境之后，就算是正式跳进Rust的坑了，今天我就要开始继续向下挖了。<a id="more"></a></p>
<p>由于我们初来乍到 ，对Rust还不熟悉，所以我决定先走一遍常规套路。</p>
<h3 id="变不变的变量"><a href="#变不变的变量" class="headerlink" title="变不变的变量"></a>变不变的变量</h3><p>学习一门语言第一个要了解的当然就是变量啦。Rust使用关键字<code>let</code>来定义变量。我们写一个简单的demo</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1569755512/Blog/rust/02/rust02-1.png" alt="demo1"></p>
<p>so easy！等等，这个小红线是怎么回事？编译错误？？？别着急，哪里不对点哪里。</p>
<p>IDEA告诉我，这个错误是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Cannot assign twice to immutable variable [E0384]</span><br></pre></td></tr></table></figure>
<p>不可变的变量不能赋值两次。我定义的变量是不可变的？这能叫变量？</p>
<p>官方文档对此的解释是，对于一个变量，你在一部分代码中不希望它改变，而在另一部分代码中修改了它。那么第一部分代码的运行结果也许就不符合预期了。所以Rust的编译器为了杜绝这种情况，也就是说Rust的变量默认是不可修改的。也就是说你只能对它赋值一次，之后它就是只读的了。有点像Java中的final变量。嗯…很严格。</p>
<p>但我们编程中还是需要变量的，怎么办？下面是跟着IDEA学习写代码环节。直接使用Alt + Enter，IDEA会在定义x时加上<code>mut</code>关键字。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1569758258/Blog/rust/02/rust02-2.png" alt="demo2"></p>
<p>果然不会报错了。感谢IDEA。接下来运行试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The value of x is: 5</span><br><span class="line">The value of x is: 6</span><br></pre></td></tr></table></figure>
<p>打印结果符合我们的预期。</p>
<p><code>mut</code>关键字在官方文档也有解释，定义变量时加上<code>mut</code>，表明这个变量是一个可变变量。Rust之所以设计了可变变量，还有一个比较重要的原因就是，对于比较复杂的数据类型，每次修改都要复制并且分配新的内存。这种性能损耗有时候是无法接受的。因此可以选择使用可变变量来提高性能。</p>
<h3 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h3><p>Rust本身也支持常量，可能大多数同学和我有一样的疑问，常量和不可变变量有什么区别呢？</p>
<p>事实上它们还是有区别的。最明显的就是名字不一样。（这是一句废话）</p>
<p>主要的区别有以下几种：</p>
<ol>
<li>定义常量时不能使用<code>mut</code>关键字</li>
<li>常量定义使用的关键字是<code>const</code>，并且需要指定数据类型。定义变量使用的是<code>let</code></li>
<li>常量可以在任何范围内定义，并且可以在多个代码块中使用</li>
<li>给常量赋值时，不能使用函数的返回值或者是计算式。只能使用一个「常量」</li>
</ol>
<h3 id="变量的覆盖"><a href="#变量的覆盖" class="headerlink" title="变量的覆盖"></a>变量的覆盖</h3><p>Rust是一门静态编程语言，对于大多数静态编程语言中，在同一范围内，变量名是不允许重复的。但是Rust允许这样定义。类似于这样：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = x + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = x + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The value of x is: &#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这让人看起来有些疑惑，作为一个Java程序员，在我看来第二行就应该报编译错误了。但我们刚提到了Rust是允许这样定义的。对于上述代码来讲，每次定义x都会覆盖前一次定义的x。</p>
<p>对于Java来讲，将一个int类型的变量转换成String类型的变量可能需要这样做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> codeInt = <span class="number">1</span>;</span><br><span class="line">String codeStr = String.valueOf(codeInt);</span><br></pre></td></tr></table></figure>
<p>我们需要定义两个变量来分别接收不同类型的变量，为了变量名更有意义，可能要在变量名中加上变量类型。而在Rust中就不用考虑这个问题。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">let</span> s: <span class="built_in">u32</span> = s.parse().expect(<span class="string">"Not a number!"</span>);</span><br></pre></td></tr></table></figure>
<p>这样定义之后，再使用变量s时，它都是u32类型的变量了。</p>
<p>上面这个例子就是覆盖变量和可变变量的区别：可变变量不可以修改变量类型，覆盖变量可以做类型转换。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>可能有些同学不太理解Rust为什么是静态语言。这是因为在编译阶段，Rust编译器必须要明确每个变量的类型。编译器通常会根据变量的值或者使用方法来为变量指定一个数据类型。如果某个变量可能的数据类型有多个，那么就需要开发者手动指定。</p>
<p>像上一节的例子中，第二次定义s如果不指定类型u32，编译就会报错。Rust支持的数据类型都有哪些呢？</p>
<p>和多数编程语言一样，Rust支持的数据类型可以分为<strong>基本数据类型</strong>和<strong>复合数据类型</strong>两大类。先说基本数据类型，基本数据类型分为整数型、浮点型、布尔型和字符型。我们逐个介绍一下。</p>
<h4 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h4><p>Rust支持的整数类型分为有符号整数和无符号整数</p>
<table>
<thead>
<tr>
<th style="text-align:center">Length</th>
<th style="text-align:center">Signed</th>
<th style="text-align:center">Unsigned</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">8-bit</td>
<td style="text-align:center">i8</td>
<td style="text-align:center">u8</td>
</tr>
<tr>
<td style="text-align:center">16-bit</td>
<td style="text-align:center">i16</td>
<td style="text-align:center">u16</td>
</tr>
<tr>
<td style="text-align:center">32-bit</td>
<td style="text-align:center">i32</td>
<td style="text-align:center">u32</td>
</tr>
<tr>
<td style="text-align:center">64-bit</td>
<td style="text-align:center">i64</td>
<td style="text-align:center">u64</td>
</tr>
<tr>
<td style="text-align:center">128-bit</td>
<td style="text-align:center">i128</td>
<td style="text-align:center">u128</td>
</tr>
<tr>
<td style="text-align:center">arch</td>
<td style="text-align:center">isize</td>
<td style="text-align:center">usize</td>
</tr>
</tbody>
</table>
<p>如果没有指定数据类型，Rust默认使用<code>i32</code>，这个类型通常是性能最好的。</p>
<p>再顺便聊一下整数的几种表示。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Number literals</th>
<th style="text-align:center">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Decimal</td>
<td style="text-align:center">98_222</td>
</tr>
<tr>
<td style="text-align:center">Hex</td>
<td style="text-align:center">0xff</td>
</tr>
<tr>
<td style="text-align:center">Octal</td>
<td style="text-align:center">0o77</td>
</tr>
<tr>
<td style="text-align:center">Binary</td>
<td style="text-align:center">0b1111_0000</td>
</tr>
<tr>
<td style="text-align:center">Byte(u8)</td>
<td style="text-align:center">b’A’</td>
</tr>
</tbody>
</table>
<p>十进制中<code>_</code>一般被当作千分符。</p>
<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><p>Rust的浮点类型不像整型那么多，它只支持两种：f32和f64分别表示32位和64位浮点数，默认的浮点类型是f64。</p>
<h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p>布尔类型没有什么特别的，Rust支持隐式和显式声明两种</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> t = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f: <span class="built_in">bool</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>需要注意的是字符类型char使用单引号，字符串使用双引号。字符类型的值可以是Unicode标准值。范围是从U+0000到U+D7FF和U+E000到U+10FFFF。这意味着它可以是中文韩文 emoji等等，而并不局限于直觉上的「字符」。</p>
<p>聊完了基本数据类型，再来聊一聊复合类型，Rust包含两种复合类型：Tuple和Array。</p>
<h4 id="Tuple类型"><a href="#Tuple类型" class="headerlink" title="Tuple类型"></a>Tuple类型</h4><p>Tuple是一种可以存储不同类型的数字的集合。它的长度固定。声明方法是：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tup: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>如果想要取得tuple中的某一个值，通常有两种方法，一种是将tuple分别赋值给多个变量</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> tup = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The value of y is: &#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一种方法是用直接用「.」来取值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> tup = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = tup.<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> y = tup.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> z = tup.<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x: &#123;&#125;, y: &#123;&#125;, z: &#123;&#125;"</span>, x, y, z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h4><p>Array也是多个值的集合，但与Tuple不同的是，Array中的各个元素的数据类型必须相同。Array的长度也是固定的，这点上Rust的Array和其他语言的有所不同。Array的定义方法是：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Rust的数组存储在栈中，而不是堆。如果你不能在定义时确定数组的长度，那么需要使用vector类型，这个我们在后面讨论。Array还有一些其他的定义方法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: [<span class="built_in">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>
<p>i32表示数组中元素的类型，5表示元素数量。</p>
<p>如果初始化时所有元素的值都相同，还可以这样定义：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">3</span>; <span class="number">5</span>];</span><br></pre></td></tr></table></figure>
<p>这表示定义一个长度为5的数组，每个元素都是3。</p>
<h3 id="代码写在哪——函数"><a href="#代码写在哪——函数" class="headerlink" title="代码写在哪——函数"></a>代码写在哪——函数</h3><p>函数在每个编程语言中都是基本的概念，因此我们不做过多赘述。Rust定义函数的方法是：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> sum = add(a,b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The value of sum is: &#123;&#125;"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add</span></span>(x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Rust在定义函数时，需要指定参数的名称和类型和返回值的类型。而返回值只能是表达式。作为函数返回的表达式是不能以分号结尾的。</p>
<h3 id="该往哪走——流程控制"><a href="#该往哪走——流程控制" class="headerlink" title="该往哪走——流程控制"></a>该往哪走——流程控制</h3><p>Rust的流程控制语句包括条件控制语句和循环语句。条件控制语句有if，循环语句包括loop、while和for。</p>
<h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>Rust中if的条件必须是bool类型，它不像js中，会自动将变量转换成bool类型。此外，if还可以用于let语句中。例如：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123;</span><br><span class="line">  <span class="number">5</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">  <span class="number">6</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这种方式需要注意的是，每个表达式中返回的值必须是同一类型的。</p>
<h4 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h4><p>loop循环中，如果没有break或者是手动停止，那么它会一直循环下去。写法很简单。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"again!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>loop的用处是它可以有返回值</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="keyword">loop</span> &#123;</span><br><span class="line">  counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">    <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>while循环是当条件成立时进入循环。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> number != <span class="number">0</span> &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>当我们需要遍历数组时，可以使用for循环。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> a.iter() &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"the value is: &#123;&#125;"</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上，是Rust的一些基本概念。和其他的编程语言大同小异，记得一些特殊的地方就好，例如变量的不可变性。我们还有一些数据类型没有涉及，比如vector，String等，这些会在后面详细讲解。</p>
<p>至此，我已经又向下挖了一层了。不知道你入坑了没有？已经入坑的同学还请麻烦帮忙往外刨（分）土（享）。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：智能指针</title>
    <url>/2020/03/09/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<p>在了解了Rust中的所有权、所有权借用、生命周期这些概念后，相信各位坑友对Rust已经有了比较深刻的认识了，今天又是一个连环坑，我们一起来把智能指针刨出来，一探究竟。<a id="more"></a></p>
<p>智能指针是Rust中一种特殊的数据结构。它与普通指针的本质区别在于普通指针是对值的借用，而智能指针通常拥有对数据的所有权。在Rust中，如果你想要在堆内存中定义一个对象，并不是像Java中那样直接new一个，也不是像C语言中那样需要手动malloc函数来分配内存空间。Rust中使用的是<code>Box::new</code>来对数据进行封箱，而<code>Box&lt;T&gt;</code>就是我们今天要介绍的智能指针之一。除了<code>Box&lt;T&gt;</code>之外，Rust标准库中提供的智能指针还有<code>Rc&lt;T&gt;</code>、<code>Ref&lt;T&gt;</code>、<code>RefCell&lt;T&gt;</code>等等。在详细介绍之前，我们还是先了解一下智能指针的基本概念。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>我们说Rust的智能指针是一种特殊的数据结构，那么它特殊在哪呢？它与普通数据结构的区别在于智能指针实现了<code>Deref</code>和<code>Drop</code>这两个traits。实现<code>Deref</code>可以使智能指针能够解引用，而实现<code>Drop</code>则使智能指针具有自动析构的能力。</p>
<h4 id="Deref"><a href="#Deref" class="headerlink" title="Deref"></a>Deref</h4><p>Deref有一个特性是强制隐式转换：<strong>如果一个类型T实现了Deref&lt;Target=U&gt;，则该类型T的引用在应用的时候会被自动转换为类型U</strong>。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = Rc::new(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x.chars());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你查看Rc的源码，会发现它并没有实现chars()方法，但我们上面这段代码却可以直接调用，这是因为Rc实现了Deref。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[stable(feature = <span class="meta-string">"rust1"</span>, since = <span class="meta-string">"1.0.0"</span>)]</span></span><br><span class="line"><span class="keyword">impl</span>&lt;T: ?<span class="built_in">Sized</span>&gt; Deref <span class="keyword">for</span> Rc&lt;T&gt; &#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Target</span></span> = T;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[inline(always)]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">deref</span></span>(&amp;<span class="keyword">self</span>) -&gt; &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.inner().value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就使得智能指针在使用时被自动解引用，像是不存在一样。</p>
<p>Deref的内部实现是这样的：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[lang = <span class="meta-string">"deref"</span>]</span></span><br><span class="line"><span class="meta">#[doc(alias = <span class="meta-string">"*"</span>)]</span></span><br><span class="line"><span class="meta">#[doc(alias = <span class="meta-string">"&amp;*"</span>)]</span></span><br><span class="line"><span class="meta">#[stable(feature = <span class="meta-string">"rust1"</span>, since = <span class="meta-string">"1.0.0"</span>)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Deref</span></span> &#123;</span><br><span class="line">    <span class="comment">/// The resulting type after dereferencing.</span></span><br><span class="line">    <span class="meta">#[stable(feature = <span class="meta-string">"rust1"</span>, since = <span class="meta-string">"1.0.0"</span>)]</span></span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Target</span></span>: ?<span class="built_in">Sized</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Dereferences the value.</span></span><br><span class="line">    <span class="meta">#[must_use]</span></span><br><span class="line">    <span class="meta">#[stable(feature = <span class="meta-string">"rust1"</span>, since = <span class="meta-string">"1.0.0"</span>)]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">deref</span></span>(&amp;<span class="keyword">self</span>) -&gt; &amp;Self::Target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[lang = <span class="meta-string">"deref_mut"</span>]</span></span><br><span class="line"><span class="meta">#[doc(alias = <span class="meta-string">"*"</span>)]</span></span><br><span class="line"><span class="meta">#[stable(feature = <span class="meta-string">"rust1"</span>, since = <span class="meta-string">"1.0.0"</span>)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">DerefMut</span></span>: Deref &#123;</span><br><span class="line">    <span class="comment">/// Mutably dereferences the value.</span></span><br><span class="line">    <span class="meta">#[stable(feature = <span class="meta-string">"rust1"</span>, since = <span class="meta-string">"1.0.0"</span>)]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">deref_mut</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; &amp;<span class="keyword">mut</span> Self::Target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DerefMut和Deref类似，只不过它是返回可变引用的。</p>
<h4 id="Drop"><a href="#Drop" class="headerlink" title="Drop"></a>Drop</h4><p>Drop对于智能指针非常重要，它是在智能指针被丢弃时自动执行一些清理工作，这里所说的清理工作并不仅限于释放堆内存，还包括一些释放文件和网络连接等工作。之前我总是把Drop理解成Java中的GC，随着对它的深入了解后，我发现它比GC要强大许多。</p>
<p>Drop的内部实现是这样的：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[lang = <span class="meta-string">"drop"</span>]</span></span><br><span class="line"><span class="meta">#[stable(feature = <span class="meta-string">"rust1"</span>, since = <span class="meta-string">"1.0.0"</span>)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Drop</span></span> &#123;</span><br><span class="line">    <span class="meta">#[stable(feature = <span class="meta-string">"rust1"</span>, since = <span class="meta-string">"1.0.0"</span>)]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">drop</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里只有一个drop方法，实现了Drop的结构体，在消亡之前，都会调用drop方法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::ops::<span class="built_in">Drop</span>;</span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span>(<span class="built_in">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="built_in">Drop</span> <span class="keyword">for</span> S &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">drop</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"drop &#123;&#125;"</span>, <span class="keyword">self</span>.<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = S(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"create x: &#123;:?&#125;"</span>, x);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> y = S(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"create y: &#123;:?&#125;"</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码的执行结果为</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1583204435/Blog/rust/11/rust11-1.png" alt="结果"></p>
<p>可以看到x和y在生命周期结束时都去执行了drop方法。</p>
<p>对智能指针的基本概念就先介绍到这里，下面我们进入正题，具体来看看每个智能指针都有什么特点吧。</p>
<h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box<t></t></h3><p>前面我们已经提到了Box<t>在Rust中是用来在堆内存中保存数据使用的。它的使用方法非常简单：</t></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">Box</span>::new(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x.chars())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看一下<code>Box::new</code>的源码</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[stable(feature = <span class="meta-string">"rust1"</span>, since = <span class="meta-string">"1.0.0"</span>)]</span></span><br><span class="line"><span class="meta">#[inline(always)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(x: T) -&gt; <span class="built_in">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">box</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到这里只有一个box关键字，这个关键字是用来进行堆内存分配的，它只能在Rust源码内部使用。box关键字会调用Rust内部的exchange_malloc和box_free方法来管理内存。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[cfg(not(test))]</span></span><br><span class="line"><span class="meta">#[lang = <span class="meta-string">"exchange_malloc"</span>]</span></span><br><span class="line"><span class="meta">#[inline]</span></span><br><span class="line"><span class="keyword">unsafe</span> <span class="function"><span class="keyword">fn</span> <span class="title">exchange_malloc</span></span>(size: <span class="built_in">usize</span>, align: <span class="built_in">usize</span>) -&gt; *<span class="keyword">mut</span> <span class="built_in">u8</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> size == <span class="number">0</span> &#123;</span><br><span class="line">        align <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="built_in">u8</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> layout = Layout::from_size_align_unchecked(size, align);</span><br><span class="line">        <span class="keyword">let</span> ptr = alloc(layout);</span><br><span class="line">        <span class="keyword">if</span> !ptr.is_null() &#123;</span><br><span class="line">            ptr</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handle_alloc_error(layout)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg_attr(not(test), lang = <span class="meta-string">"box_free"</span>)]</span></span><br><span class="line"><span class="meta">#[inline]</span></span><br><span class="line"><span class="keyword">pub</span>(<span class="keyword">crate</span>) <span class="keyword">unsafe</span> <span class="function"><span class="keyword">fn</span> <span class="title">box_free</span></span>&lt;T: ?<span class="built_in">Sized</span>&gt;(ptr: Unique&lt;T&gt;) &#123;</span><br><span class="line">    <span class="keyword">let</span> ptr = ptr.as_ptr();</span><br><span class="line">    <span class="keyword">let</span> size = size_of_val(&amp;*ptr);</span><br><span class="line">    <span class="keyword">let</span> align = min_align_of_val(&amp;*ptr);</span><br><span class="line">    <span class="comment">// We do not allocate for Box&lt;T&gt; when T is ZST, so deallocation is also not necessary.</span></span><br><span class="line">    <span class="keyword">if</span> size != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> layout = Layout::from_size_align_unchecked(size, align);</span><br><span class="line">        dealloc(ptr <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="built_in">u8</span>, layout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Rc"><a href="#Rc" class="headerlink" title="Rc"></a>Rc<t></t></h3><p>在前面的学习中，我们知道Rust中一个值在同一时间只能有一个变量拥有其所有权，但有时我们可能会需要多个变量拥有所有权，例如在图结构中，两个图可能对同一条边拥有所有权。</p>
<p>对于这样的情况，Rust为我们提供了智能指针Rc<t>（reference counting）来解决共享所有权的问题。每当我们通过Rc共享一个所有权时，引用计数就会加一。当引用计数为0时，该值才会被析构。</t></p>
<p>Rc<t>是单线程引用计数指针，不是线程安全类型。</t></p>
<p>我们还是通过一个简单的例子来看一下Rc<t>的应用吧。（示例来自<a href="https://doc.rust-lang.org/book/ch15-04-rc.html" target="_blank" rel="noopener">the book</a>）</t></p>
<p>如果我们想要造一个“双头”的链表，如下图所示，3和4都指向5。我们先来尝试使用Box实现。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1583289009/Blog/rust/11/rust11-2.svg" alt="双头链表"></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">List</span></span> &#123;</span><br><span class="line">    Cons(<span class="built_in">i32</span>, <span class="built_in">Box</span>&lt;List&gt;),</span><br><span class="line">    Nil,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons, Nil&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = Cons(<span class="number">5</span>,</span><br><span class="line">                 <span class="built_in">Box</span>::new(Cons(<span class="number">10</span>,</span><br><span class="line">                               <span class="built_in">Box</span>::new(Nil))));</span><br><span class="line">    <span class="keyword">let</span> b = Cons(<span class="number">3</span>, <span class="built_in">Box</span>::new(a));</span><br><span class="line">    <span class="keyword">let</span> c = Cons(<span class="number">4</span>, <span class="built_in">Box</span>::new(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码在编译时就会报错，因为a绑定给了b以后就无法再绑定给c了。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1583289016/Blog/rust/11/rust11-3.png" alt="Box无法共享所有权"></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">List</span></span> &#123;</span><br><span class="line">    Cons(<span class="built_in">i32</span>, Rc&lt;List&gt;),</span><br><span class="line">    Nil,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons, Nil&#125;;</span><br><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = Rc::new(Cons(<span class="number">5</span>, Rc::new(Cons(<span class="number">10</span>, Rc::new(Nil)))));</span><br><span class="line">    <span class="keyword">let</span> b = Cons(<span class="number">3</span>, Rc::clone(&amp;a));</span><br><span class="line">    <span class="keyword">let</span> c = Cons(<span class="number">4</span>, Rc::clone(&amp;a));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"count a &#123;&#125;"</span>, Rc::strong_count(&amp;a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时我们可以看到a的引用计数是3，这是因为这里计算的是节点5的引用计数，而a本身也是对5的一次绑定。这种通过clone方法共享所有权的引用称作<strong>强引用</strong>。</p>
<p>Rust还为我们提供了另一种智能指针Weak<t>，你可以把它当作是Rc<t>的另一个版本。它提供的引用属于<strong>弱引用</strong>。它共享的指针没有所有权。但他可以帮助我们有效的避免循环引用。</t></t></p>
<h3 id="RefCell"><a href="#RefCell" class="headerlink" title="RefCell"></a>RefCell<t></t></h3><p>前文中我们聊过变量的可变性和不可变性，主要是针对变量的。按照前面所讲的，对于结构体来说，我们也只能控制它的整个实例是否可变。实例的具体某个成员是否可变我们是控制不了的。但在实际开发中，这样的场景也是比较常见的。比如我们有一个User结构体：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    id: <span class="built_in">i32</span>,</span><br><span class="line">    name: <span class="built_in">str</span>,</span><br><span class="line">    age: <span class="built_in">u8</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通常情况下，我们只能修改一个人的名称或者年龄，而不能修改用户的id。如果我们把User的实例设置成了可变状态，那就不能保证别人不会去修改id。</p>
<p>为了应对这种情况，Rust为我们提供了<code>Cell&lt;T&gt;</code>和<code>RefCell&lt;T&gt;</code>。它们本质上不属于智能指针，而是可以提供内部可变性的容器。内部可变性实际上是一种设计模式，它的内部是通过一些<code>unsafe</code>代码来实现的。</p>
<p>我们先来看一下<code>Cell&lt;T&gt;</code>的使用方法吧。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cell::Cell;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span> &#123;</span><br><span class="line">    x: <span class="built_in">u32</span>,</span><br><span class="line">    y: Cell&lt;<span class="built_in">u32</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> foo = Foo &#123; x: <span class="number">1</span>, y: Cell::new(<span class="number">3</span>)&#125;;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">1</span>, foo.x);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">3</span>, foo.y.get());</span><br><span class="line">    foo.y.set(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>, foo.y.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以使用Cell的set/get方法来设置/获取起内部的值。这有点像我们在Java实体类中的setter/getter方法。这里有一点需要注意：<code>Cell&lt;T&gt;</code>中包裹的T必须要实现Copy才能够使用get方法，如果没有实现Copy，则需要使用Cell提供的get_mut方法来返回可变借用，而set方法在任何情况下都可以使用。由此可见Cell并没有违反借用规则。</p>
<p>对于没有实现Copy的类型，使用<code>Cell&lt;T&gt;</code>还是比较不方便的，还好Rust还提供了<code>RefCell&lt;T&gt;</code>。话不多说，我们直接来看代码。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = RefCell::new(<span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x.borrow());</span><br><span class="line">    x.borrow_mut().push(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x.borrow());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面这段代码中我们可以观察到<code>RefCell&lt;T&gt;</code>的borrow_mut和borrow方法对应了<code>Cell&lt;T&gt;</code>中的set和get方法。</p>
<p><code>RefCell&lt;T&gt;</code>和<code>Cell&lt;T&gt;</code>还有一点区别是：<code>Cell&lt;T&gt;</code>没有运行时开销（不过也不要用它包裹大的数据结构），而<code>RefCell&lt;T&gt;</code>是有运行时开销的，这是因为使用<code>RefCell&lt;T&gt;</code>时需要维护一个借用检查器，如果违反借用规则，则会引起线程恐慌。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于智能指针我们就先介绍这么多，现在我们简单总结一下。Rust的智能指针为我们提供了很多有用的功能，智能指针的一个特点就是实现了<code>Drop</code>和<code>Deref</code>这两个trait。其中<code>Drop</code>trait中提供了drop方法，在析构时会去调用。<code>Deref</code>trait提供了自动解引用的能力，让我们在使用智能指针的时候不需要再手动解引用了。</p>
<p>接着我们分别介绍了几种常见的智能指针。<code>Box&lt;T&gt;</code>可以帮助我们在堆内存中分配值，<code>Rc&lt;T&gt;</code>为我们提供了多次借用的能力。<code>RefCell&lt;T&gt;</code>使内部可变性成为现实。</p>
<p>最后再多说一点，其实我们以前见到过的<code>String</code>和<code>Vec</code>也属于智能指针。</p>
<p>至于它们为什么属于智能指针，Rust又提供了哪些其他的智能指针呢？这里就留个坑吧，感兴趣的同学可以自己踩一下。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：核心概念</title>
    <url>/2019/10/13/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>如果说前面的坑我们一直在用小铲子挖的话，那么今天的坑就是用挖掘机挖的。<a id="more"></a></p>
<p>今天要介绍的是Rust的一个核心概念：Ownership。全文将分为什么是Ownership以及Ownership的传递类型两部分。</p>
<h3 id="什么是Ownership"><a href="#什么是Ownership" class="headerlink" title="什么是Ownership"></a>什么是Ownership</h3><p>每种编程语言都有自己的一套内存管理的方法。有些需要显式的分配和回收内存（如C），有些语言则依赖于垃圾回收器来回收不使用的内存（如Java）。而Rust不属于以上任何一种，它有一套自己的内存管理规则，叫做Ownership。</p>
<p>在具体介绍Ownership之前，我想要先声明一点。<a href="https://jackeyzhe.github.io/2019/10/08/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E5%B8%B8%E8%A7%84%E5%A5%97%E8%B7%AF/">Rust入坑指南：常规套路</a>一文中介绍的数据类型，其数据都是存储在栈中。而像String或一些自定义的复杂数据结构（我们以后会对它们进行详细介绍），其数据则存储在堆内存中。明确了这一点后，我们来看下Ownership的规则有哪些。</p>
<h4 id="Ownership的规则"><a href="#Ownership的规则" class="headerlink" title="Ownership的规则"></a>Ownership的规则</h4><ul>
<li>在Rust中，每一个值都有对应的变量，这个变量称为值的owner</li>
<li>一个值在某一时刻只能有一个owner</li>
<li>当owner超出作用域后，值会被销毁</li>
</ul>
<p>这三条规则非常重要，记住他们会帮助你更好的理解本文。</p>
<h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><p>Ownership的规则中，有一条是owner超过范围后，值会被销毁。那么owner的范围又是如何定义的呢？在Rust中，花括号通常是变量范围作用域的标志。最常见的在一个函数中，变量s的范围从定义开始生效，直到函数结束，变量失效。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;                      <span class="comment">// s is not valid here, it’s not yet declared</span></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"hello"</span>;   <span class="comment">// s is valid from this point forward</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// do stuff with s</span></span><br><span class="line">&#125;                      <span class="comment">// this scope is now over, and s is no longer valid</span></span><br></pre></td></tr></table></figure>
<p>这个这和其他大多数编程语言很像，对于大多数编程语言，都是从变量定义开始，为变量分配内存。而回收内存则是八仙过海各显神通。对于有依赖GC的语言来说，并不需要关心内存的回收。而有些语言则需要显式回收内存。显式回收就会存在一定的问题，比如忘记回收或者重复回收。为了对开发者更加友好，Rust使用自动回收内存的方法，即在变量超出作用域时，回收为该变量分配的内存。</p>
<h3 id="Ownership的移动"><a href="#Ownership的移动" class="headerlink" title="Ownership的移动"></a>Ownership的移动</h3><p>前面我们提到，花括号通常是变量作用域隔离的标志（即Ownership失效）。除了花括号以外，还有其他的一些情况会使Ownership发生变化，先来看两段代码。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = x;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"x: &#123;&#125;"</span>, x);</span><br></pre></td></tr></table></figure>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"s1: &#123;&#125;"</span>, s1);</span><br></pre></td></tr></table></figure>
<p><em>作者注：双冒号是Rust中函数引用的标志，上面的意思是引用String中的from函数，这个函数通常用来构建一个字符串对象。</em></p>
<p>这两段代码看起来唯一的区别就是变量的类型，第一段使用的是整数型，第二段使用的是字符串型。而执行结果却是第一段可以正常打印x的值，第二段却报错了。这是什么原因呢？</p>
<p>我们来分析一下代码。对于第一段代码，首先有个整数值5，赋给了变量x，然后把x的值copy了一份，又赋值给了y。最后我们成功打印x。看起来比较符合逻辑。实际上Rust也是这么操作的。</p>
<p>对于第二段代码我们想象中，也可以是这样的过程，但实际上Rust并不是这样做的。先来说原因：对于较大的对象来说，这样的复制是非常浪费空间和时间的。那么Rust中实际情况是怎么样呢？</p>
<p>首先，我们需要了解Rust中String类型的结构：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1570639634/Blog/rust/03/trpl04-01.svg" alt="String结构"></p>
<p>上图中左侧是String对象的结构，包括指向内容的指针、长度和容量。这里长度和容量相同，我们暂时先不关注。后面详细介绍String类型时会提到两者的区别。这部分内容都存储在栈内存中。右侧部分是字符串的内容，这部分存储在堆内存中。</p>
<p>有的朋友可能想到了，既然复制内容会造成资源浪费，那我只复制结构这部分好了，内容再多，我复制的内容长度也是可控的，而且也是在栈中复制，和整数类型类似。这个方法听起啦不错，我们来分析一下。按照上面这种说法，内存结构大概是这个样子。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1570721759/Blog/rust/03/trpl04-02.svg" alt="String-2"></p>
<p>这种会有什么问题呢？还记得Ownership的规则吗？owner超出作用域时，回收其数据所占用的内存。在这个例子中，当函数执行结束时，s1和s2同时超出作用域，那么上图中右侧这块内存就会被释放两次。这也会产生不可预知的bug。</p>
<p>Rust为了解决这一问题，在执行<code>let s2 = s1;</code>这句代码时，认为s1已经超出了作用域，即右侧的内容的owner已经变成了s2，也可以说s1的ownership转移给了s2。也就是下图所示的情况。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1570722292/Blog/rust/03/trpl04-03.svg" alt="String-real"></p>
<h4 id="另一种实现：clone"><a href="#另一种实现：clone" class="headerlink" title="另一种实现：clone"></a>另一种实现：clone</h4><p>如果你确实需要深度拷贝，即复制堆内存中的数据。Rust也可以做到，它提供了一个公共方法叫做clone。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1.clone();</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"s1 = &#123;&#125;, s2 = &#123;&#125;"</span>, s1, s2);</span><br></pre></td></tr></table></figure>
<p>clone的方法执行后，内存结构如下图：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1570722578/Blog/rust/03/trpl04-04.svg" alt="String-clone"></p>
<h4 id="函数间转移"><a href="#函数间转移" class="headerlink" title="函数间转移"></a>函数间转移</h4><p>前面我们聊到的是Ownership在String之间转移，在函数间也是一样的。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);  <span class="comment">// s 作用域开始</span></span><br><span class="line"></span><br><span class="line">    takes_ownership(s);             <span class="comment">// s's 的值进入函数</span></span><br><span class="line">                                    <span class="comment">// ... s在这里已经无效</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// s在这之前已经失效</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_ownership</span></span>(some_string: <span class="built_in">String</span>) &#123; <span class="comment">// some_string 作用域开始</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, some_string);</span><br><span class="line">&#125; <span class="comment">// some_string 超出作用域并调用了drop函数</span></span><br><span class="line">  <span class="comment">// 内存被释放</span></span><br></pre></td></tr></table></figure>
<p>那有没有办法在执行takes_ownership函数后使s继续生效呢？一般我们会想到在函数中将ownership还回来。然后很自然的就想到我们之前介绍的函数的返回值。既然传参可以转移ownership，那么返回值应该也可以。于是我们可以这样操作：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);     <span class="comment">// s2 comes into scope</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s2 = takes_and_gives_back(s1);  <span class="comment">// s1 被转移到函数中</span></span><br><span class="line">                                        <span class="comment">// takes_and_gives_back，</span></span><br><span class="line">    									<span class="comment">// 将ownership还给s2</span></span><br><span class="line">&#125; <span class="comment">// s2超出作用域，内存被回收，s1在之前已经失效</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// takes_and_gives_back 接收一个字符串然后返回一个</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_and_gives_back</span></span>(a_string: <span class="built_in">String</span>) -&gt; <span class="built_in">String</span> &#123; <span class="comment">// a_string 开始作用域</span></span><br><span class="line"></span><br><span class="line">    a_string  <span class="comment">// a_string 被返回，ownership转移到函数外</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样做是可以实现我们的需求，但是有点太麻烦了，幸好Rust也觉得这样很麻烦。它为我们提供了另一种方法：引用（<em>references</em>）。</p>
<h3 id="引用和借用"><a href="#引用和借用" class="headerlink" title="引用和借用"></a>引用和借用</h3><p>引用的方法很简单，只需要加一个<code>&amp;</code>符。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> len = calculate_length(&amp;s1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The length of '&#123;&#125;' is &#123;&#125;."</span>, s1, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">calculate_length</span></span>(s: &amp;<span class="built_in">String</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    s.len()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种形式可以在没有ownership的情况下访问某个值。其原理如下图：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1570724291/Blog/rust/03/trpl04-05.svg" alt="references"></p>
<p>这个例子和我们在前面写的例子很相似。仔细观察会发现一些端倪。主要有两点不同：</p>
<ol>
<li>在传入参数的时候，s1前面加了&amp;符。这意味着我们创建了一个s1的引用，它并不是数据的owner，因此在它超出作用域时也不会销毁数据。</li>
<li>函数在接收参数时，变量类型String前也加了&amp;符。这表示参数要接收的是一个字符串的引用对象。</li>
</ol>
<p>我们把函数中接收引用的参数称为借用。就像实际生活中我写完了作业，可以借给你抄一下，但它不属于你，抄完你还要还给我。（友情提示：非紧急情况不要抄作业）</p>
<p>另外还需要注意，我的作业可以借给你抄，但是你不能改我写的作业，我本来写对了你给我改错了，以后我还怎么借给你？所以，在calculate_length中，s是不可以修改的。</p>
<h4 id="可修改引用"><a href="#可修改引用" class="headerlink" title="可修改引用"></a>可修改引用</h4><p>如果我发现我写错了，让你帮我改一下怎么办？我授权给你，让你帮忙修改，你也需要表示能帮我修改就可以了。Rust也有办法。还记得我们前面介绍的可变变量和不可变变量吗？引用也是类似，我们可以使用mut关键字使引用可修改。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">    change(&amp;<span class="keyword">mut</span> s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change</span></span>(some_string: &amp;<span class="keyword">mut</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    some_string.push_str(<span class="string">", world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，我们就能在函数中对引用的值进行修改了。不过这里还要注意一点，在同一作用域内，对于同一个值，只能有一个可修改的引用。这也是因为Rust不想有并发修改数据的情况出现。</p>
<p>如果需要使用多个可修改引用，我们可以自己创建新的作用域：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// r1 超出作用域</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r2 = &amp;<span class="keyword">mut</span> s;</span><br></pre></td></tr></table></figure>
<p>另一个冲突就是“读写冲突”，即不可变引用和可变引用之间的限制。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = &amp;s; <span class="comment">// no problem</span></span><br><span class="line"><span class="keyword">let</span> r2 = &amp;s; <span class="comment">// no problem</span></span><br><span class="line"><span class="keyword">let</span> r3 = &amp;<span class="keyword">mut</span> s; <span class="comment">// BIG PROBLEM</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;, &#123;&#125;, and &#123;&#125;"</span>, r1, r2, r3);</span><br></pre></td></tr></table></figure>
<p>这样的代码在编译时也会报错。这是因为不可变引用不希望在被使用之前，其指向的值被修改。这里只要稍微处理一下就可以了：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = &amp;s; <span class="comment">// no problem</span></span><br><span class="line"><span class="keyword">let</span> r2 = &amp;s; <span class="comment">// no problem</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125; and &#123;&#125;"</span>, r1, r2);</span><br><span class="line"><span class="comment">// r1 和 r2 不再使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r3 = &amp;<span class="keyword">mut</span> s; <span class="comment">// no problem</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, r3);</span><br></pre></td></tr></table></figure>
<p>Rust编译器会在第一个print语句之后判断出r1和r2不会再被使用，此时r3还没有创建，它们的作用域不会有交集。所以这段代码是合法的。</p>
<h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><p>对于可操作指针的编程语言来讲，最令人头疼的问题也许就是空指针了。通常情况是，在回收内存以后，又使用了指向这块内存的指针。而Rust的编译器帮助我们避免了这个问题（再次感谢Rust编译器）。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> reference_to_nothing = dangle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dangle</span></span>() -&gt; &amp;<span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">    &amp;s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看一下上面这个例子。在dangle函数中，返回值是字符串s的引用。但是在函数结束时，s的内存已经被回收了。所以s的引用就成了空指针。此时就会报expected lifetime parameter的编译错误。</p>
<h3 id="另一种引用：Slice"><a href="#另一种引用：Slice" class="headerlink" title="另一种引用：Slice"></a>另一种引用：Slice</h3><p>除了引用之外，还有另一种没有ownership的数据类型叫做Slice。Slice是一种使用集合中一段序列的引用。</p>
<p>这里通过一个简单的例子来说明Slice的使用方法。假设我们需要得到给你字符串中的第一个单词。你会怎么做？其实很简单，遍历每个字符，如果遇到空格，就返回之前遍历过的字符的集合。</p>
<p>对字符串的遍历方法我来剧透一下，as_bytes函数可以把字符串分解成字节数组，iter是返回集合中每个元素的方法，enumerate是提取这些元素，并且返回(元素位置,元素值)这样的二元组的方法。这样是不是可以写出来了。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_word</span></span>(s: &amp;<span class="built_in">String</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> bytes = s.as_bytes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.iter().enumerate() &#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b' '</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s.len()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来，感受下这个例子，虽然它返回的是第一个空格的位置，但是只要会字符串截取，还是可以达到目的的。不过不能剧透字符串截取了，不然暴露不出问题。</p>
<p>这么写的问题在哪呢？来看一下main函数。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello world"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> word = first_word(&amp;s);</span><br><span class="line"></span><br><span class="line">    s.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里在获取空格位置后，对字符串s做了一个clear操作，也就是把s清空了。但word仍然是5，此时我们再去对截取s的前5个字符就会出问题。可能有人认为自己不会这么蠢，但是你愿意相信你的好（zhu）伙（dui）伴（you）也不会这么做吗？我是不相信的。那怎么办呢？这时候slice就要登场了。</p>
<p>使用slice可以获取字符串的一段字符序列。例如<code>&amp;s[0..5]</code>可以获取字符串s的前5个字符。其中0为起始字符的位置下标，5是结束字符位置的下标加1。也就是说slice的区间是一个左闭右开区间。</p>
<p>slice还有一些规则：</p>
<ul>
<li>如果起始位置是0，则可以省略。也就是说<code>&amp;s[0..2]</code>和<code>&amp;s[..2]</code>等价</li>
<li>如果起始位置是集合序列末尾位置，也可以省略。即<code>&amp;s[3..len]</code>和<code>&amp;s[3..]</code>等价</li>
<li>根据以上两条，我们还可以得出<code>&amp;s[0..len]</code>和<code>&amp;s[..]</code>等价</li>
</ul>
<p>这里需要注意的是，我们截取字符串时，其边界必须是UTF-8字符。</p>
<p>有了slice，就可以解决我们的问题了</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_word</span></span>(s: &amp;<span class="built_in">String</span>) -&gt; &amp;<span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> bytes = s.as_bytes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.iter().enumerate() &#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b' '</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;s[<span class="number">0</span>..i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;s[..]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们在main函数中对s执行clear操作时，编译器就不同意了。没错，又是万能的编译器。</p>
<p>除了slice除了可以作用于字符串以外，还可以作用于其他集合，例如：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> slice = &amp;a[<span class="number">1</span>..<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<p>关于集合，我们以后会有更加详细的介绍。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍的Ownership特性对于理解Rust来讲非常重要。我们介绍了什么是Ownership，Ownership的转移，以及不占用Ownership的数据类型Reference和Slice。</p>
<p>怎么样？是不是感觉今天的坑非常给力？如果之前在地下一层的话，那现在已经到地下三层了。所以请各位注意安全，有序降落。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：步步为营</title>
    <url>/2020/02/21/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E6%AD%A5%E6%AD%A5%E4%B8%BA%E8%90%A5/</url>
    <content><![CDATA[<p>俗话说：“测试写得好，奖金少不了。”<a id="more"></a></p>
<p>有经验的开发人员通常会通过单元测试来保证代码基本逻辑的正确性。如果你是一名新手开发者，并且还没体会到单元测试的好处，那么建议你先读一下我之前的一篇文章<a href="https://jackeyzhe.github.io/2018/09/04/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9C%B0%E4%BD%8D/">代码洁癖系列（七）：单元测试的地位</a>。</p>
<p>写单元测试一般需要三个步骤：</p>
<ol>
<li>准备测试用例，测试用例要能覆盖尽可能多的代码</li>
<li>执行需要测试的代码</li>
<li>判断结果，是否是你希望得到的结果</li>
</ol>
<p>了解了这些以后，我们就来看看在Rust中应该怎么写单元测试。</p>
<p>首先我们建立一个library项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cargo new adder --lib</span><br><span class="line">     Created library `adder` project</span><br></pre></td></tr></table></figure>
<p>然后在src/lib.rs文件中开始写测试代码</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">it_works</span></span>() &#123;</span><br><span class="line">        <span class="built_in">assert_eq!</span>(<span class="number">2</span> + <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时在命令行运行<code>cargo test</code>就会得到测试结果</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582124140/Blog/rust/09/rust9-1.png" alt="测试结果1"></p>
<p>可以看到，结果显示，Rust运行了一项测试并且测试通过。后面的Doc-tests我们先放下，以后再聊。</p>
<p>当然，这并不是我们常见的测试，在日常开发中，我们通常是先写我们的业务代码然后再对各个函数进行单元测试，最后还会对某个模块进行集成测试。那么我们就来模拟一下日常开发过程中应该如何来写测试。</p>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>我们仍然是用上面的项目，先来在src/lib.rs中写一段“业务代码”</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_two</span></span>(a: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    internal_adder(a, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">internal_adder</span></span>(a: <span class="built_in">i32</span>, b: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一段非常简单的代码，对外暴露的函数只是一个加2的功能，内部调用了一个两数相加的函数。现在我们就对这个内部函数做一个单元测试。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">internal</span></span>() &#123;</span><br><span class="line">        <span class="built_in">assert_eq!</span>(<span class="number">4</span>, internal_adder(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在测试模块中，如果想要使用我们业务代码中的函数，就需要通过<code>use super::*;</code>将其引入可用范围。接着，还是执行<code>cargo test</code>，测试结果与刚才类似。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582125779/Blog/rust/09/rust9-2.png" alt="测试结果2"></p>
<p>测了半天全是通过的没什么意思，单元测试真正的作用是要发现代码中的问题，所以我们来尝试一个错误的试一下。假设我们希望2+2等于5。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582127769/Blog/rust/09/rust9-3.png" alt="测试结果3"></p>
<p>这里我们的assert_eq!左右不相等，引起了线程恐慌，因此导致测试失败。结果中给出了失败的原因，引起失败的位置，并且有一句提示：<code>note: run with RUST_BACKTRACE=1 environment variable to display a backtrace.</code> 我们按照这个提示，设置变量RUST_BACKTRACE=1，此时再执行<code>cargo test</code>。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582128445/Blog/rust/09/rust9-4.png" alt="错误栈"></p>
<p>Rust就会将错误栈打印出来，根据结果提示，这并不是完整的错误栈，我们还可以将RUST_BACKTRACE设置为full来查看更加详细的信息。这里我就不做演示了。</p>
<h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><p>接下来我们再演示一下集成测试。我们通常将集成测试单独放到一个目录中，在lib.rs文件中，rust识别测试mod的名称是tests，同样的，我们在src下创建tests目录。<strong>tests</strong>目录下就是我们的所有集成测试代码。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582129708/Blog/rust/09/rust9-5.png" alt="测试目录"></p>
<p>如图，integration_test是我们测试代码的文件，common目录下的mod.rs文件中是一些集成测试必要的配置。这里我们只是放了一个空的setup函数。</p>
<p>在集成测试中，我们就要像正常他人使用我们的代码时那样来进行测试，首先需要将我们的mod引入到可用范围，当然还需要加上common的mod。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> adder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mod</span> common;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tests]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">it_adds_two</span></span>() &#123;</span><br><span class="line">    common::setup();</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">4</span>, adder::add_two(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着就可以测试我们对外暴露的函数了。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582130013/Blog/rust/09/rust9-6.png" alt="集成测试"></p>
<p>ok，集成测试的方法我们也掌握了。现在来看看一直被我们忽略的Doc-tests吧。</p>
<h3 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h3><p>我们已经知道，Rust中的注释是双斜线<code>//</code>，像我们刚刚写的library代码，如果想要把它发布到crate.io上让别人使用，那么我们就需要增加相应的文档，这里文档的每行都应该是三斜线<code>///</code>开头，而文档中也应该放一些例子供他人参考。（注意：下面注释中的代码需要包含在markdown的代码块格式中，这里写上三个`的话文档格式会乱掉。。。运行测试代码时请自行补充）</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Adds two to the number given.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// # Examples</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// </span></span><br><span class="line"><span class="comment">/// let arg = 5;</span></span><br><span class="line"><span class="comment">/// let answer = adder::add_two(arg);</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// assert_eq!(7, answer);</span></span><br><span class="line"><span class="comment">/// </span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_two</span></span>(a: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    internal_adder(a, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我给add_two函数加上了文档，我们再次执行<code>cargo test</code>命令。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582131276/Blog/rust/09/rust9-7.png" alt="文档测试"></p>
<p>现在我们就明白了，Doc-tests测试就是运行我们文档中的例子。</p>
<h3 id="常用特性"><a href="#常用特性" class="headerlink" title="常用特性"></a>常用特性</h3><p>到目前为止，我们已经知道了在Rust中如何写测试代码了。接下来我们再来了解几个比较常用的特性。</p>
<h4 id="运行指定的测试代码"><a href="#运行指定的测试代码" class="headerlink" title="运行指定的测试代码"></a>运行指定的测试代码</h4><p>我们在开发过程中肯定不会每次都去跑全量的单元测试，那样太浪费时间了。通常是我们开发完一个功能之后，编写对应的单元测试，然后单独跑这个测试。那么Rust中能不能单独跑一个单元测试呢？答案是肯定的。</p>
<p>相信细心的同学已经发现了，Rust测试结果中，是针对每个测试单独统计结果，并且每个测试都有自己的名字，像我们前面写的<code>it_works</code>和<code>internal</code>。假设我们的代码中同时存在这两个函数，如果你想要单独跑internal这一个测试，就可以使用<code>cargo test internal</code>命令。</p>
<p>你也可以使用这种方法来执行多个名称类似的测试，假如我们有名称为<code>internal_a</code>的测试，那么执行<code>cargo test internal</code>命令时它也会被执行。</p>
<h4 id="忽略某个测试"><a href="#忽略某个测试" class="headerlink" title="忽略某个测试"></a>忽略某个测试</h4><p>当我们有一个测试执行时间非常长的时候，我们一般不会轻易去执行，这时如果你想要执行多个测试，除了用我们上面提到的方法，去指定不同的名称列表以外。还可以把这个测试忽略掉。</p>
<p>现在我不想执行<code>internal</code>测试了，只需要对代码进行如下改动：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="meta">#[ignore]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">internal</span></span>() &#123;</span><br><span class="line">  <span class="built_in">assert_eq!</span>(<span class="number">4</span>, internal_adder(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时再来运行测试，结果如图所示。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582212742/Blog/rust/09/rust9-8.png" alt="忽略测试"></p>
<p>我们发现此时<code>internal</code>测试已经被忽略了。</p>
<h4 id="测试异常情况"><a href="#测试异常情况" class="headerlink" title="测试异常情况"></a>测试异常情况</h4><p>除了测试代码逻辑正常的情况，我们有时还需要测试一些异常情况，比如接收到非法参数时程序能否返回我们希望看到的异常。</p>
<p>我们首先来看一下如何测试程序返回异常信息。</p>
<p>Rust为我们提供了一个叫做should_panic的注解。我们可以使用它来测试程序是否返回异常：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_two</span></span>(a: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    internal_adder(a, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">internal_adder</span></span>(a: <span class="built_in">i32</span>, b: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">panic!</span>(<span class="string">"a should bigger than 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="meta">#[should_panic]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">internal</span></span>() &#123;</span><br><span class="line">        <span class="built_in">assert_eq!</span>(<span class="number">4</span>, internal_adder(-<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时我们运行测试时就会发现internal测试通过，因为它发生了线程恐慌，这是我们希望看到的结果。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582213602/Blog/rust/09/rust9-9.png" alt="测试异常"></p>
<p>另外，我们还可以再指定我们具体期望的异常，那么就可以在should_panic后面加上expected参数。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="meta">#[should_panic(expected = <span class="meta-string">"a should be positive"</span>)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">internal</span></span>() &#123;</span><br><span class="line">  <span class="built_in">assert_eq!</span>(<span class="number">4</span>, internal_adder(-<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大家可以自行运行一下这段测试代码看看效果。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>文中我向大家介绍了在Rust中如何进行单元测试、集成测试，还有比较特殊的文档测试。最后还介绍了3种常见的测试特性。</p>
<p>最后想友情提醒大家一下，在开发过程中，不要写完一堆功能后再开始写单元测试，这时你很有可能会因为测试代码过于繁琐而放弃。建议大家每写一个功能，随即开始进行单元测试，这样也能立即看到自己的代码的执行效果，提高成就感。这就是所谓的“步步为营”。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：有条不紊</title>
    <url>/2019/11/03/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E6%9C%89%E6%9D%A1%E4%B8%8D%E7%B4%8A/</url>
    <content><![CDATA[<p>随着我们的坑越来越多，越来越大，我们必须要对各种坑进行管理了。Rust为我们提供了一套坑务管理系统，方便大家有条不紊的寻找、管理、填埋自己的各种坑。<a id="more"></a></p>
<p>Rust提供给我们一些管理代码的特性：</p>
<ul>
<li><strong>Packages：</strong>Cargo的一个特性，帮助你进行构建、测试和共享crates</li>
<li><strong>Crates：</strong>生成库或可执行文件的模块树</li>
<li><strong>Modules</strong>和<strong>use：</strong>用于控制代码组织、范围和隐私路径</li>
<li><strong>Paths：</strong>struct、function和module的命名方法</li>
</ul>
<p>下面我们来具体看一下这些特性是如何帮助我们组织代码的。</p>
<h3 id="Packages和Crates"><a href="#Packages和Crates" class="headerlink" title="Packages和Crates"></a>Packages和Crates</h3><p>package可以理解为一个项目，而crate可以理解为一个代码库。crate可以供多个项目使用。那我们的项目中package和crate是怎么定义的呢？</p>
<p>之前我们总是通过IDEA来新建项目，今天我们换个方法，在命令行中使用cargo命令来创建。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cargo new hello-world</span><br><span class="line">     Created binary (application) `hello-world` package</span><br><span class="line">$ ls hello-world</span><br><span class="line">Cargo.toml</span><br><span class="line">src</span><br><span class="line">$ ls hello-world/src</span><br><span class="line">main.rs</span><br></pre></td></tr></table></figure>
<p>可以看到，我们使用cargo创建项目后，只有两个文件，Cargo.toml和src目录下的main.rs。</p>
<p>Cargo.toml是管理项目依赖的文件，每个Cargo.toml定义一个package。main.rs文件的存在表示package中包含一个二进制crate，它是二进制crate的入口文件，crate的名称和package相同。如果src目录下存在lib.rs文件，说明package中包含一个和package名称相同的库crate。</p>
<p>一个package可以包含多个二进制crate，它们由src/lib目录下的文件定义。如果你的项目想引用他人的crate，可以在Cargo.toml文件中增加依赖。每个crate都有自己的命名空间，因此如果你引入了一个crate里面定义了一个名为hello的函数，你仍然可以在自己的crate中再定义一个名为hello的函数。</p>
<h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>Module帮助我们在crate中组织代码，同时Module也是封装代码的重要工具。接下来还是通过一个栗子来详细了解Module。</p>
<p>前面我们说过，库crate定义在src/lib.rs文件中。这里首先创建一个包含了库crate的package:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new --lib restaurant</span><br></pre></td></tr></table></figure>
<p>然后在src中定义一些module和函数。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">seat_at_table</span></span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mod</span> serving &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">take_order</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">serve_order</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">take_payment</span></span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到我们使用关键字<code>mod</code>来定义Module，Module中可以继续定义Module或函数。这样我们就可以比较方便的把相关的函数放到一个Module中，并为Module命名，提高代码的可读性。另外Module中还可以定义struct和枚举。由于Module中可以嵌套定义子Module，最终我们定义出来的代码类似一个树形。</p>
<p>那么如何访问Module中的函数呢？这就要提到Path了。这部分比较好理解，Module树相当于系统文件目录，而Path则是目录的路径。</p>
<h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>这里的路径和系统文件路径一样，都分为相对路径和绝对路径两种。其中绝对路径必须以<code>crate</code>开头，因为它代码整个Module树的根节点。路径之间使用的是双冒号来表示引用。</p>
<p>现在我来尝试在一个函数中调用add_to_waitlist函数：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1572276180/Blog/rust/05/rust5-1.png" alt="05-1"></p>
<p>可以看到这里不管用绝对路径还是相对路径都报错了，错误信息是模块hosting和函数add_to_waitlist是私有（private）的。我们先暂时放下这个错误，根据这里的错误提示，我们知道了当我们定义一个module时，默认情况下是私有的，我们可以通过这种方法来封装一些代码的实现细节。</p>
<p>OK，回到刚才的问题，那我们怎么才能解决这个错误呢？地球人都知道应该把对应的模块与函数公开出来。Rust中标识模块或函数为公有的关键字是<code>pub</code>。</p>
<p>我们用pub关键字来把对应的模块和函数公开</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1572277111/Blog/rust/05/rust5-2.png" alt="05-2"></p>
<p>这样我们就可以在module外来调用module内的函数了。</p>
<h4 id="Rust中的私有规则"><a href="#Rust中的私有规则" class="headerlink" title="Rust中的私有规则"></a>Rust中的私有规则</h4><p>现在我们再回过头来看Rust中的一些私有规则，如果你试验了上面的例子，也许会有一些发现。</p>
<p>Rust中私有规则适用于所有项（函数、方法、结构体、枚举、模块和常量），它们默认都是私有的。父模块中的项不能访问子模块中的私有项，而子模块中的项可以访问其祖辈（父模块及以上）中的项。</p>
<h4 id="Struct和Enum的私有性"><a href="#Struct和Enum的私有性" class="headerlink" title="Struct和Enum的私有性"></a>Struct和Enum的私有性</h4><p>Struct和Enum的私有性略有不同，对于Struct来讲，我可以只将其中的某些字段设置为公有的，其他字段可以仍然保持私有。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> back_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Breakfast</span></span> &#123;</span><br><span class="line">        <span class="keyword">pub</span> toast: <span class="built_in">String</span>,</span><br><span class="line">        seasonal_fruit: <span class="built_in">String</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">impl</span> Breakfast &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">summer</span></span>(toast: &amp;<span class="built_in">str</span>) -&gt; Breakfast &#123;</span><br><span class="line">            Breakfast &#123;</span><br><span class="line">                toast: <span class="built_in">String</span>::from(toast),</span><br><span class="line">                seasonal_fruit: <span class="built_in">String</span>::from(<span class="string">"peaches"</span>),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">    <span class="comment">// Order a breakfast in the summer with Rye toast</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> meal = back_of_house::Breakfast::summer(<span class="string">"Rye"</span>);</span><br><span class="line">    <span class="comment">// Change our mind about what bread we'd like</span></span><br><span class="line">    meal.toast = <span class="built_in">String</span>::from(<span class="string">"Wheat"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I'd like &#123;&#125; toast please"</span>, meal.toast);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而对于Enum，如果一个Enum是公有的，那么它的所有值都是公有的，因为私有的值没有意义。</p>
<h4 id="相对路径和绝对路径的选择"><a href="#相对路径和绝对路径的选择" class="headerlink" title="相对路径和绝对路径的选择"></a>相对路径和绝对路径的选择</h4><p>这种选择不存在正确与否，只有是否合适。因此这里我们只是举例说明一些合适的情况。</p>
<p>我们仍以上述代码为例，如果我们可以预见到以后需要把front_of_house模块和eat_at_restaurant函数移动到一个新的名为customer_experience的模块中，就应该使用相对路径，这样我们就对其进行调整。</p>
<p>类似的，如果我们需要把eat_at_restaurant函数移动到dining模块中，那么我们选择绝对路径的话就不需要做调整。</p>
<p>综上，我们需要对代码的优化方向有一些前瞻性，并以此来判断需要使用相对路径还是绝对路径。</p>
<p>相对路径除了以当前模块开头外，还可以以super开头。它表示的是父级模块，类似于文件系统中的两个点(<code>..</code>)。</p>
<h3 id="use关键字"><a href="#use关键字" class="headerlink" title="use关键字"></a>use关键字</h3><p>绝对路径和相对路径可以帮助我们找到指定的函数，但用起来也非常的麻烦，每次都要写一大长串路径。还好Rust为我们提供了use关键字。在很多语言中都有import关键字，这里的use就有些类似于import。不过Rust会提供更加丰富的用法。</p>
<p>use最基本的用法就是引入一个路径。我们就可以更加方便的使用这个路径下的一些方法：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::front_of_house::hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个路径可以是绝对路径，也可以是相对路径，但如果是相对路径，就必须要以self开头。上面的例子可以写成：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> self::front_of_house::hosting;</span><br></pre></td></tr></table></figure>
<p>这与我们前面讲的相对路径似乎有些矛盾，Rust官方说会在之后的版本处理这个问题。</p>
<p>use还可以更进一步，直接指向具体的函数或Struct或Enum。但习惯上我们使用函数时，use后面使用的是路径，这样可以在调用函数时知道它属于哪个模块；而在使用Struct/Enum时，则具体指向它们。当然，这只是官方建议的编程习惯，你也可以有自己的习惯，不过最好还是按照官方推荐或者是项目约定的规范比较好。</p>
<p>对于同一路径下的某些子模块，在引入时可以合并为一行，例如：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">use</span> std::&#123;cmp::Ordering, io&#125;;</span><br></pre></td></tr></table></figure>
<p>有时我们还会遇到引用不同包下相同名称Struct的情况，这时有两种解决办法，一是不指定到具体的Struct，在使用时加上不同的路径；二是使用<code>as</code>关键字，为Struct起一个别名。</p>
<p>方法一：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">function1</span></span>() -&gt; fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">function2</span></span>() -&gt; io::<span class="built_in">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::<span class="built_in">Result</span>;</span><br><span class="line"><span class="keyword">use</span> std::io::<span class="built_in">Result</span> <span class="keyword">as</span> IoResult;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">function1</span></span>() -&gt; <span class="built_in">Result</span> &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">function2</span></span>() -&gt; IoResult&lt;()&gt; &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要导入某个路径下的全部模块或函数，可以使用<code>*</code>来表示。当然我是非常不建议使用这种方法的，因为导入全部的话，如果出现名称冲突就会很难排查问题。</p>
<p>对于外部的依赖包，我们需要先在Cargo.toml文件中添加依赖，然后就可以在代码中使用use来引入依赖库中的路径。Rust提供了一些标准库，即std下的库。在使用这些标准库时是不需要添加依赖的。</p>
<p>有些同学看到这里可能要开始抱怨了，说好了介绍怎么拆分文件，到现在还是在一个文件里玩，这不是欺骗读者嘛。</p>
<p>别急，这就开始拆分。</p>
<h3 id="开始拆分"><a href="#开始拆分" class="headerlink" title="开始拆分"></a>开始拆分</h3><p>我们拿刚才的一段代码为例</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">seat_at_table</span></span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mod</span> serving &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">take_order</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">serve_order</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">take_payment</span></span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先我们可以把front_of_house模块下的内容拆分出去，需要在src目录下新建一个front_of_house.rs文件，然后把front_of_house模块下的内容写到文件中。lib.rs文件中，只需要声明front_of_house模块即可，不需要具体的定义。声明模块时，将花括号即内容改为分号就可以了。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house;</span><br></pre></td></tr></table></figure>
<p>然后我们可以继续拆分front_of_house模块下的hosting模块和serving模块，这时需要新建一个名为front_of_house的文件件，在该文件夹下放置要拆分的模块的同名文件，把模块定义的内容写在文件中，front_of_house.rs文件同样只保留声明即可。</p>
<p>拆分后的文件目录如图</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1572367091/Blog/rust/05/rust5-3.png" alt="rust05-3"></p>
<p>本文主要讲了Rust中Package、Crate、Module、Path的概念和用法，有了这些基础，我们后面才有可能开发一些比较大的项目。</p>
<p>ps：本文的代码示例均来自<a href="https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html" target="_blank" rel="noopener">the book</a>。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：朝生暮死</title>
    <url>/2020/03/02/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E6%9C%9D%E7%94%9F%E6%9A%AE%E6%AD%BB/</url>
    <content><![CDATA[<p>今天想和大家一起把我们之前挖的坑再刨深一些。在Java中，一个对象能存活多久全靠JVM来决定，程序员并不需要去关心对象的生命周期，但是在Rust中就大不相同，一个对象从生到死我们都需要掌握的很清楚。<a id="more"></a></p>
<p>在<a href="https://jackeyzhe.github.io/2019/10/13/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/">Rust入坑指南：核心概念</a>一文中我们介绍了Rust的几个核心概念：所有权（Ownership）、所有权转移和所有权借用。今天就来介绍Rust中的另外一个核心概念：生命周期。</p>
<p>为什么生命周期要单独介绍呢？因为我在这之前一直没搞清楚Rust中的生命周期参数究竟是怎么一回事。</p>
<p>现在我终于弄明白了，于是迫不及待要和大家分享，当然如果我有什么说的不对的地方请帮忙指正。</p>
<p>在Rust中，值的生命周期与作用域有关，这里你可以结合所有权一起理解。在一个函数内，Rust中值的所有权的范围即为其生命周期。Rust通过借用检查器对值的生命周期进行检查，其目的是为了避免出现悬垂指针。这点很容易理解，我们通过一段简单的代码来看一下。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a;  <span class="comment">// 'a ---------------+</span></span><br><span class="line">    &#123;                   <span class="comment">//       |</span></span><br><span class="line">        <span class="keyword">let</span> b = <span class="number">1</span>; <span class="comment">// 'b ----+   |</span></span><br><span class="line">        a = &amp;b;           <span class="comment">// |   |</span></span><br><span class="line">    &#125;<span class="comment">// ---------------------+   |</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a: &#123;&#125;"</span>, a); <span class="comment">//     |</span></span><br><span class="line">&#125; <span class="comment">// ----------------------------+</span></span><br></pre></td></tr></table></figure>
<p>在上面这段代码中，我已经标注了a和b的生命周期。在代码的第5行，b将所有权出借给了a，而在第7行我们想使用a时，b的生命周期已经结束，也就是说，从第7行开始，a成为了一个悬垂指针。因此这段代码会报一个编译错误。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582994323/Blog/rust/10/rust10-1.png" alt="生命周期编译错误"></p>
<p>而当所有权在函数之间传递时，Rust的借用检查器就没有办法来确定值的生命周期了。这个时候我们就需要借助生命周期参数来帮助Rust的借用检查器来进行生命周期的检查。生命周期参数分为显式的和隐式的两种。</p>
<h3 id="显式生命周期参数"><a href="#显式生命周期参数" class="headerlink" title="显式生命周期参数"></a>显式生命周期参数</h3><p>显式生命周期的标注方式通常是<code>&#39;a</code>这样的。它应该写在<code>&amp;</code>之后，<code>mut</code>之前（如果有）。</p>
<h4 id="函数签名中的生命周期参数"><a href="#函数签名中的生命周期参数" class="headerlink" title="函数签名中的生命周期参数"></a>函数签名中的生命周期参数</h4><p>在正式开始学习之前，我们还要先明确一些概念。下面是一个代有生命周期参数的函数签名。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span> </span>&lt;<span class="symbol">'a</span>&gt;(s: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>, t: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>) -&gt;&amp;<span class="symbol">'a</span> <span class="built_in">str</span>;</span><br></pre></td></tr></table></figure>
<p>其中第一个<code>&#39;a</code>，是生命周期参数的声明。参数的生命周期叫做输入声明周期，返回值的生命周期叫做输出生命周期。需要记住的一点是：<strong>输出的生命周期长度不能长于输入的生命周期</strong>。</p>
<p>另外还要注意：<strong>禁止在没有任何输入参数的情况下返回引用</strong>。因为这样明显会造成悬垂指针。试想当你没有任何输入参数时返回了引用，那么引用本身的值在函数返回时必然会被析构，返回的引用也就成了悬垂指针。</p>
<p>同样的道理我们可以得出另一个结论：<strong>从函数中返回一个引用，其生命周期参数必须与函数的参数相匹配，否则，标注生命周期参数也毫无意义</strong>。</p>
<p>说了这么多“不允许”之后，我们来看一个正常使用生命周期参数的例子吧。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">the_longest</span></span>&lt;<span class="symbol">'a</span>&gt; (s1: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>, s2: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>) -&gt; &amp;<span class="symbol">'a</span> <span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s1.len() &gt; s2.len() &#123;</span><br><span class="line">        s1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        s2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"Rust"</span>);</span><br><span class="line">    <span class="keyword">let</span> s1_r = &amp;s1;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> s2 = <span class="built_in">String</span>::from(<span class="string">"C"</span>);</span><br><span class="line">        <span class="keyword">let</span> res = the_longest(s1_r, &amp;s2);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125; is the longest"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们来看看这段代码的各个值的生命周期是否符合我们前面说的那一点原则。在调用th_longest函数时，两个参数的生命周期已经确定，s1的生命周期贯穿了main函数，s2的生命周期在内部的代码块中。函数返回时，将返回值绑定给了res，也就是说返回的生命周期为res的生命周期，由于后定义先析构的原则，res的生命周期是短于s2的生命周期的，当然也短于s1的生命周期。因此这个例子符合了我们说的<strong>输出的生命周期长度不能长于输入的生命周期</strong>的原则。</p>
<p>对于像示例当中有多个参数的函数，我们也可以为其标注不同的生命周期参数，但是编译器无法确定两个生命周期参数的大小，因此需要我们显式的指定。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">the_longest</span></span>&lt;<span class="symbol">'a</span>, <span class="symbol">'b</span>: <span class="symbol">'a</span>&gt; (s1: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>, s2: &amp;<span class="symbol">'b</span> <span class="built_in">str</span>) -&gt; &amp;<span class="symbol">'a</span> <span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s1.len() &gt; s2.len() &#123;</span><br><span class="line">        s1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        s2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里<code>&#39;b: &#39;a</code>的意思是<code>&#39;b</code>的存活周期长于<code>&#39;a</code>。这点有些令人疑惑，<code>&#39;a</code>明明是长于<code>&#39;b</code>的，为什么会这样标注呢？还记得我们说过生命周期参数的意义吗？它是用来帮助Rust借用检查器来检查非法借用的，输出生命周期必须短于输入生命周期。因此这里的<code>&#39;a</code>实际上是返回值的生命周期，而不是第一个输入参数的生命周期。</p>
<p>函数中的生命周期参数的使用我们暂时先介绍到这里。生命周期在其他使用场景中的使用方法也比较类似，不过还是有一些值得注意的地方的。</p>
<h4 id="结构体中的生命周期参数"><a href="#结构体中的生命周期参数" class="headerlink" title="结构体中的生命周期参数"></a>结构体中的生命周期参数</h4><p>如果一个结构体包含引用类型的成员，那么结构体应该声明生命周期参数<code>&lt;&#39;a&gt;</code>。这是为了保证<strong>结构体实例的生命周期应该短于或等于任意一个成员的生命周期</strong>。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ImportantExcept</span></span>&lt;<span class="symbol">'a</span>&gt; &#123;</span><br><span class="line">    part: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> novel = <span class="built_in">String</span>::from(<span class="string">"call me Ishmael. Some year ago..."</span>);</span><br><span class="line">    <span class="keyword">let</span> first_sentence = novel.split(<span class="string">'.'</span>)</span><br><span class="line">        .next()</span><br><span class="line">        .expect(<span class="string">"Could not find a '.'"</span>);</span><br><span class="line">    <span class="keyword">let</span> i = ImportantExcept &#123; part: first_sentence&#125;;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(i.part, <span class="string">"call me Ishmael"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这段代码中<code>first_sentence</code>先于结构体实例<code>i</code>被定义，因此<code>i</code>的生命周期是短于<code>first_sentence</code>的，如果反过来，<code>i</code>的生命周期长于<code>first_sentence</code>即长于<code>part</code>，那么在<code>part</code>被析构以后，<code>i.part</code>就会成为悬垂指针。</p>
<h4 id="方法中的生命周期参数"><a href="#方法中的生命周期参数" class="headerlink" title="方法中的生命周期参数"></a>方法中的生命周期参数</h4><p>现在我们为刚才的结构体增加一个实现方法</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">'a</span>&gt; ImportantExcept&lt;<span class="symbol">'a</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">get_first_sentence</span></span>(s: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>) -&gt; &amp;<span class="symbol">'a</span> <span class="built_in">str</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> first_sentence = s.split(<span class="string">'.'</span>)</span><br><span class="line">            .next()</span><br><span class="line">            .expect(<span class="string">"Could not find a '.'"</span>);</span><br><span class="line">        first_sentence</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为<code>ImportantExcept</code>包含引用成员，因此需要标注生命周期参数。在<code>impl</code>后面声明生命周期参数<code>&lt;&#39;a&gt;</code>在结构体名称后面使用。在<code>get_first_sentence</code>方法中使用的生命周期参数也是刚刚定义好的那个。这样就可以约束输入引用的生命周期长度长于结构体实例的生命周期长度。</p>
<h4 id="静态生命周期参数"><a href="#静态生命周期参数" class="headerlink" title="静态生命周期参数"></a>静态生命周期参数</h4><p>前面聊的都是我们自己定义的生命周期参数，现在来聊聊Rust中内置的生命周期参数<code>&#39;static</code>。<code>&#39;static</code>生命周期存活于整个程序运行期间。所有的字符串字面量都有<code>&#39;static</code>生命周期，类型为<code>&amp;&#39;static str</code>。</p>
<h3 id="隐式生命周期参数"><a href="#隐式生命周期参数" class="headerlink" title="隐式生命周期参数"></a>隐式生命周期参数</h3><p>在某些情况下，我们可以省略生命周期参数，对于省略的生命周期参数通常有三条规则：</p>
<ul>
<li>每个输入位置上省略的生命周期都将成为一个不同的生命周期参数</li>
<li>如果只有一个输入生命周期的位置，则该生命周期将分配给输出生命周期</li>
<li>如果存在多个输入生命周期的位置，但是其中包含&amp;self或&amp;mut self，则self的生命周期将分配给输出生命周期</li>
</ul>
<h3 id="生命周期限定"><a href="#生命周期限定" class="headerlink" title="生命周期限定"></a>生命周期限定</h3><p>生命周期参数也可以像trait那样作为范型的限定</p>
<ul>
<li>T: ‘a：表示T类型中的任何引用都要“活得”和’a一样长</li>
<li>T：Trait + ‘a：表示T类型必须实现Trait这个trait，并且T类型中的任何引用都要“活得”和’a一样长</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>现在我把我对Rust生命周期的了解都分享完了。其实只要记住一个原则就可以了，那就是：<strong>生命周期参数的目的是帮助借用检查器验证引用的合法性，避免出现悬垂指针</strong>。</p>
<p>Rust还有几个深坑，我们下次继续。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：海纳百川</title>
    <url>/2020/01/14/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E6%B5%B7%E7%BA%B3%E7%99%BE%E5%B7%9D/</url>
    <content><![CDATA[<p>今天来聊Rust中两个重要的概念：泛型和trait。很多编程语言都支持泛型，Rust也不例外，相信大家对泛型也都比较熟悉，它可以表示任意一种数据类型。trait同样不是Rust所特有的特性，它借鉴于Haskell中的Typeclass。简单来讲，Rust中的trait就是对类型行为的抽象，你可以把它理解为Java中的接口。<a id="more"></a></p>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>在前面的文章中，我们其实已经提及了一些泛型类型。例如Option<t>、Vec<t>和Result&lt;T, E&gt;。泛型可以在函数、数据结构、Enum和方法中进行定义。在Rust中，我们习惯使用T作为通用的类型名称，当然也可以是其他名称，只不过习惯上优先使用T（Type）来表示。它可以帮我们消除一些重复代码，例如实现逻辑相同但参数类型不同的两个函数，我们就可以通过泛型技术将其进行合并。下面我们分别演示泛型的几种定义。</t></t></p>
<h4 id="在函数中定义"><a href="#在函数中定义" class="headerlink" title="在函数中定义"></a>在函数中定义</h4><p>泛型在函数的定义中，可以是参数，也可以是返回值。前提是必须要在函数名的后面加上<t>。</t></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">largest</span></span>&lt;T&gt;(list: &amp;[T]) -&gt; T &#123;</span><br></pre></td></tr></table></figure>
<h4 id="在数据结构中定义"><a href="#在数据结构中定义" class="headerlink" title="在数据结构中定义"></a>在数据结构中定义</h4><p>如果数据结构中某个字段可以接收任意数据类型，那么我们可以把这个字段的类型定义为T，同样的，为了让编译器认识这个T，我们需要在结构体名称后边标识一下。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子中，x和y都是可以接受任意类型，但是，它们两个的类型必须相同，如果传入的类型不同，编译器仍然会报错。那如果想要让x和y能够接受不同的类型应该怎么办呢？其实也很简单，我们定义两种不同的泛型就好了。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>&lt;T, U&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: U,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="在Enum中定义"><a href="#在Enum中定义" class="headerlink" title="在Enum中定义"></a>在Enum中定义</h4><p>在Enum中定义泛型我们已经接触过比较多了，最常见的例子就是Option<t>和Result&lt;T, E&gt;。其定义方法也和在数据结构中的定义方法类似</t></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Result</span></span>&lt;T, E&gt; &#123;</span><br><span class="line">    <span class="literal">Ok</span>(T),</span><br><span class="line">    <span class="literal">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="在方法中定义"><a href="#在方法中定义" class="headerlink" title="在方法中定义"></a>在方法中定义</h4><p>我们在实现定义了泛型的数据结构或Enum时，方法中也可以定义泛型。例如我们对刚刚定义的Point<t>进行实现。</t></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;T&gt; Point&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">x</span></span>(&amp;<span class="keyword">self</span>) -&gt; &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，我们的方法返回值的类型是T的引用，为了让编译器识别T，我们必须要在<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">另外，我们在对结构体进行实现时，也可以实现指定的类型，这样就不需要在```impl```后面加标识了。</span><br><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">impl Point&lt;f32&gt; &#123;</span><br><span class="line">    fn distance_from_origin(&amp;self) -&gt; f32 &#123;</span><br><span class="line">        (self.x.powi(2) + self.y.powi(2)).sqrt()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>了解了泛型的几种定义之后，你有没有想过一个问题：Rust中使用泛型会对程序运行时的性能造成不良影响吗？答案是不会，因为Rust对于泛型的处理都是在编译阶段进行的，对于我们定义的泛型，Rust编译器会对其进行单一化处理，也就是说，我们定义一个具有泛型的函数（或者其他什么的），Rust会根据需要将其编译为具有具体类型的函数。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> integer = <span class="literal">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> float = <span class="literal">Some</span>(<span class="number">5.0</span>);</span><br></pre></td></tr></table></figure>
<p>例如我们的代码使用了这两种类型的Option，那么Rust编译器就会在编译阶段生成两个指定具体类型的Option。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Option_i32</span></span> &#123;</span><br><span class="line">    <span class="literal">Some</span>(<span class="built_in">i32</span>),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Option_f64</span></span> &#123;</span><br><span class="line">    <span class="literal">Some</span>(<span class="built_in">f64</span>),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们在运行阶段直接使用对应的Option就可以了，而不需要再进行额外复杂的操作。所以，如果我们泛型定义并使用的范围很大，也不会对运行时性能造成影响，受影响的只有编译后程序包的大小。</p>
<h3 id="Trait"><a href="#Trait" class="headerlink" title="Trait"></a>Trait</h3><p>Trait可以说是Rust的灵魂，Rust中所有的抽象都是依靠Trait来实现的。</p>
<p>我们先来看看如何定义一个Trait。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Summary</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义trait使用了关键字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">pub trait Summary &#123;</span><br><span class="line">    fn summarize(&amp;self) -&gt; String &#123;</span><br><span class="line">        String::from(&quot;(Read more...)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对于这样的写法，它表示summarize函数的默认实现。</p>
<h4 id="Trait的实现"><a href="#Trait的实现" class="headerlink" title="Trait的实现"></a>Trait的实现</h4><p>上面是一种默认实现，接下来我们介绍一下在Rust中，对一个Trait的常规实现。Trait的实现是需要针对结构体的，即我们要写明是哪个结构体的哪种行为。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">NewsArticle</span></span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> headline: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> location: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> author: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> content: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Summary <span class="keyword">for</span> NewsArticle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">"&#123;&#125;, by &#123;&#125; (&#123;&#125;)"</span>, <span class="keyword">self</span>.headline, <span class="keyword">self</span>.author, <span class="keyword">self</span>.location)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tweet</span></span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> username: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> content: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> reply: <span class="built_in">bool</span>,</span><br><span class="line">    <span class="keyword">pub</span> retweet: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Summary <span class="keyword">for</span> Tweet &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, <span class="keyword">self</span>.username, <span class="keyword">self</span>.content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中，我们分别定义了结构体NewArticle和Tweet，然后为它们实现了trait，定义了summarize函数对应的逻辑。</p>
<h4 id="作为参数的Trait"><a href="#作为参数的Trait" class="headerlink" title="作为参数的Trait"></a>作为参数的Trait</h4><p>此外，trait还可以作为函数的参数，也就是需要传入一个实现了对应trait的结构体的实例。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">notify</span></span>(item: <span class="keyword">impl</span> Summary) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Breaking news! &#123;&#125;"</span>, item.summarize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>作参数时，我们需要使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Rust还提供了另一种语法糖来，即**Trait限定**，我们可以使用泛型约束的语法来限定Trait参数。</span><br><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">pub fn notify&lt;T: Summary&gt;(item: T) &#123;</span><br><span class="line">    println!(&quot;Breaking news! &#123;&#125;&quot;, item.summarize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如上述代码，我们可以通过Trait来限定泛型T的范围。这样的语法糖可以在多个参数的函数中帮助我们简化代码。下面两行代码就有比较明显的对比</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">notify</span></span>(item1: <span class="keyword">impl</span> Summary, item2: <span class="keyword">impl</span> Summary) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">notify</span></span>&lt;T: Summary&gt;(item1: T, item2: T) &#123;</span><br></pre></td></tr></table></figure>
<p>如果某个参数有多个trait限定，就可以使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">pub fn notify&lt;T: Summary + Display&gt;(item: T) &#123;</span><br></pre></td></tr></table></figure></p>
<p>如果我们有更多的参数，并且有每个参数都有多个trait限定，及时我们使用了上面这种语法糖，代码仍然有些繁杂，会降低可读性。所以Rust又为我们提供了<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">fn some_function&lt;T, U&gt;(t: T, u: U) -&gt; i32</span><br><span class="line">    where T: Display + Clone,</span><br><span class="line">          U: Clone + Debug</span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure></p>
<p>它帮助我们在函数定义的最后写一个trait限定列表，这样可以使代码的可读性更高。</p>
<h4 id="Trait作为返回值"><a href="#Trait作为返回值" class="headerlink" title="Trait作为返回值"></a>Trait作为返回值</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">returns_summarizable</span></span>() -&gt; <span class="keyword">impl</span> Summary &#123;</span><br><span class="line">    Tweet &#123;</span><br><span class="line">        username: <span class="built_in">String</span>::from(<span class="string">"horse_ebooks"</span>),</span><br><span class="line">        content: <span class="built_in">String</span>::from(<span class="string">"of course, as you probably already know, people"</span>),</span><br><span class="line">        reply: <span class="literal">false</span>,</span><br><span class="line">        retweet: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Trait作为返回值类型，和作为参数类似，只需要在定义返回类型时使用<code>impl Trait</code>。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文我们简单介绍了泛型和Trait，包括它们的定义和使用方法。泛型主要是针对数据类型的一种抽象，而Trait则是对数据类型行为的一种抽象，Rust中并没有严格意义上的继承，多是用组合的形式。这也体现了「多组合，少继承」的设计思想。</p>
<p>最后留个预告，这个坑还没完，我们下次继续往深处挖。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：鳞次栉比</title>
    <url>/2019/11/27/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E9%B3%9E%E6%AC%A1%E6%A0%89%E6%AF%94/</url>
    <content><![CDATA[<p>很久没有挖Rust的坑啦，今天来挖一些排列整齐的坑。没错，就是要介绍一些集合类型的数据类型。“鳞次栉比”这个标题是不是显得很有文化？<a id="more"></a></p>
<p>在<a href="https://jackeyzhe.github.io/2019/10/08/Rust入坑指南：常规套路/">Rust入坑指南：常规套路</a>一文中我们已经介绍了一些基本数据类型了，它们都存储在栈中，今天我们重点介绍3种数据类型：string，vector和hash map。</p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String类型我们在之前的学习中已经有了较多的接触，但是没有进行过详细的介绍。有些有编程基础的同学可能不屑于学习String类型，毕竟它在所有编程语言中可以说是最常用的类型了，大家也都很熟悉了。对于有这种心理的同学，我想对他们说：我刚开始也是这样想的，直到后来我被编译器揍的满头包，才下定决心回来认真学习一下String类型。</p>
<p>Rust的字符串分为以下几种类型：</p>
<ul>
<li><strong>str</strong>：表示固定长度的字符串</li>
<li><strong>String</strong>：表示可增长的字符串</li>
<li><strong>CStr</strong>：表示由C分配，被Rust借用的字符串，一般用于和C语言交互</li>
<li><strong>CString</strong>：表示由Rust分配并且可以传递给C语言的字符串</li>
<li><strong>OsStr</strong>：表示和操作系统相关的字符串，主要为了兼容Windows</li>
<li><strong>OsString</strong>：OsStr的可变版本</li>
<li><strong>Path</strong>：表示路径</li>
<li><strong>PathBuf</strong>：是Path的可变版本</li>
</ul>
<p>本文我们重点讨论前两种，因为它们是开发过程中最常用的，也是比较容易混淆的。对于str，我们常见的是它的引用类型，<figure class="highlight plain"><figcaption><span>[https://jackeyzhe.github.io/2019/10/13/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/](https://jackeyzhe.github.io/2019/10/13/Rust入坑指南：核心概念/) )一文后，相信你已经了解了引用类型和Ownership的概念。也就是说String类型具有Ownership而&str没有。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">在Rust中，String本质上是Vec\&lt;u8&gt;，Vec是向量集合的关键字，我们在后面会介绍。String类型由三个部分组成，分别是：指向堆中字节序列的指针，记录堆中字节序列的长度和堆分配的容量。通过一段代码也许你很有更深的理解。</span><br><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">fn main() &#123;</span><br><span class="line">    let mut a = String::from(&quot;foo&quot;);</span><br><span class="line">    println!(&quot;&#123;:p&#125;&quot;, a.as_ptr());</span><br><span class="line">    println!(&quot;&#123;:p&#125;&quot;, &amp;a);</span><br><span class="line">    assert_eq!(a.len(), 3);</span><br><span class="line">    a.reserve(10);</span><br><span class="line">    assert_eq!(a.capacity(), 13);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这段代码中我们可以看到，a.as_ptr()获取指针和&amp;a获取的指针是不一样的。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1575123441/Blog/rust/06/rust06-1.png" alt="rust06-1"></p>
<p>这里我们解释一下，as_ptr获取到的指针是堆中字节序列的指针地址，而&amp;a的地址是字符串变量在栈上的指针地址。另外，len()和capacity()方法得到的长度都是字节数量，而非字符数量。这里你可以自己动手试试中文字符的长度。</p>
<p>聊完了字符串的基本概念以后，相信你已经对Rust的字符串有了一个大概的认识。接下来我们就一起来看一看字符串的CRUD的方法吧。</p>
<h4 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h4><p>话不多说，先来展示一下创建字符串的各种方法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> string: <span class="built_in">String</span> = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="keyword">let</span> string: <span class="built_in">String</span> = <span class="built_in">String</span>::from(<span class="string">"hello rust"</span>);</span><br><span class="line">    <span class="keyword">let</span> string: <span class="built_in">String</span> = <span class="built_in">String</span>::with_capacity(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">str</span>: &amp;<span class="symbol">'static</span> <span class="built_in">str</span> = <span class="string">"Jackey"</span>;</span><br><span class="line">    <span class="keyword">let</span> string: <span class="built_in">String</span> = <span class="built_in">str</span>.to_owned();</span><br><span class="line">    <span class="keyword">let</span> string: <span class="built_in">String</span> = <span class="built_in">str</span>.to_string();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们比较常用的是前两种，下面介绍一下后面几个方法。with_capacity()是创建一个空字符串，参数表示在堆中分配的字节数。to_owned和to_string是演示了如何把&amp;str类型转换成String类型。</p>
<h4 id="修改字符串"><a href="#修改字符串" class="headerlink" title="修改字符串"></a>修改字符串</h4><p>Rust修改字符串的常用方法也有很多，例如在字符串后追加，连接两个字符串，更新字符串等。下面这段代码就展示了一些修改字符串的方法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> hello = <span class="built_in">String</span>::from(<span class="string">"Hello, "</span>);</span><br><span class="line">    hello.push(<span class="string">'J'</span>);    <span class="comment">// 追加单个字符</span></span><br><span class="line">    hello.push_str(<span class="string">"ackey! "</span>);    <span class="comment">//追加字符串</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"push: &#123;&#125;"</span>, hello);</span><br><span class="line"></span><br><span class="line">    hello.extend([<span class="string">'M'</span>, <span class="string">'y'</span>, <span class="string">' '</span>].iter());   <span class="comment">//追加多个字符，参数为迭代器</span></span><br><span class="line">    hello.extend(<span class="string">"name"</span>.chars());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"extend: &#123;&#125;"</span>, hello);</span><br><span class="line"></span><br><span class="line">    hello.insert(<span class="number">0</span>, <span class="string">'h'</span>);   <span class="comment">//类似于push，可以指定插入的位置</span></span><br><span class="line">    hello.insert(<span class="number">1</span>, <span class="string">'a'</span>);</span><br><span class="line">    hello.insert(<span class="number">2</span>, <span class="string">'!'</span>);</span><br><span class="line">    hello.insert_str(<span class="number">0</span>, <span class="string">"Haha"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"insert: &#123;&#125;"</span>, hello);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> left = <span class="string">"Hello, "</span>.to_string();</span><br><span class="line">    <span class="keyword">let</span> right = <span class="string">"World"</span>.to_string();</span><br><span class="line">    <span class="keyword">let</span> result = left + &amp;right;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"+: &#123;&#125;"</span>, result);   <span class="comment">//使用+连接字符串时，第二个必须为引用</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> message = <span class="string">"rust"</span>.to_string();   <span class="comment">//使用+=连接字符串时，字符串必须定义为可变</span></span><br><span class="line">    message += <span class="string">"!"</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"+=: &#123;&#125;"</span>, message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"foobar"</span>);</span><br><span class="line">    <span class="keyword">let</span> s: <span class="built_in">String</span> = s</span><br><span class="line">        .chars()</span><br><span class="line">        .enumerate()</span><br><span class="line">        .map(|(_i, c)| &#123;c.to_uppercase().to_string()&#125;)</span><br><span class="line">        .collect();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"update chars: &#123;&#125;"</span>, s);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">let</span> s2 = <span class="built_in">String</span>::from(<span class="string">"rust"</span>);</span><br><span class="line">    <span class="keyword">let</span> s3 = <span class="built_in">format!</span>(<span class="string">"&#123;&#125;-&#123;&#125;"</span>, s1, s2);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"format: &#123;&#125;"</span>, s3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们对上面的代码做一些补充的解释。</p>
<p>push和insert类似，带有_str的方法接收的参数是字符串，否则只能接收单个字符。insert可以指定插入的位置，而push只能在字符串末尾插入。</p>
<p>使用「+」连接字符串时，第一个参数是String类型，第二个则需要是引用类型&amp;str。这类似于我们调用一个add方法，它的定义是这样的：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add</span></span>(<span class="keyword">self</span>, s: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">String</span> &#123;</span><br></pre></td></tr></table></figure>
<p>所以，第一个参数的ownership转移到了函数中，又通过返回结果传递出来。也就是说，在使用了+操作符之后，<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 字符串查找</span><br><span class="line"></span><br><span class="line">在Rust中，字符串是不能根据位置来获取到指定字符的。也就是下面这段代码是编译不过的。</span><br><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">let s1 = String::from(&quot;hello&quot;);</span><br><span class="line">let h = s1[0];</span><br></pre></td></tr></table></figure></p>
<p>因为，Rust会认为这个0是指第一个字节，而Rust字符串中的字符可能占有多个字节（还记得前面我让你用中文字符实验代码吗？）所以，如果你单纯的想要获取一个字节，编译器不知道你是真的想要获取字节对应的数值，还是要获取那个字符。</p>
<p>我们在处理字符串时通常有以下方法：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> hello = <span class="string">"Здравствуйте"</span>;</span><br><span class="line">    <span class="keyword">let</span> s = &amp;hello[<span class="number">0</span>..<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chars = hello.chars();</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> chars &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> bytes = hello.bytes();</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> bytes &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, byte);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> get = hello.get(<span class="number">0</span>..<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">let</span> get_mut = s.get_mut(<span class="number">3</span>..<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> message = <span class="built_in">String</span>::from(<span class="string">"hello-world"</span>);</span><br><span class="line">    <span class="keyword">let</span> (left, right) = message.split_at(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"left: &#123;&#125;, right: &#123;&#125;"</span>, left, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通常是使用字符切片，也可以使用chars方法获取到Chars迭代器，然后可以对每个字符进行单独处理。此外，使用get或get_mut方法也可以接收索引范围，返回指定的字符串切片。返回结果是Option类型，这是因为如果指定的索引返回不能返回完整字符，那么Rust就会返回None。这里也可以使用is_char_boundary方法来判断一个位置是否是非法边界。</p>
<p>最后，也可以使用split_at或split_at_mut方法来分割字符串。这要求分割的位置正好是字符边界位置，如果不是，程序就会崩溃。</p>
<h4 id="删除字符串"><a href="#删除字符串" class="headerlink" title="删除字符串"></a>删除字符串</h4><p>Rust的标准库提供了一些删除字符串的方法，我们来演示一些：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> hello = <span class="built_in">String</span>::from(<span class="string">"hello"</span>);</span><br><span class="line">    hello.remove(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"remove: &#123;&#125;"</span>, hello);</span><br><span class="line">    hello.pop();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"pop: &#123;&#125;"</span>, hello);</span><br><span class="line">    hello.truncate(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"truncate: &#123;&#125;"</span>, hello);</span><br><span class="line">    hello.clear();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"clear: &#123;&#125;"</span>, hello);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如图：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1575211017/Blog/rust/06/rust06-2.png" alt="rust06-2"></p>
<p>remove方法用来删除字符串中的某个字符，其接收的参数是字符的起始位置，如果是不是某个字符的起始位置，会导致程序崩溃。</p>
<p>pop方法会弹出字符串末尾的字符，truncate方法是截取指定长度字符串，而clear方法则是用来清空字符串。</p>
<p>至此，关于Rust中的字符串的基本概念和CRUD我们都已经介绍完了，接下来我们再来看另一种集合类型Vector。</p>
<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>Vector是用来存储相同数据类型的多个数据一种数据类型。它的关键字是<figure class="highlight plain"><figcaption><span>```。下面我们一起来看看向量的CRUD吧。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 创建向量</span><br><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">fn main() &#123;</span><br><span class="line">    let v1: Vec&lt;i32&gt; = Vec::new();</span><br><span class="line">    let v2 = vec![1, 2, 3];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面这段代码演示了创建一个向量的两种方式，第一种是使用new函数来创建一个空的向量，由于没有添加元素，所以要显式的指定存储元素的类型。第二种是创建一个有初始值的向量集合，我们直接使用vec！宏，然后指定初始值即可，不需要指定向量中元素的数据类型，因为编译器可以自己推断出来。</p>
<h4 id="更新向量"><a href="#更新向量" class="headerlink" title="更新向量"></a>更新向量</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> v = <span class="built_in">Vec</span>::new();</span><br><span class="line">    v.push(<span class="number">1</span>);</span><br><span class="line">    v.push(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个空的向量之后，如果我们想要增加元素，就可以直接使用push方法，向末尾追加元素。</p>
<h4 id="删除向量"><a href="#删除向量" class="headerlink" title="删除向量"></a>删除向量</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> v = <span class="built_in">Vec</span>::new();</span><br><span class="line">    v.push(<span class="number">1</span>);</span><br><span class="line">    v.push(<span class="number">2</span>);</span><br><span class="line">    v.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    v.pop();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> &amp;v &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删除单个元素可以使用pop方法，而要删除整个向量，只能像其他结构体一样，到其ownership失效。</p>
<h4 id="读取向量元素"><a href="#读取向量元素" class="headerlink" title="读取向量元素"></a>读取向量元素</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> third: &amp;<span class="built_in">i32</span> = &amp;v[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The third element is &#123;&#125;"</span>, third);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> v.get(<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="literal">Some</span>(third) =&gt; <span class="built_in">println!</span>(<span class="string">"The third element is &#123;&#125;"</span>, third),</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">"There is no third element."</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">100</span>, <span class="number">32</span>, <span class="number">57</span>];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> &amp;v &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当你需要读取单个指定元素时，有两种方法可以用，一种是使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">此外，还可以通过遍历向量的形式来读取元素。如果想要存储不同类型的数据，我们可以借助枚举类型。</span><br><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">fn main() &#123;</span><br><span class="line">    enum SpreadsheetCell &#123;</span><br><span class="line">        Int(i32),</span><br><span class="line">        Float(f64),</span><br><span class="line">        Text(String),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let row = vec![</span><br><span class="line">        SpreadsheetCell::Int(3),</span><br><span class="line">        SpreadsheetCell::Text(String::from(&quot;blue&quot;)),</span><br><span class="line">        SpreadsheetCell::Float(10.12),</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap存储了KV结构的数据，各个Key必须是同一种类型，各个Value必须是同一种类型。由于HashMap是三种集合类型中使用最少的，所以在使用之前，需要手动引入进来</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br></pre></td></tr></table></figure>
<h4 id="创建HashMap"><a href="#创建HashMap" class="headerlink" title="创建HashMap"></a>创建HashMap</h4><p>首先我们来了解一下如何创建一个新的Hash Map并增加元素。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> field_name = <span class="built_in">String</span>::from(<span class="string">"Favorite color"</span>);</span><br><span class="line">    <span class="keyword">let</span> field_value = <span class="built_in">String</span>::from(<span class="string">"Blue"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> map = HashMap::new();</span><br><span class="line">    map.insert(field_name, field_value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，在使用insert方法时，<figure class="highlight plain"><figcaption><span>Map中再拿出来。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 访问Hash Map的数据</span><br><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">use std::collections::HashMap;</span><br><span class="line">fn main() &#123;</span><br><span class="line">    let field_name = String::from(&quot;Favorite color&quot;);</span><br><span class="line">    let field_value = String::from(&quot;Blue&quot;);</span><br><span class="line"></span><br><span class="line">    let mut map = HashMap::new();</span><br><span class="line">    map.insert(field_name, field_value);</span><br><span class="line"></span><br><span class="line">    let favorite = String::from(&quot;Favorite color&quot;);</span><br><span class="line">    let color = map.get(&amp;favorite);</span><br><span class="line">    match color &#123;</span><br><span class="line">        Some(x) =&gt; println!(&quot;&#123;&#125;&quot;, x),</span><br><span class="line">        None =&gt; println!(&quot;None&quot;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，我们使用get可以获取到指定Key的值，get方法返回的是Option类型，如果没有指定的Value，则会返回None。此外，也可以使用for循环来遍历Hash Map。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> scores = HashMap::new();</span><br><span class="line"></span><br><span class="line">    scores.insert(<span class="built_in">String</span>::from(<span class="string">"Blue"</span>), <span class="number">10</span>);</span><br><span class="line">    scores.insert(<span class="built_in">String</span>::from(<span class="string">"Yellow"</span>), <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (key, value) <span class="keyword">in</span> &amp;scores &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="更新Hash-Map"><a href="#更新Hash-Map" class="headerlink" title="更新Hash Map"></a>更新Hash Map</h4><p>当我们向同一个Key insert值时，旧的值就会被覆盖。如果只想要在Key不存在时插入，则可以使用entry。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> scores = HashMap::new();</span><br><span class="line">    scores.insert(<span class="built_in">String</span>::from(<span class="string">"Blue"</span>), <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    scores.entry(<span class="built_in">String</span>::from(<span class="string">"Yellow"</span>)).or_insert(<span class="number">50</span>);</span><br><span class="line">    scores.entry(<span class="built_in">String</span>::from(<span class="string">"Blue"</span>)).or_insert(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, scores);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天带大家一起挖了三个坑，string，vector和hash map，分别介绍了每种数据类型的CRUD。对string的介绍占了比较大的篇幅，因为它是最常用的数据类型之一。当然这部分的相关知识还有很多，欢迎大家和我一起学习交流。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：齐头并进（上）</title>
    <url>/2020/03/15/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E9%BD%90%E5%A4%B4%E5%B9%B6%E8%BF%9B%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<p>我们知道，如今CPU的计算能力已经非常强大，其速度比内存要高出许多个数量级。为了充分利用CPU资源，多数编程语言都提供了并发编程的能力，Rust也不例外。<a id="more"></a></p>
<p>聊到并发，就离不开多进程和多线程这两个概念。其中，进程是资源分配的最小单位，而线程是程序运行的最小单位。线程必须依托于进程，多个线程之间是共享进程的内存空间的。进程间的切换复杂，CPU利用率低等缺点让我们在做并发编程时更加倾向于使用多线程的方式。</p>
<p>当然，多线程也有缺点。其一是程序运行顺序不能确定，因为这是由内核来控制的，其二就是多线程编程对开发者要求比较高，如果不充分了解多线程机制的话，写出的程序就非常容易出Bug。</p>
<p>多线程编程的主要难点在于如何保证线程安全。什么是线程安全呢？因为多个线程之间是共享内存空间的，因此就会存在同时对相同的内存进行写操作，那就会出现写入数据互相覆盖的问题。如果多个线程对内存只有读操作，没有任何写操作，那么也就不会存在安全问题，我们可以称之为线程安全。</p>
<p>常见的并发安全问题有<strong>竞态条件</strong>和<strong>数据竞争</strong>两种，竞态条件是指多个线程对相同的内存区域（我们称之为临界区）进行了“读取-修改-写入”这样的操作。而数据竞争则是指一个线程写一个变量，而另一个线程需要读这个变量，此时两者就是数据竞争的关系。这么说可能不太容易理解，不过不要紧，待会儿我会举两个具体的例子帮助大家理解。不过在此之前，我想先介绍一下Rust中是如何进行并发编程的。</p>
<h3 id="管理线程"><a href="#管理线程" class="headerlink" title="管理线程"></a>管理线程</h3><p>在Rust标准库中，提供了两个包来进行多线程编程：</p>
<ul>
<li>std::thread，定义一些管理线程的函数和一些底层同步原语</li>
<li>std::sync，定义了锁、Channel、条件变量和屏障</li>
</ul>
<p>我们使用std::thread中的<code>spawn</code>函数来创建线程，它的使用非常简单，其参数是一个闭包，传入创建的线程需要执行的程序。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    thread::spawn(|| &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"hi number &#123;&#125; from the spawned thread!"</span>, i);</span><br><span class="line">            thread::sleep(Duration::from_millis(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"hi number &#123;&#125; from the main thread!"</span>, i);</span><br><span class="line">        thread::sleep(Duration::from_millis(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码中，我们有两个线程，一个主线程，一个是用<code>spawn</code>创建出来的线程，两个线程都执行了一个循环。循环中打印了一句话，然后让线程休眠1毫秒。它的执行结果是这样的：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1584253897/Blog/rust/12/rust12-1.png" alt="执行结果"></p>
<p>从结果中我们能看出两件事：第一，两个线程是交替执行的，但是并没有严格的顺序，第二，当主线程结束时，它并没有等子线程运行完。</p>
<p>那我们有没有办法让主线程等子线程执行结束呢？答案当然是有的。Rust中提供了<code>join</code>函数来解决这个问题。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> handle = thread::spawn(|| &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"hi number &#123;&#125; from the spawned thread!"</span>, i);</span><br><span class="line">            thread::sleep(Duration::from_millis(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"hi number &#123;&#125; from the main thread!"</span>, i);</span><br><span class="line">        thread::sleep(Duration::from_millis(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handle.join().unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样主线程就必须要等待子线程执行完毕。</p>
<p>在某些情况下，我们需要将一些变量在线程间进行传递，正常来讲，闭包需要捕获变量的引用，这里就涉及到了生命周期问题，而子线程的闭包的存活周期有可能长于当前的函数，这样就会造成悬垂指针，这在Rust中是绝对不允许的。因此我们需要使用<code>move</code>关键字将所有权转移到闭包中。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> handle = thread::spawn(<span class="keyword">move</span> || &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Here's a vector: &#123;:?&#125;"</span>, v);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    handle.join().unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>thread::spawn</code>创建线程是不是非常简单。但是也是因为它的简单，所以可能无法满足我们一些定制化的需求。例如制定线程的栈大小，线程名称等。这时我们可以使用<code>thread::Builder</code>来创建线程。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread::&#123;Builder, current&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> v = <span class="built_in">vec!</span>[];</span><br><span class="line">    <span class="keyword">for</span> id <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> thread_name = <span class="built_in">format!</span>(<span class="string">"child-&#123;&#125;"</span>, id);</span><br><span class="line">        <span class="keyword">let</span> size: <span class="built_in">usize</span> = <span class="number">3</span> * <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">let</span> builder = Builder::new().name(thread_name).stack_size(size);</span><br><span class="line">        <span class="keyword">let</span> child = builder.spawn(<span class="keyword">move</span> || &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"in child:&#123;&#125;"</span>, current().name().unwrap());</span><br><span class="line">        &#125;).unwrap();</span><br><span class="line">        v.push(child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> v &#123;</span><br><span class="line">        child.join().unwrap_or_default();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们使用<code>thread::spawn</code>创建的线程返回的类型是<code>JoinHandle&lt;T&gt;</code>，而使用<code>builder.spawn</code>返回的是<code>Result&lt;JoinHandle&lt;T&gt;&gt;</code>，因此这里需要加上<code>unwrap</code>方法。</p>
<p>除了刚才提到了这些函数和结构体，<code>std::thread</code>还提供了一些底层同步原语，包括park、unpark和yield_now函数。其中park提供了阻塞线程的能力，unpark用来恢复被阻塞的线程。yield_now函数则可以让线程放弃时间片，让给其他线程执行。</p>
<h3 id="Send和Sync"><a href="#Send和Sync" class="headerlink" title="Send和Sync"></a>Send和Sync</h3><p>聊完了线程管理，我们再回到线程安全的话题，Rust提供的这些线程管理工具看起来和其他没有什么区别，那Rust又是如何保证线程安全的呢？</p>
<p>秘密就在<code>Send</code>和<code>Sync</code>这两个trait中。它们的作用是：</p>
<ul>
<li>Send：实现Send的类型可以安全的在线程间传递所有权。</li>
<li>Sync：实现Sync的类型可以安全的在线程间传递不可变借用。</li>
</ul>
<p>现在我们可以看一下<code>spawn</code>函数的源码</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[stable(feature = <span class="meta-string">"rust1"</span>, since = <span class="meta-string">"1.0.0"</span>)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">spawn</span></span>&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt; <span class="keyword">where</span></span><br><span class="line">    F: <span class="built_in">FnOnce</span>() -&gt; T, F: <span class="built_in">Send</span> + <span class="symbol">'static</span>, T: <span class="built_in">Send</span> + <span class="symbol">'static</span></span><br><span class="line">&#123;</span><br><span class="line">    Builder::new().spawn(f).expect(<span class="string">"failed to spawn thread"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其参数F和返回值类型T都加上了<code>Send + &#39;static</code>限定，Send表示闭包必须实现Send，这样才可以在线程间传递。而<code>&#39;static</code>表示T只能是非引用类型，因为使用引用类型则无法保证生命周期。</p>
<p>在<a href="https://jackeyzhe.github.io/2020/03/09/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/">Rust入坑指南：智能指针</a>一文中，我们介绍了共享所有权的指针<code>Rc&lt;T&gt;</code>，但在多线程之间共享变量时，就不能使用<code>Rc&lt;T&gt;</code>，因为它的内部不是原子操作。不过不要紧，Rust为我们提供了线程安全版本：<code>Arc&lt;T&gt;</code>。</p>
<p>下面我们一起来验证一下。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = Rc::new(<span class="string">"Hello"</span>.to_string());</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> s_clone = s.clone();</span><br><span class="line">        thread::spawn(<span class="keyword">move</span> || &#123;</span><br><span class="line">            s_clone.push_str(<span class="string">" world!"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个程序会报如下错误</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1584278809/Blog/rust/12/rust12-2.png" alt="Rc报错"></p>
<p>那我们把<code>Rc</code>替换为<code>Arc</code>试一下。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::sync::Arc;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = Arc::new(<span class="string">"Hello"</span>.to_string());</span><br></pre></td></tr></table></figure>
<p>很遗憾，程序还是报错。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1584279037/Blog/rust/12/rust12-3.png" alt="Arc报错"></p>
<p>这是因为，Arc默认是不可变的，我们还需要提供内部可变性。这时你可能想到来RefCell，但是它也是线程不安全的。所以这里我们需要使用<code>Mutex&lt;T&gt;</code>类型。它是Rust实现的互斥锁。</p>
<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>Rust中使用<code>Mutex&lt;T&gt;</code>实现互斥锁，从而保证线程安全。如果类型T实现了Send，那么<code>Mutex&lt;T&gt;</code>会自动实现Send和Sync。它的使用方法也比较简单，在使用之前需要通过<code>lock</code>或<code>try_lock</code>方法来获取锁，然后再进行操作。那么现在我们就可以对前面的代码进行修复了。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::&#123;Arc, Mutex&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = Arc::new(Mutex::new(<span class="string">"Hello"</span>.to_string()));</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> v = <span class="built_in">vec!</span>[];</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> s_clone = s.clone();</span><br><span class="line">        <span class="keyword">let</span> child = thread::spawn(<span class="keyword">move</span> || &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> s_clone = s_clone.lock().unwrap();</span><br><span class="line">            s_clone.push_str(<span class="string">" world!"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        v.push(child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> v &#123;</span><br><span class="line">        child.join().unwrap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><p>介绍完了互斥锁之后，我们再来了解一下Rust中提供的另外一种锁——读写锁<code>RwLock&lt;T&gt;</code>。互斥锁用来独占线程，而读写锁则可以支持多个读线程和一个写线程。</p>
<p>在使用读写锁时要注意，读锁和写锁是不能同时存在的，在使用时必须要使用显式作用域把读锁和写锁隔离开。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文我们先是介绍了Rust管理线程的两个函数：<code>spawn</code>、<code>join</code>。并且知道了可以使用Builder结构体定制化创建线程。然后又学习了Rust提供线程安全的两个trait，Send和Sync。最后我们一起学习了Rust提供的两种锁的实现：互斥锁和读写锁。</p>
<p>关于Rust并发编程坑还没有到底，接下来还有条件变量、原子类型这些坑等着我们来挖。今天就暂时歇业了。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>antirez:Redis6真的来了</title>
    <url>/2019/12/23/antirez-Redis6%E7%9C%9F%E7%9A%84%E6%9D%A5%E4%BA%86/</url>
    <content><![CDATA[<p>12月20号，Redis发布了Redis6-rc1版本，作者antirez也在自己的博客中宣布了这一消息，并对Redis6版本做了一些介绍，以下是译文。<a id="more"></a></p>
<p>没错，新版本的Redis已经到了候选发布状态（RC版），几个月后，你就可以在各大应用市场看到新版本的Redis了。我想这大概是迄今为止，Redis最接近“企业级”应用的一个版本了，有趣的是，在这之前我花了很长时间来理解什么是企业级应用。我认为我并不喜欢这个词，但是它还是有一些意义的。现在Redis可以说是无处不在，并且仍然能够“缩小规模”：你可以直接下载它，在30秒内完成编译，然后在不需要进行任何配置的情况下启动它。但是无处不在意味着加密和ACL之类的环境也是必须要支持的，因此Redis必须要感谢我，尽管我极力追求简单性。</p>
<p>有趣的是，Redis ACL虽然是以一种武断的方式进行添加，但它几乎与你在其他系统中看到的都不一样，对SSL的支持也是经过了数次迭代，以达到最终使用最有意义的想法的目的。从让核心功能尽可能简洁的角度来看，我对这些改动还是很满意的。</p>
<p>Redis6为我们带来的不仅仅是ACLs和SSL，据我所知，这是Redis发行的功能最多，也是参与人数最多的一个版本了。都有谁为Redis6做出了贡献呢？我生成了一个贡献者列表（我知道这个列表很烂，我只是简单生成了一下），他们至少有两个commit，并且不包括合并提交。另外，由于我不断在这里或那里修复许多小东西，因此我的提交次数可能会远超他人。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">685  antirez</span><br><span class="line">81  zhaozhao.zz</span><br><span class="line">76  Oran Agra</span><br><span class="line">51  artix</span><br><span class="line">28  Madelyn Olson</span><br><span class="line">27  Yossi Gottlieb</span><br><span class="line">15  David Carlier</span><br><span class="line">14  Guy Benoish</span><br><span class="line">14  Guy Korland</span><br><span class="line">13  Itamar Haber</span><br><span class="line">9  Angus Pearson</span><br><span class="line">8  WuYunlong</span><br><span class="line">8  yongman</span><br><span class="line">7  vattezhang</span><br><span class="line">7  Chris Lamb</span><br><span class="line">5  Dvir Volk</span><br><span class="line">5  meir@redislabs.com</span><br><span class="line">5  chendianqiang</span><br><span class="line">5  John Sully</span><br><span class="line">4  dejun.xdj</span><br><span class="line">4  Daniel Dai</span><br><span class="line">4  Johannes Truschnigg</span><br><span class="line">4  swilly22</span><br><span class="line">3  Bruce Merry</span><br><span class="line">3  filipecosta90</span><br><span class="line">3  youjiali1995</span><br><span class="line">2  James Rouzier</span><br><span class="line">2  Andrey Bugaevskiy</span><br><span class="line">2  Brad Solomon</span><br><span class="line">2  Hamid Alaei</span><br><span class="line">2  Michael Chaten</span><br><span class="line">2  Steve Webster</span><br><span class="line">2  Wander Hillen</span><br><span class="line">2  Weiliang Li</span><br><span class="line">2  Yuan Zhou</span><br><span class="line">2  charsyam</span><br><span class="line">2  hujie</span><br><span class="line">2  jem</span><br><span class="line">2  shenlongxing</span><br><span class="line">2  valentino</span><br><span class="line">2  zhudacai 00228490</span><br><span class="line">2  喜欢兰花山丘</span><br></pre></td></tr></table></figure>
<p>感谢上面各位的贡献，这是一次很棒的团队合作。</p>
<p>下面的列表是新功能列表：</p>
<ul>
<li>很多新的模块API</li>
<li>更好的过期周期</li>
<li>SSL</li>
<li>ACLs</li>
<li>RESP3</li>
<li>客户端缓存</li>
<li>线程I/O</li>
<li>副本上的无盘复制</li>
<li>Redis-benchmark支持集群+Redis-cli的改进</li>
<li>系统支持重写</li>
<li>Redis Cluster代理与Redis6一起发布（不同仓库）</li>
<li>Redis 6发布了Disque模块（不同仓库）</li>
</ul>
<p>如你所见，有很多比较大的改动，接下来我会选择其中几个进行介绍。</p>
<h3 id="RESP3"><a href="#RESP3" class="headerlink" title="RESP3"></a>RESP3</h3><p>10年之后，我们需要一个新的协议，我在这篇博客中进行了广泛的讨论：<a href="http://antirez.com/news/125，但我随后改变了主意，所以RESP3在Redis6中是“选择加入”。连接最开始是RESP2模式，只有当你使用新的HELLO命令握手时，你才会进入新的协议模式。" target="_blank" rel="noopener">http://antirez.com/news/125，但我随后改变了主意，所以RESP3在Redis6中是“选择加入”。连接最开始是RESP2模式，只有当你使用新的HELLO命令握手时，你才会进入新的协议模式。</a></p>
<p>我们为什么需要一个新的协议呢？因为旧的语义不够清晰。RESP3中还有一些其他功能，但主要思想是能够直接从Redis返回复杂数据类型，而客户端不必知道要转换为哪种类型的数组，或者返回的数字是否能够转换成布尔值等等。</p>
<p>由于RESP3不是仅有的协议，所以它的使用速度比预期要慢一些，但这也许不是一件坏事，因为这样我们就有足够的时间来进行适应和调整。</p>
<h3 id="ACLs"><a href="#ACLs" class="headerlink" title="ACLs"></a>ACLs</h3><p>对Redis ACLs最好对介绍就是ACL文档本身(<a href="https://redis.io/topics/acl)，即使它可能需要进行一些更新以匹配最近对修改。我在这里更想讨论一下使用它的动机。Redis需要ACLs是因为人们需要在更广泛的使用ACLs，以达到更好的控制客户端可以做的某些操作。另一个增加ACLs的主要原因是进行隔离，以保护数据免受应用程序错误的侵害。如果你的工作节点只能做BRPOPLPUSH操作，那么新的开发人员使用FLUSHALL的机会就比较少，也能够降低生产环境执行FLUSHALL的可能性。" target="_blank" rel="noopener">https://redis.io/topics/acl)，即使它可能需要进行一些更新以匹配最近对修改。我在这里更想讨论一下使用它的动机。Redis需要ACLs是因为人们需要在更广泛的使用ACLs，以达到更好的控制客户端可以做的某些操作。另一个增加ACLs的主要原因是进行隔离，以保护数据免受应用程序错误的侵害。如果你的工作节点只能做BRPOPLPUSH操作，那么新的开发人员使用FLUSHALL的机会就比较少，也能够降低生产环境执行FLUSHALL的可能性。</a></p>
<p>在Redis中ACLs的操作都是免费的，因为如果你不用它们，性能上就不会受影响，毕竟这部分开销无法衡量。我想这是最好的处理方法了，值得一提的是，我们现在为ACL提供了Redis模块接口，因此你可以编写自定义身份验证方法。</p>
<h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><p>现在是2019年，马上要到2020年了，因此有一些新的规则。唯一的问题就是如何正确执行，正确执行的前提是错误执行并理解其局限性，然后对Redis连接进行抽象以正确执行。这项工作是在完全没有我的帮助下进行的，这也体现了Redis开发过程的改变。</p>
<h3 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h3><p>关于客户端缓存，我写了一篇博客（<a href="http://antirez.com/news/130），然而我认为这是Redis6最不成熟的功能。没错，服务器可以协助你在客户端缓存，这看起来很酷，但我想要在Redis6" target="_blank" rel="noopener">http://antirez.com/news/130），然而我认为这是Redis6最不成熟的功能。没错，服务器可以协助你在客户端缓存，这看起来很酷，但我想要在Redis6</a> GA版本出来之前对这个功能进行进一步优化。尤其是增加一种新的模式，在这个模式下，服务器不维护客户端的状态或者尽量少的维护客户端的状态，更多使用消息进行交互。而且，现在无法将某些“cache slots”的过期消息合并成一个。这是一个不错的想法，我们将在一月份着重做这部分功能。</p>
<h3 id="Disque成为一个模块"><a href="#Disque成为一个模块" class="headerlink" title="Disque成为一个模块"></a>Disque成为一个模块</h3><p>最终，我做到了（<a href="https://github.com/antirez/disque-module），我对这个结果非常满意。" target="_blank" rel="noopener">https://github.com/antirez/disque-module），我对这个结果非常满意。</a></p>
<p>Disque作为一个模块确实显示的Redis模块系统的强大。集群消息总线API，能够阻止和恢复客户端，计时器，模块私有数据的AOF和RDB控制。如果你还不知道什么是Disque，可以去看一下这个仓库的README。</p>
<h3 id="集群代理"><a href="#集群代理" class="headerlink" title="集群代理"></a>集群代理</h3><p>我的同事Fabio在这个工作中花费了几个月的时间：<a href="https://github.com/artix75/redis-cluster-proxy" target="_blank" rel="noopener">https://github.com/artix75/redis-cluster-proxy</a></p>
<p>我想看到这个功能已经很多年了，当主题是Redis集群支持时，客户端的需要进行的操作总是很分散，现在我们有了代理（还在进行中），就可以做很多有趣的事情了。最主要的功能是为客户端抽象Redis集群，就像它们正在与单个实例通信一样。另一个功能就是至少在简单且客户端仅使用简单命令和功能时执行多路复用。当要阻止或执行事务时，代理为客户端分配一组不同的连接。代理也是完全线程级的，所以让大部分CPU时间花在I/O上，这是一种最大化CPU使用率的好方法。你可以查看README文件，然后试一试这个功能。</p>
<h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>Redis6的模块API完全是一个新的等级了。这是Redis发展最快的部分之一，因为我们从最开始就使用模块系统来开发非常复杂的东西，而不仅仅是琐碎的示例。前端时间，我启动了Disque端口，这也促使我为模块系统带来新功能。现在，你可以把Redis看成一个框架，可以讲系统作为模块进行编写，避免从头造轮子，同时也可以获得BSD许可，Redis实际上是一个可以用来编写系统的开放平台。</p>
<h3 id="内部"><a href="#内部" class="headerlink" title="内部"></a>内部</h3><p>Redis内部有非常多的优化：复制命令的方式发生了很大变化，过期使用了另一种算法，该算法更快且缓存更明显。</p>
<h3 id="Status和ETA"><a href="#Status和ETA" class="headerlink" title="Status和ETA"></a>Status和ETA</h3><p>现在我们已经有了RC1，我希望在3月末，最晚5月，你就可以看到GA版本准备就绪。</p>
<p>现在，Redis6绝对是可测试的，并且遇到错误的机会很小。但它包含了大量的代码更改，并且新功能由新的代码组成，也从没有人在生产环境中运行过这些代码。所以如果你找到了bug，请以最好的方式描述一下发生的情况并报告给我们。</p>
<p>感谢所有人为该版本做出贡献的人和在接下来几个月中帮助我们维护它处于稳定状态的人。</p>
<p>啊，我差点忘了，这是第6版的LOLWUT命令交互图：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1577098772/Blog/Redis/lolwut6.png" alt="lolwut6"></p>
<p>每次运行都会随机生成不同的景观。</p>
<h3 id="博客原文地址"><a href="#博客原文地址" class="headerlink" title="博客原文地址"></a>博客原文地址</h3><p> <a href="http://antirez.com/news/131" target="_blank" rel="noopener">http://antirez.com/news/131</a> </p>
<h3 id="译者注"><a href="#译者注" class="headerlink" title="译者注"></a>译者注</h3><p>正如作者所说，Redis6带来了很多新的功能。刚发布的版本肯定不能拿到线上去玩，但是自己折腾一下，提前感受一下也不错。特别是RESP3和客户端缓存都是我比较期待的。另外还有新的过期算法，这个之前没怎么听说，也值得研究一下。不说了，我先下为敬。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>volatile vs synchronized</title>
    <url>/2018/08/20/volatile-vs-synchronized/</url>
    <content><![CDATA[<p>今天来聊一聊Java并发编程中两个常用的关键字：volatile和synchronized。<a id="more"></a></p>
<p>在介绍这两个关键字之前，首先要搞明白并发编程中的两个问题：</p>
<ol>
<li>线程之间是如何通信的</li>
<li>线程之间如何同步</li>
</ol>
<h4 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h4><p>Java线程的通信由Java内存模型（JMM）控制，Java内存模型的抽象如图：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1534777852/Blog/volatile/JMM.png" alt="图片来源https://www.jianshu.com/p/8c574a6db31b"></p>
<p>Java线程之间的通信总是隐式进行，通信过程对程序员完全透明。多个线程通过读-写共享内存来实现通信。</p>
<p>图中线程A与线程B通信的具体步骤是：</p>
<ol>
<li>线程A把更新过的共享变量刷新到主内存中</li>
<li>线程B从主内存读取共享变量</li>
</ol>
<p>例如，共享变量x的初始值为0，线程A将x修改为1（x=x+1），线程B读取到的x就是1，对于程序员来讲，就是线程A给线程B发消息说它把x的值更新为1。</p>
<p>第一个问题搞明白了，再思考一下第二个问题。线程之间如何同步？在并发编程中，有三个重要的概念：原子性、可见性、一致性。</p>
<h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>在Java中，对基本数据类型的读取和赋值操作都属于原子操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span>;</span><br><span class="line">x = x + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>上面两条语句中，第一句是原子操作，而第二句不是，为什么呢？实际上，第二句代码被编译为3条指令：</p>
<ul>
<li>从内存中取x的值</li>
<li>x+1操作</li>
<li>计算结果存入内存</li>
</ul>
<h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>当多个线程访问同一变量时，如果有一个线程修改了这个变量，那么其他线程立刻可以看到修改后的值。</p>
<h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>CPU执行指令是按照先后顺序执行的，但是指令的顺序并不一定等同于代码的顺序，编译器编译过程中，为了提高性能，常常进行指令重排序。这种重排序不会改变单线程的语义，也就是说，你写的一段代码如果是单线程执行，编译器可能对执行进行重排序，但不论如何排序，最后得到的结果都是相同的。</p>
<p>另外，如果存在数据依赖性，编译器不会改变依赖关系的执行顺序。数据依赖性是指两个操作访问同一个变量，其中一个是写操作，那么这两个操作就有数据依赖性。</p>
<p>重排序对应多线程有哪些影响呢，我们通过一段代码来看一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReorderExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a = <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line">        flag = <span class="keyword">true</span>; <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Public <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123; <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">int</span> i = a * a; <span class="comment">// 4</span></span><br><span class="line">    	……</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中，flag是变量a被初始化的标识，如果此时有两个线程A和B，A执行writer()方法，B执行reader()方法。由于1和2、3和4不存在数据依赖性，那么就有可能出现这种情况：</p>
<ul>
<li>A先执行语句2</li>
<li>B执行了语句3和4</li>
<li>A执行语句1</li>
</ul>
<p>最终的结果并不是我们想要的，此时，重排序破坏了语义。</p>
<h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>对于上面所说的线程同步问题如何避免呢？可以使用Java中的volatile和synchronized这两个关键字。</p>
<h5 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h5><p>volatile关键字比较轻量级，只可以修饰变量。volatile修饰的变量，如果值被更新，会立即刷新主内存，而读volatile修饰的变量时，JMM会把线程对应的本地内存置为无效，从主内存中读取。这样volatile就可以保证线程的可见性。</p>
<p>volatile关键字在一定程度上可以保证有序性：</p>
<ul>
<li>当第二个操作是volatile写时，不能进行重排序</li>
<li>当第一个操作是volatile读时，不能进行重排序</li>
<li>当第一个操作是volatile写，第二个操作是volatile读时，不能重排序</li>
</ul>
<p>为了实现这些语义，JMM采用屏障插入策略：</p>
<ul>
<li>在volatile写操作前插入StoreStore屏障，后面插入StoreLoad屏障</li>
<li>在volatile读操作后面插入LoadLoad屏障和LoadStore屏障</li>
</ul>
<p>也就是说，volatile写操作前的所有写操作都必须执行完，且需要等到volatile写操作执行后才能执行读操作。volatile读操作执行完之后才可以进行其他操作。也就是说volatile相当于一个屏障，其前面的操作不能放到volatile操作后面，后面的操作也不能放到volatile操作前面。</p>
<h5 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h5><p>synchronized比较重量级，可以用来修饰方法。synchronized关键字是给修饰对象加锁，只有获得锁的线程才可以执行，执行完后释放锁。因此synchronized保证了原子性和可见性。</p>
<hr>
<p>文中图片来源于网络</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>王小锤学Java：retainAll函数那点儿事</title>
    <url>/2019/03/13/retainAll%E5%87%BD%E6%95%B0%E9%82%A3%E7%82%B9%E5%84%BF%E4%BA%8B/</url>
    <content><![CDATA[<p>王小锤是一家电商网站的Java程序员，下午刚打开电脑，公司的运营妹子小美就过来找他：“小锤，你能帮我导一份数据吗？我需要昨天成为SVIP用户，并且之前给过差评的这些账号，不过要把一个叫大宝的账号去掉，他老板亲戚。”对于小美的需求，小锤从来没有拒绝过，这次也不例外。<a id="more"></a></p>
<p>答应小美之后，小锤心想，这么简单的事情，一个SQL就搞定了。小美又要夸我效率高了，想想还有点小激动呢。小锤打开电脑的一瞬间整个人都不好了。原来今天早上下班前，他才刚刚完成微服务的拆分。现在订单和用户已经分成了两个服务，评价表和用户等级表也已经在两个数据库里了。这就尴尬了，本来一个SQL能解决的事情，现在还需要跨服务调接口了。</p>
<p>不过小锤马上就有思路了：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1552493631/Blog/Other/%E5%B0%8F%E9%94%A4%E5%B7%A5%E4%BD%9C%E6%B5%81.png" alt="小锤的思路"></p>
<p>有了思路之后，小锤立刻就开始写代码了。</p>
<p>两分钟后……新鲜的代码出炉了（这里给个类似的Demo）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoBadReviewSVIP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] svipArr = <span class="keyword">new</span> String[]&#123;<span class="string">"大宝"</span>,<span class="string">"凉凉"</span>,<span class="string">"Tom"</span>&#125;;</span><br><span class="line">        String[] badReviewUserArr = <span class="keyword">new</span> String[]&#123;<span class="string">"凉凉"</span>,<span class="string">"Tom"</span>,<span class="string">"大宝"</span>,<span class="string">"小锤"</span>&#125;;</span><br><span class="line">        List&lt;String&gt; svips = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(svipArr));<span class="comment">//从用户服务查</span></span><br><span class="line">        svips.remove(<span class="string">"大宝"</span>);</span><br><span class="line">        List&lt;String&gt; badReviewUsers = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(badReviewUserArr));<span class="comment">//从订单服务查</span></span><br><span class="line">        <span class="keyword">if</span> (svips.retainAll(badReviewUsers)) &#123;</span><br><span class="line">            System.out.println(svips);</span><br><span class="line">            System.out.println(<span class="string">"有交集"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"没有交集，告诉小美"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小锤先运行了一下，发现结果是没有交集，于是小锤告诉小美：“没有你要的用户，昨天新的SVIP都没有给过差评。”小美说：“不可能，老板说有一个叫Tom的用户就给了差评，你再好好查查。”</p>
<p>小锤一查发现Tom真的给了差评，而且昨天刚刚成为SVIP。到底是哪里出了问题呢？小锤对着代码看了一个多小时也没发现问题，于是向身边的大锤请教。大锤只看了一眼，告诉他if的条件不对，让他看retainAll的具体实现。</p>
<h4 id="retainAll的实现"><a href="#retainAll的实现" class="headerlink" title="retainAll的实现"></a>retainAll的实现</h4><p>于是小锤就开始看retainAll的源码了，发现它调用了一个batchRemove的私有方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="comment">//w表示两个list的公共元素个数</span></span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">            <span class="comment">//如果有公共元素，存入elementData</span></span><br><span class="line">            <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">                elementData[w++] = elementData[r];</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// c.contains()抛异常，就把剩余元素复制到elementData</span></span><br><span class="line">        <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">            System.arraycopy(elementData, r,</span><br><span class="line">                             elementData, w,</span><br><span class="line">                             size - r);</span><br><span class="line">            <span class="comment">//此时w为调用方list的长度</span></span><br><span class="line">            w += size - r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果元素数量改变</span></span><br><span class="line">        <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">            <span class="comment">// 多余空间教给GC</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</span><br><span class="line">                elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//记录list修改的次数</span></span><br><span class="line">            modCount += size - w;</span><br><span class="line">            <span class="comment">//重新设置list大小</span></span><br><span class="line">            size = w;</span><br><span class="line">            <span class="comment">//返回true</span></span><br><span class="line">            modified = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这么一看小锤就明白了，对于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">listA.retainAll(listB)</span><br></pre></td></tr></table></figure>
<p>listA中保存了listA和listB的交集，如果listA中元素数量改变，那么就返回true；如果listA的元素不变，则返回false。</p>
<p>也就是说，判断两个list是否有交集，只需要执行上述代码，然后判断listA的size是否大于0就可以了。</p>
<p>想通了这一点，小锤马上修改了代码，重新运行，得到正确结果，并且把结果告诉了小美。</p>
<p>万万没想到，小锤最后仍然没有得到小美的夸奖，因为所有的SVIP都给了差评，小美要负责挨个询问原因并且帮助他们解决问题，所以根本没有时间搭理小锤。</p>
<h4 id="日常自黑"><a href="#日常自黑" class="headerlink" title="日常自黑"></a>日常自黑</h4><p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1552574758/Blog/Other/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91.jpg" alt="斐波那契程序员"></p>
]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入坑指南：齐头并进（下）</title>
    <url>/2020/03/23/Rust%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97%EF%BC%9A%E9%BD%90%E5%A4%B4%E5%B9%B6%E8%BF%9B%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<p>前文中我们聊了Rust如何管理线程以及如何利用Rust中的锁进行编程。今天我们继续学习并发编程。<a id="more"></a></p>
<h3 id="原子类型"><a href="#原子类型" class="headerlink" title="原子类型"></a>原子类型</h3><p>许多编程语言都会提供原子类型，Rust也不例外，在前文中我们聊了Rust中锁的使用，有了锁，就要小心死锁的问题，Rust虽然声称是安全并发，但是仍然无法帮助我们解决死锁的问题。原子类型就是编程语言为我们提供的无锁并发编程的最佳手段。熟悉Java的同学应该知道，Java的编译器并不能保证代码的执行顺序，编译器会对我们的代码的执行顺序进行优化，这一操作成为指令重排。而Rust的多线程内存模型不会进行指令重排，它可以保证指令的执行顺序。</p>
<p>通常来讲原子类型会提供以下操作：</p>
<ul>
<li>Load：从原子类型读取值</li>
<li>Store：为一个原子类型写入值</li>
<li>CAS（Compare-And-Swap）：比较并交换</li>
<li>Swap：交换</li>
<li>Fetch-add（sub/and/or）：表示一系列的原子的加减或逻辑运算</li>
</ul>
<p>Ok，这些基础的概念聊完以后，我们就来看看Rust为我们提供了哪些原子类型。Rust的原子类型定义在标准库<code>std::sync::atomic</code>中，目前它提供了12种原子类型。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1584877213/Blog/rust/13/rust13-1.png" alt="原子类型"></p>
<p>下面这段代码是Rust演示了如何用原子类型实现一个自旋锁。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::sync::Arc;</span><br><span class="line"><span class="keyword">use</span> std::sync::atomic::&#123;AtomicUsize, Ordering&#125;;</span><br><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> spinlock = Arc::new(AtomicUsize::new(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">let</span> spinlock_clone = spinlock.clone();</span><br><span class="line">    <span class="keyword">let</span> thread = thread::spawn(<span class="keyword">move</span>|| &#123;</span><br><span class="line">        spinlock_clone.store(<span class="number">0</span>, Ordering::SeqCst);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">while</span> spinlock.load(Ordering::SeqCst) != <span class="number">0</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Err</span>(panic) = thread.join() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Thread had an error: &#123;:?&#125;"</span>, panic);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们利用AtomicUsize的store方法将它的值设置为0，然后用load方法获取到它的值，如果不是0，则程序一直空转。在store和load方法中，我们都用到了一个参数：<code>Ordering::SeqCst</code>，在声明中能看出来它也是属于atomic包。</p>
<p>我们在文档中发现它是一个枚举。其定义为</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">enum</span> <span class="title">Ordering</span></span> &#123;</span><br><span class="line">    Relaxed,</span><br><span class="line">    Release,</span><br><span class="line">    Acquire,</span><br><span class="line">    AcqRel,</span><br><span class="line">    SeqCst,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它的作用是将内存顺序的控制权交给开发者，我们可以自己定义底层的内存排序。下面我们一起来看一下这5种排序分别代表什么意思</p>
<ul>
<li>Relaxed：表示「没有顺序」，也就是开发者不会干预线程顺序，线程只进行原子操作</li>
<li>Release：对于使用Release的store操作，在它之前所有使用Acquire的load操作都是可见的</li>
<li>Acquire：对于使用Acquire的load操作，在它之前的所有使用Release的store操作也都是可见的</li>
<li>AcqRel：它代表读时使用Acquire顺序的load操作，写时使用Release顺序的store操作</li>
<li>SeqCst：使用了SeqCst的原子操作都必须先存储，再加载。</li>
</ul>
<p>一般情况下建议使用SeqCst，而不推荐使用Relaxed。</p>
<h3 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h3><p>Go语言文档中有这样一句话：<strong>不要使用共享内存来通信，应该使用通信实现共享内存。</strong></p>
<p>Rust标准库选择了CSP并发模型，也就是依赖channel来进行线程间的通信。它的定义是在标准库<code>std::sync::mpsc</code>中，里面定义了三种类型的CSP进程：</p>
<ul>
<li>Sender：发送异步消息</li>
<li>SyncSender：发送同步消息</li>
<li>Receiver：用于接收消息</li>
</ul>
<p>我们通过一个栗子来看一下channel是如何创建并收发消息的。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (tx, rx) = mpsc::channel();</span><br><span class="line"></span><br><span class="line">    thread::spawn(<span class="keyword">move</span> || &#123;</span><br><span class="line">        <span class="keyword">let</span> val = <span class="built_in">String</span>::from(<span class="string">"hi"</span>);</span><br><span class="line">        tx.send(val).unwrap();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> received = rx.recv().unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Got: &#123;&#125;"</span>, received);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，我们先是使用了<code>channel()</code>函数来创建一个channel，它会返回一个（Sender, Receiver）元组。它的缓冲区是无界的。此外，我们还可以使用<code>sync_channel()</code>来创建channel，它返回的则是（SyncSender, Receiver）元组，这样的channel发送消息是同步的，并且可以设置缓冲区大小。</p>
<p>接着，在子线程中，我们定义了一个字符串变量，并使用<code>send()</code>函数向channel中发送消息。这里send返回的是一个Result类型，所以使用unwrap来传播错误。</p>
<p>在main函数最后，我们又用<code>recv()</code>函数来接收消息。</p>
<p>这里需要注意的是，<code>send()</code>函数会转移所有权，所以，如果你在发送消息之后再使用val变量时，程序就会报错。</p>
<p>现在我们已经掌握了使用Channel进行线程间通信的方法了，这里还有一段代码，感兴趣的同学可以自己执行一下这段代码看是否能够顺利执行。如果不能，应该怎么修改这段代码呢？</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (tx, rx) = mpsc::channel();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tx = tx.clone();</span><br><span class="line">        thread::spawn(<span class="keyword">move</span> || &#123;</span><br><span class="line">            tx.send(i).unwrap();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> rx <span class="keyword">in</span> rx.iter() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>在实际工作中，如果每次都要创建新的线程，每次创建、销毁线程的开销就会变得非常可观，甚至会成为系统性能的瓶颈。对于这种问题，我们通常使用线程池来解决。</p>
<p>Rust的标准库中没有现成的线程池给我们使用，不过还是有一些第三方库来支持的。这里我使用的是<a href="https://crates.io/crates/threadpool" target="_blank" rel="noopener">threadpool</a>。</p>
<p>首先需要在Cargo.toml中增加依赖<code>threadpool = &quot;1.7.1&quot;</code>。然后就可以使用<code>use threadpool::ThreadPool;</code>将ThreadPool引入我们的程序中了。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> threadpool::ThreadPool;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc::channel;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> n_workers = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">let</span> n_jobs = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">let</span> pool = ThreadPool::new(n_workers);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (tx, rx) = channel();</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..n_jobs &#123;</span><br><span class="line">        <span class="keyword">let</span> tx = tx.clone();</span><br><span class="line">        pool.execute(<span class="keyword">move</span>|| &#123;</span><br><span class="line">            tx.send(<span class="number">1</span>).expect(<span class="string">"channel will be there waiting for the pool"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(rx.iter().take(n_jobs).fold(<span class="number">0</span>, |a, b| a + b), <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们使用<code>ThreadPool::new()</code>来创建一个线程池，初始化4个工作线程。使用时用<code>execute()</code>方法就可以拿出一个线程来进行具体的工作。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天我们介绍了Rust并发编程的三种特性：原子类型、线程间通信和线程池的使用。</p>
<p>原子类型是我们进行无锁并发的重要手段，线程间通信和线程池也都是工作中所必须使用的。当然并发编程的知识远不止于此，大家有兴趣的可以自行学习也可以与我交流讨论。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】antirez：Redis6将支持客户端缓存</title>
    <url>/2019/09/07/%E3%80%90%E8%AF%91%E3%80%91antirez%EF%BC%9ARedis6%E5%B0%86%E6%94%AF%E6%8C%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>本文翻译自Redis作者antirez的一篇博客，原文地址是：<a href="http://antirez.com/news/130" target="_blank" rel="noopener">http://antirez.com/news/130</a><a id="more"></a></p>
<p>纽约Redis日已经结束了，我仍然与意大利时区同步，早上5点30起床，并立即走上了曼哈顿的街道，我很喜欢这里的风景，并且享受着成为这里的一部分。当时我正在考虑发布Redis 6的release版本，这是在未来一段时间最重要的事了。新版本的Redis协议（RESP3）推进得还很慢，如果没有一个好的理由，明智的人是不会更换工具的。但我为什么要坚持提升协议呢？有两个主要的原因，一是需要给客户端提供更加具有语义的回复，二是提供一个旧版本不能实现的新功能：客户端缓存。</p>
<p>时间倒回一年前，我到达圣安东尼奥的Redis Conf 2018。当时公司就有一个共识是客户端缓存是Redis在未来非常重要的事情。如果我们需要更快的存储和更快的缓存，我们就需要在客户端存储一部分信息。这是提供低延迟和大规模数据服务的很自然的想法。事实上，基本上每个大公司也都是这样做的，因为这是唯一的办法。然而Redis没有办法在这一过程中协助客户。一个巧合让Ben Malec想要在Redis Conf上做一些关于客户端缓存的演讲，他只使用Redis提供的工具和一些非常聪明的想法。</p>
<p>作者注：演讲地址是<a href="https://www.youtube.com/watch?v=kliQLwSikO4" target="_blank" rel="noopener">https://www.youtube.com/watch?v=kliQLwSikO4</a></p>
<p>Ben的演讲启发了我，为了实现Ben的设计，其中有两个关键点。第一个是使用Redis Cluster的“hash slot”的概念，把key分成了16k个组。采用这种方式使得客户端不需要追踪每一个key的位置，可以使用一个简单的元数据来定位key所在的group。Ben使用Pub/Sub模式来通知key的改变，所以他需要应用程序的一些帮助，然而这种模式是很固定的。要修改一个key？还需要发布失效消息。在客户端是否缓存了key呢？要记住缓存每个key和收到失效消息时的时间戳，记住每个slot的失效时间。当使用一个缓存的key时，先做一个懒清除，通过检查缓存key的时间戳是否早于slot收到失效信息的时间戳。这种情况下，这个key就是过时的数据，你可以再次访问服务器。</p>
<p>在看完演讲之后，我意识到这是一个在服务器内使用的好主意，为了让Redis能够为客户端做一部分工作，是客户端缓存更加简单高效，所以我回到家写下了我的设计文档：<a href="https://groups.google.com/d/msg/redis-db/xfcnYkbutDw/kTwCozpBBwAJ" target="_blank" rel="noopener">https://groups.google.com/d/msg/redis-db/xfcnYkbutDw/kTwCozpBBwAJ</a></p>
<p>但为了实现我的设计，我必须专注于修改Redis协议使它变得更加完善，所以我开始编写RESP3和Redis 6的其他特性（比如ACL）的规范和代码，客户端缓存是Redis许多迭代想法中的一种，有些想法因为时间不够放弃了。</p>
<p>当时我在纽约街头思考这个想法。后来和一些朋友去吃午饭喝咖啡。当我返回酒店房间后，距离第二天起飞还有一整晚的时间，所以我开始按照一年前写的提案来写Redis 6的客户端缓存的实现。</p>
<p>Redis服务器助理客户端缓存，最终叫做“tracking”（我也可能改主意），是一个由几个关键想法组成的非常简单功能。</p>
<p>key空间被分割到”caching slots“，但他们比Ben使用的hash slots要多得多。我们使用CRC64的24位输出，所以有超过1600万个不同的slot。为什么这么多呢？因为我认为你想要有一个1亿key的服务器。然而一个失效信息影响的key不应该多于客户端缓存中的key。Redis中失效表占用130M的内存：8字节的指针指向16M的条目。这对我来说是可以接受的，如果你想要使用新功能，你将充分利用你在客户端的所有内存，所以使用130MB在服务器端是好的，你可以获得更细粒度的失效。</p>
<p>客户端使用“opt in”方法开启这个功能，只需要一个简单的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CLIENT TRACKING on</span><br></pre></td></tr></table></figure>
<p>服务器总是返回+OK，从这时起，每个命令都在命令表中被标记为“只读”，不再给调用者返回keys，并记住客户端请求的所有的key。保存这种信息时非常简单的，每个Redis客户端都有自己的唯一ID，所以如果ID是123的客户端发送了MGET命令，需要从slot 1，2和5获取key，那么失效表中我们就需要记录如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 -&gt; [123]</span><br><span class="line">2 -&gt; [123]</span><br><span class="line">5 -&gt; [123]</span><br></pre></td></tr></table></figure>
<p>接着，ID为444的客户端也需要到slot5请求key了，那么表信息将变成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5 -&gt; [123,444]</span><br></pre></td></tr></table></figure>
<p>现在其他客户端修改了slot 5中的某个key，Redis将会检查失效表，发现客户端123和444都缓存了这个slot上的key。我们将会给这些客户端发送失效信息，然后会记录下slot最后的失效时间戳，并在以后懒检查缓存对象的时间戳，并对照后判断是否失效。此外，客户端可以回收表中缓存的指定slot的对象。这种具有24位hash函数的方法不是问题，因为我们即使缓存几千万的key，也不会有很长的列表。发送了失效信息后，我们就可以删除失效表中的项，这样直到这些客户端不再读这些slot的key，我们就不再向他们发送失效消息。</p>
<p>需要注意的是，客户端不必强制使用24位hash函数。也可能使用20位，然后移动Redis发送的失效消息的slot。不确定是否有很多很好的理由这样做，但是内存受限时，这可能是一种想法。</p>
<p>如果你密切关注我说的话，你会开始考虑同一连接既会接收到正常的客户端回复，又会接收失效消息。这可以通过RESP3实现，因为失效作为“推送”消息类型发送。如果客户端是一个阻塞类型的，并且不是事件驱动类型的客户端，就会变得比较复杂：</p>
<p>应用程序需要一些方法来不时读取新数据，这看起来既复杂又脆弱。在这种情况下，为了接收失效消息，使用另一个应用程序线程和不同的客户端可能会更好。所以你可以使用以下命令来允许这样的操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CLIENT TRACKING on REDIRECT 1234</span><br></pre></td></tr></table></figure>
<p>基本上我们可以说我们使用当前连接获得的所有key，并希望失效消息发送到客户端1234。在连接池的情况下多个客户端可能会要求将失效消息重定向到单个客户端。你需要做的就是创建特殊连接以接收失效消息，调用CLIENT ID以了解此客户端连接哪个ID，然后启用跟踪。</p>
<p>现在只剩下一个问题了：如果我们失去了失效连接怎么办？我们可能因为不能接收到失效消息而陷入麻烦。通常，应用会检测连接，尝试重连，并清除缓存。为了确保失效连接处于连接状态，不时地向服务器发送ping请求可能是一个更好的主意。然而，为了降低过期数据的风险，Redis也将开始通知客户端将失效消息重定向到其他客户端，只要使用特殊的推送消息：下一个请求就会使客户端知道连接已经断开。</p>
<p>我刚才描述的已经合并到Redis的unstable分支。可能不是最终的处理方法，但是在第一个Redis 6发布版本之前还有几个月的时间，我们还有时间修改所有的事情：可以告诉我你的反馈。我也会再寻找其他RESP2可行的方法。这只有在重定向开启时才有效，并且客户端要进入Pub/Sub模式监听消息。通过这种方式，完全可以复用旧客户端。</p>
<p>我希望这足以刺激你的胃口：如果我们在Redis中运行的很好，然后记录下来，让客户端作者知道该如何支持，数据可能比以往更接近应用程序，甚至在小型团队运行的应用程序中，到目前为止还没有尝试客户端缓存。对于正在准备做的大型团队和非常大的应用程序，降低实现成本和复杂性。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】MySQL挑战：建立10万连接</title>
    <url>/2019/03/07/%E3%80%90%E8%AF%91%E3%80%91MySQL%E6%8C%91%E6%88%98%EF%BC%9A%E5%BB%BA%E7%AB%8B10%E4%B8%87%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>原文地址：<a href="https://www.percona.com/blog/2019/02/25/mysql-challenge-100k-connections/" target="_blank" rel="noopener">https://www.percona.com/blog/2019/02/25/mysql-challenge-100k-connections/</a></p>
<p>本文的目的是探索一种在一台MySQL服务器上建立10w个连接的方法。我们要建立的是可以执行查询的连接，而不是10w个空闲连接。<a id="more"></a></p>
<p>你可能会问，我的MySQL服务器真的需要10w连接吗？我见过很多不同的部署方案，例如使用连接池，每个应用的连接池里放1000个连接，部署100个这样的应用服务器。还有一些非常糟糕的实践，使用“查询慢则重连并重试”的技术。这会造成雪球效应，有可能导致在几秒内需要建立上千个连接的情况。</p>
<p>所以我决定设置一个“小目标”，看能否实现。</p>
<h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h4><p>先看一下硬件，服务器由packet.net（一个云服务商）提供，配置如下：</p>
<p>instance size: c2.medium.x86<br>Physical Cores @ 2.2 GHz<br>(1 X AMD EPYC 7401P)<br>Memory: 64 GB of ECC RAM<br>Storage : INTEL® SSD DC S4500, 480GB</p>
<p>我们需要5台这样的服务器，1台用来作MySQL服务器，其余4台作为客户端。MySQL服务器使用的是Percona  Server的带有线程池插件的MySQL 8.0.13-4，这个插件需要支持上千个连接。</p>
<h4 id="初始化服务器配置"><a href="#初始化服务器配置" class="headerlink" title="初始化服务器配置"></a>初始化服务器配置</h4><p>网络设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- &#123; name: 'net.core.somaxconn', value: 32768 &#125;</span><br><span class="line">- &#123; name: 'net.core.rmem_max', value: 134217728 &#125;</span><br><span class="line">- &#123; name: 'net.core.wmem_max', value: 134217728 &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_rmem', value: '4096 87380 134217728' &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_wmem', value: '4096 87380 134217728' &#125;</span><br><span class="line">- &#123; name: 'net.core.netdev_max_backlog', value: 300000 &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_moderate_rcvbuf', value: 1 &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_no_metrics_save', value: 1 &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_congestion_control', value: 'htcp' &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_mtu_probing', value: 1 &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_timestamps', value: 0 &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_sack', value: 0 &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_syncookies', value: 1 &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_max_syn_backlog', value: 4096 &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_mem', value: '50576   64768 98152' &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.ip_local_port_range', value: '4000 65000' &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.netdev_max_backlog', value: 2500 &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_tw_reuse', value: 1 &#125;</span><br><span class="line">- &#123; name: 'net.ipv4.tcp_fin_timeout', value: 5 &#125;</span><br></pre></td></tr></table></figure>
<p>系统限制设置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">LimitNOFILE=1000000</span><br><span class="line">LimitNPROC=500000</span><br></pre></td></tr></table></figure>
<p>相应的MySQL配置（my.cnf文件）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">back_log=3500</span><br><span class="line">max_connections=110000</span><br></pre></td></tr></table></figure>
<p>客户端使用的是sysbench0.5版本，而不是1.0.x。具体原因我们在后面做解释。</p>
<p>执行命令：sysbench –test=sysbench/tests/db/select.lua –mysql-host=139.178.82.47 –mysql-user=sbtest–mysql-password=sbtest –oltp-tables-count=10 –report-interval=1 –num-threads=10000 –max-time=300 –max-requests=0 –oltp-table-size=10000000 –rand-type=uniform –rand-init=on run</p>
<h4 id="第一步，10-000个连接"><a href="#第一步，10-000个连接" class="headerlink" title="第一步，10,000个连接"></a>第一步，10,000个连接</h4><p>这一步非常简单，我们不需要做过多调整就可以实现。这一步只需要一台机器做客户端，不过客户端有可能会有如下错误：</p>
<p><code>FATAL: error 2004: Can&#39;t create TCP/IP socket (24)</code></p>
<p>这是由于打开文件数限制，这个限制限制了TCP/IP的sockets数量，可以在客户端上进行调整：</p>
<p><code>ulimit -n100000</code></p>
<p>此时我们来观察一下性能：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[  26s] threads: 10000, tps: 0.00, reads: 33367.48, writes: 0.00, response time: 3681.42ms (95%), errors: 0.00, reconnects:  0.00</span><br><span class="line">[  27s] threads: 10000, tps: 0.00, reads: 33289.74, writes: 0.00, response time: 3690.25ms (95%), errors: 0.00, reconnects:  0.00</span><br></pre></td></tr></table></figure>
<h4 id="第二步，25-000个连接"><a href="#第二步，25-000个连接" class="headerlink" title="第二步，25,000个连接"></a>第二步，25,000个连接</h4><p>这一步会在MySQL服务端发生错误：</p>
<p><code>Can&#39;t create a new thread (errno 11); if you are not out of available memory, you can consult the manualfor a possible OS-dependent bug</code></p>
<p>关于这个问题的解决办法可以看这个链接：</p>
<p><a href="https://www.percona.com/blog/2013/02/04/cant_create_thread_errno_11/" target="_blank" rel="noopener">https://www.percona.com/blog/2013/02/04/cant_create_thread_errno_11/</a></p>
<p>不过这个办法不适用于我们现在的情况，因为我们已经把所有限制调到最高：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/`pidof mysqld`/limits</span><br><span class="line">Limit                     Soft Limit Hard Limit           Units</span><br><span class="line">Max cpu time              unlimited  unlimited            seconds</span><br><span class="line">Max file size             unlimited  unlimited            bytes</span><br><span class="line">Max data size             unlimited  unlimited            bytes</span><br><span class="line">Max stack size            8388608    unlimited            bytes</span><br><span class="line">Max core file size        0          unlimited            bytes</span><br><span class="line">Max resident set          unlimited  unlimited            bytes</span><br><span class="line">Max processes             500000     500000               processes</span><br><span class="line">Max open files            1000000    1000000              files</span><br><span class="line">Max locked memory         16777216   16777216             bytes</span><br><span class="line">Max address space         unlimited  unlimited            bytes</span><br><span class="line">Max file locks            unlimited  unlimited            locks</span><br><span class="line">Max pending signals       255051     255051               signals</span><br><span class="line">Max msgqueue size         819200     819200               bytes</span><br><span class="line">Max nice priority         0          0</span><br><span class="line">Max realtime priority     0          0</span><br><span class="line">Max realtime timeout      unlimited unlimited            us</span><br></pre></td></tr></table></figure>
<p>这也是为什么我们最开始要选择有线程池的服务：<a href="https://www.percona.com/doc/percona-server/8.0/performance/threadpool.html" target="_blank" rel="noopener">https://www.percona.com/doc/percona-server/8.0/performance/threadpool.html</a></p>
<p>在my.cnf文件中加上下面这行设置，然后重启服务</p>
<p><code>thread_handling=pool-of-threads</code></p>
<p>查看一下结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[   7s] threads: 25000, tps: 0.00, reads: 33332.57, writes: 0.00, response time: 974.56ms (95%), errors: 0.00, reconnects:  0.00</span><br><span class="line">[   8s] threads: 25000, tps: 0.00, reads: 33187.01, writes: 0.00, response time: 979.24ms (95%), errors: 0.00, reconnects:  0.00</span><br></pre></td></tr></table></figure>
<p>吞吐量相同，但是又95%的响应从3690 ms降到了979 ms。</p>
<h4 id="第三步，50-000个连接"><a href="#第三步，50-000个连接" class="headerlink" title="第三步，50,000个连接"></a>第三步，50,000个连接</h4><p>到这里，我们遇到了最大的挑战。首先尝试建立5w连接的时候，sysbench报错：</p>
<p><code>FATAL: error 2003: Can&#39;t connect to MySQL server on &#39;139.178.82.47&#39; (99)</code></p>
<p>Error (99)错误比较神秘，它意味着不能分配指定的地址。这个问题是由一个应用可以打开的端口数限制引起的，我们的系统默认配置是：</p>
<p><code>cat /proc/sys/net/ipv4/ip_local_port_range : 32768   60999</code></p>
<p>这表示我们只有28,231可用端口（60999减32768），或者是你最多能建立的到指定IP地址的TCP连接数。你可以在服务器和客户端扩宽这个范围：</p>
<p><code>echo 4000 65000 &gt; /proc/sys/net/ipv4/ip_local_port_range</code></p>
<p>这样我们就能建立61,000个连接了，这已经接近一个IP可用端口的最大限制了（65535）。这里的关键点是，如果我们想要达到10w连接，就需要为MySQL服务器分配更多的IP地址，所以我为MySQL服务器分配了两个IP地址。</p>
<p>解决了端口个数问题后，我们又遇到了新的问题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysbench 0.5:  multi-threaded system evaluation benchmark</span><br><span class="line">Running the test with following options:</span><br><span class="line">Number of threads: 50000</span><br><span class="line">FATAL: pthread_create() for thread #32352 failed. errno = 12 (Cannot allocate memory)</span><br></pre></td></tr></table></figure>
<p>这个问题是由sysbench的内存分配问题引起的。sysbench只能分配的内存只能创建32,351个连接，这个问题在1.0.x版本中更为严重。</p>
<h5 id="Sysbench-1-0-x的限制"><a href="#Sysbench-1-0-x的限制" class="headerlink" title="Sysbench 1.0.x的限制"></a>Sysbench 1.0.x的限制</h5><p>Sysbench 1.0.x版本使用了不同的Lua编译器，导致我们不可能创建超过4000个连接。所以看起来Sysbench比 Percona Server更早到达了极限，所以我们需要使用更多的客户端。每个客户端最多32,351个连接的话，我们最少要使用4个客户端才能达到10w连接的目标。</p>
<p>为了达到5w连接，我们使用了两台机器做客户端，每台机器开启25,000个线程。结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[  29s] threads: 25000, tps: 0.00, reads: 16794.09, writes: 0.00, response time: 1799.63ms (95%), errors: 0.00, reconnects:  0.00</span><br><span class="line">[  30s] threads: 25000, tps: 0.00, reads: 16491.03, writes: 0.00, response time: 1800.70ms (95%), errors: 0.00, reconnects:  0.00</span><br></pre></td></tr></table></figure>
<p>吞吐量和上一步差不多（总的tps是16794*2 = 33588），但是性能降低了，有95%的响应时间长了一倍。这是意料之中的事情，因为与上一步相比，我们的连接数扩大了一倍。</p>
<h4 id="第四步，75-000个连接"><a href="#第四步，75-000个连接" class="headerlink" title="第四步，75,000个连接"></a>第四步，75,000个连接</h4><p>这一步我们再增加一台服务器做客户端，每台客户端上同样是跑25,000个线程。结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ 157s] threads: 25000, tps: 0.00, reads: 11633.87, writes: 0.00, response time: 2651.76ms (95%), errors: 0.00, reconnects:  0.00</span><br><span class="line">[ 158s] threads: 25000, tps: 0.00, reads: 10783.09, writes: 0.00, response time: 2601.44ms (95%), errors: 0.00, reconnects:  0.00</span><br></pre></td></tr></table></figure>
<h4 id="第五步，100-000个连接"><a href="#第五步，100-000个连接" class="headerlink" title="第五步，100,000个连接"></a>第五步，100,000个连接</h4><p>终于到站了，这一步同样没什么困难，只需要再开一个客户端，同样跑25,000个线程。结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ 101s] threads: 25000, tps: 0.00, reads: 8033.83, writes: 0.00, response time: 3320.21ms (95%), errors: 0.00, reconnects:  0.00</span><br><span class="line">[ 102s] threads: 25000, tps: 0.00, reads: 8065.02, writes: 0.00, response time: 3405.77ms (95%), errors: 0.00, reconnects:  0.00</span><br></pre></td></tr></table></figure>
<p>吞吐量仍然保持在32260的水平（8065*4），95%的响应时间是3405ms。</p>
<p>这里有个非常重要的事情，想必大家已经发现了：在有线程的情况下10w连接数的响应速度甚至要优于没有线程池的情况下的1w连接数的响应速度。<strong>线程池使得Percona Server可以更加有效的管理资源，然后提供更好的响应速度。</strong></p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>10w连接数是可以实现的，并且可以更多，实现这个目标有三个重要的组件：</p>
<ol>
<li>Percona Server的线程池</li>
<li>正确的网络设置</li>
<li>为MySQL服务器配置多个IP地址（每个IP限制65535个连接）</li>
</ol>
<h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><p>最后贴上完整的my.cnf文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir &#123;&#123; mysqldir &#125;&#125;</span><br><span class="line">ssl=0</span><br><span class="line">skip-log-bin</span><br><span class="line">log-error=error.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line">character_set_server=latin1</span><br><span class="line">collation_server=latin1_swedish_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">innodb_undo_log_truncate=off</span><br><span class="line"><span class="meta">#</span><span class="bash"> general</span></span><br><span class="line">table_open_cache = 200000</span><br><span class="line">table_open_cache_instances=64</span><br><span class="line">back_log=3500</span><br><span class="line">max_connections=110000</span><br><span class="line"><span class="meta">#</span><span class="bash"> files</span></span><br><span class="line">innodb_file_per_table</span><br><span class="line">innodb_log_file_size=15G</span><br><span class="line">innodb_log_files_in_group=2</span><br><span class="line">innodb_open_files=4000</span><br><span class="line"><span class="meta">#</span><span class="bash"> buffers</span></span><br><span class="line">innodb_buffer_pool_size= 40G</span><br><span class="line">innodb_buffer_pool_instances=8</span><br><span class="line">innodb_log_buffer_size=64M</span><br><span class="line"><span class="meta">#</span><span class="bash"> tune</span></span><br><span class="line">innodb_doublewrite= 1</span><br><span class="line">innodb_thread_concurrency=0</span><br><span class="line">innodb_flush_log_at_trx_commit= 0</span><br><span class="line">innodb_flush_method=O_DIRECT_NO_FSYNC</span><br><span class="line">innodb_max_dirty_pages_pct=90</span><br><span class="line">innodb_max_dirty_pages_pct_lwm=10</span><br><span class="line">innodb_lru_scan_depth=2048</span><br><span class="line">innodb_page_cleaners=4</span><br><span class="line">join_buffer_size=256K</span><br><span class="line">sort_buffer_size=256K</span><br><span class="line">innodb_use_native_aio=1</span><br><span class="line">innodb_stats_persistent = 1</span><br><span class="line"><span class="meta">#</span><span class="bash">innodb_spin_wait_delay=96</span></span><br><span class="line">innodb_adaptive_flushing = 1</span><br><span class="line">innodb_flush_neighbors = 0</span><br><span class="line">innodb_read_io_threads = 16</span><br><span class="line">innodb_write_io_threads = 16</span><br><span class="line">innodb_io_capacity=1500</span><br><span class="line">innodb_io_capacity_max=2500</span><br><span class="line">innodb_purge_threads=4</span><br><span class="line">innodb_adaptive_hash_index=0</span><br><span class="line">max_prepared_stmt_count=1000000</span><br><span class="line">innodb_monitor_enable = '%'</span><br><span class="line">performance_schema = ON</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】什么才是优秀的代码</title>
    <url>/2019/11/27/%E3%80%90%E8%AF%91%E3%80%91%E4%BB%80%E4%B9%88%E6%89%8D%E6%98%AF%E4%BC%98%E7%A7%80%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>究竟什么是优秀的代码？Robert Martin的一句话可以完美诠释。<a id="more"></a></p>
<blockquote>
<p>代码质量的唯一衡量标准是每分钟说多少次WTF</p>
</blockquote>
<p>我来解释一下这句话。当我在做code review时，通常会有三种不同的感受：</p>
<ul>
<li>What-the-F**k (厌恶脸) — <strong>这段代码并不是必要的</strong></li>
<li>What-the-F**k (一脸钦佩) — <strong>这家伙真聪明啊</strong></li>
<li>What-the-F**k (愤怒值爆表) — <strong>这什么垃圾玩意</strong></li>
</ul>
<p>所以当我们看代码时影响我们的第一印象的因素是什么呢？</p>
<blockquote>
<p>这是一段整洁又漂亮的代码。</p>
<p>能够写出整洁又漂亮的代码是一个优秀工程师的标志。</p>
<p><strong>It is Clean and Beautifully written code.</strong></p>
<p><strong>And writing clean and beautiful code is the mark of a GREAT softwarecraftsman.</strong></p>
</blockquote>
<p>要学会这项伟大的事业有两个关键点：<strong>知识和工作</strong>。</p>
<p>知识会教给你如何在变得更加专业的模式、原则、实践和启发式的方法。但这些知识需要你通过大量的读写、不断的实践和努力才能获得。</p>
<p>简而言之，学会如何写整洁的代码并非一件简单的事。你必须要为之付出努力，必须一次又一次的练习、发现问题、经历失败，直到正确处理为止。这一过程没有任何捷径。</p>
<p>下面我将向你介绍一些如何写出整洁且漂亮的代码的技巧。</p>
<h3 id="“What-is-in-a-NAME”"><a href="#“What-is-in-a-NAME”" class="headerlink" title="“What is in a NAME”"></a>“What is in a NAME”</h3><p>Kendrick Lamar说过：</p>
<blockquote>
<p>如果我要讲一个真实的故事，那么一定是从故事的命名开始。</p>
<p>If I’m gonna tell a real story, I’m gonna start with my name</p>
</blockquote>
<p>命名会遍布代码的每一个角落，我们会为函数、类、参数、包等命名，还会为源文件、目录命名。总之，在写代码的过程中，好的命名可能是使代码变整洁的最重要的因素。</p>
<p>你的命名应该显示出你的意图。选择一个好的名称会耗费你的一些时间，但是如果随意命名，以后你会浪费更多的时间来理解它。所以请尽可能使你的命名更加合理，读你的代码的人也会因此感谢你。</p>
<p>你要谨记的是，变量、函数和类的命名应该能回答三个问题：它为什么存在、它是做什么的、它用在哪里。</p>
<p><strong>这不仅需要良好的描述能力，还需要了解跨国界的文化背景。要教会你这些，没有人能比你自己更合适了。</strong></p>
<h3 id="“Functions-should-DO-ONLY-ONE-THING-”"><a href="#“Functions-should-DO-ONLY-ONE-THING-”" class="headerlink" title="“Functions should DO ONLY ONE THING.”"></a>“Functions should DO ONLY ONE THING.”</h3><p>我们所说的「单一责任」原则。</p>
<p>Louis Sullivan对此有过完美的描述</p>
<blockquote>
<p>形式跟随函数</p>
<p>Form follows function.</p>
</blockquote>
<p>每个系统都是由特定的编程语言构建而成。函数通常是动词，而类通常是名词。函数任何编程语言中通常都是出现在第一行，写出整洁代码的本质其实就是写出整洁的函数。</p>
<p>要想写出整洁的函数，首先应该遵循两条黄金法则：</p>
<ul>
<li>函数应该尽可能短小</li>
<li>函数应该只做一件事</li>
</ul>
<p>这意味着你的函数不应该出现嵌套的结构。所以函数的缩进级别不应该大于一个或两个，这会让你的代码更容易阅读、理解和消化。除此之外，我们还需要确保函数中的语句都处于同一抽象级别。</p>
<p>在一个函数中如果混有不同的抽象级别通常会使代码变得十分混乱，并且难以管理。优秀的工程师会把函数当作给别人讲的一段故事，而不只是编码。</p>
<p><strong>他们通常使用所选编程语言的功能来构建更加丰富、更具表现力和更加简洁的代码块。这使他们成为更好的“故事讲述者”。</strong></p>
<h3 id="“Comments-do-not-make-up-for-bad-code”"><a href="#“Comments-do-not-make-up-for-bad-code”" class="headerlink" title="“Comments do not make up for bad code”"></a>“Comments do not make up for bad code”</h3><p>Venus Williams为我们敲响警钟：</p>
<blockquote>
<p>每个人都有自己的注释，这是谣言的开始。</p>
<p>Everyone makes their own comments. That’s how rumors get started.</p>
</blockquote>
<p>注释是一把双刃剑，在正确的位置添加注释可以为他人提供最有用的帮助。另一方面，浪费空间来添加无用的注释会使代码更加的混乱。如果注释提供了错误的信息，那对代码来说可以说是一种灾难了。</p>
<p>总之，注释是一种不可缺少的恶魔。为什么呢？通常，代码的注释越旧，维护起来就越困难。很多程序员因为修改代码时不维护注释而臭名昭著。</p>
<p>随着代码的发展，代码做出了许多改动，但注释并没有随之修改，这是一个很大的问题。</p>
<p><strong>请铭记，带有少量注释的简洁代码远胜于带有大量注释的混乱代码。不要浪费时间来解释你制造的混乱，而是要花些时间来清理这些混乱。</strong></p>
<h3 id="“Formatting-Code-is-always-a-priority”"><a href="#“Formatting-Code-is-always-a-priority”" class="headerlink" title="“Formatting Code is always a priority”"></a>“Formatting Code is always a priority”</h3><p>Robert C. Martin说过</p>
<blockquote>
<p>代码格式与沟通有关，而沟通是专业开发人员的首要任务。</p>
<p>Code formatting is about communication, and communication is the professional developer’s first order of business.</p>
</blockquote>
<p>上面的说法可能不被大家认可，但这是一个优秀的开发人员的最重要的品质。格式化的代码是你心灵的窗户，我们希望人们对我们的秩序、对细节的关注和思想的清晰印象深刻。当他人看代码时，如果看到的是混乱的、开头结尾不清晰的代码块，这会直接损害我们的声誉，这一点毋庸置疑！</p>
<p>如果你认为代码“可以使用”是专业程序员的第一要务，那么你不会有很好的发展的。你今天的功能很有可能在下个版本进行更改，但代码的可读性是不会改变的。</p>
<p>当原始代码已经改的面目全非时，代码的风格和可读性将影响代码的可维护性。</p>
<p><strong>以后，你会因为自己的代码风格和纪律被人们记住，而不会因为某段代码。因此，你需要注意你的代码格式，使它受到简单的规则约束，这样的规则必须是所有团队成员都能理解的。</strong></p>
<h3 id="Write-your-“try-catch-finally”-statement-first"><a href="#Write-your-“try-catch-finally”-statement-first" class="headerlink" title="Write your “try-catch-finally” statement first"></a>Write your “try-catch-finally” statement first</h3><p>Georges Canguilhem明确提到：</p>
<blockquote>
<p>人类都会犯错误，但是坚持错误的却是恶魔。</p>
<p>To err is human, to persist in error is diabolical.</p>
</blockquote>
<p>错误处理是每个程序员都必须要做的事情，输入可能异常，设备也可能故障。作为开发人员，我们希望程序按照我们的预期来执行。然而，问题不是处理错误，而是清晰易读的错误处理方式。</p>
<p>很多代码以处理错误为主，导致主代码逻辑被淹没在其中。这种做法是完全错误的。代码应该整洁、健壮，并且以一种优雅的方式处理错误，这也是优秀工程师的一种标志。</p>
<p>其中一个错误处理方法是通过适当的<strong>try-catch</strong>代码块来捕获所有错误。在执行<strong>try-catch-finally</strong>中try部分的代码时，任何时间发生异常，都会进入catch部分执行。</p>
<p>因此，在代码中使用<strong>try-catch-finally</strong>可能是一种比较好的选择。它能帮助你在try部分定义你希望执行的代码，而不用去担心代码出错时怎么办。</p>
<p><strong>你抛出的每一个异常都应该具有完整的上下文以确定错误的来源和位置。具有创造性的错误信息会在代码写出来后很久，甚至是作者已经离开很长时间后仍然被人们记住。</strong></p>
<h3 id="Bringing-it-all-together"><a href="#Bringing-it-all-together" class="headerlink" title="Bringing it all together"></a>Bringing it all together</h3><p>那么如何综合一下上面提到的技巧呢？</p>
<blockquote>
<p>答案是代码意识，是软件工程中的一种常识。</p>
<p>The answer is code-sense; the software equivalent of common sense.</p>
</blockquote>
<p>据Robert Martin所说，”编写整洁的代码需要通过一段痛苦的过程来获得一些小技巧，这些小技巧被称为代码意识“。有些人天生就有这种感觉，而有些人则需要通过实践、坚持不懈和毅力来获取它。这种意识不仅仅是帮助我们区分好代码和坏代码，更能够给我们代码将坏代码转换成好代码的能力。</p>
<p>代码意识可以帮助开发者们选择最好的工具来指导他们创造出更有价值的整洁又漂亮的代码。</p>
<p>简而言之，具有代码意识到程序员就像是画家，他可以将一块空白的屏幕变成精美的艺术品，并被人们记住很长时间。</p>
<p>就像Harold Abelson所说的一样：</p>
<blockquote>
<p>代码写出来首先是给人读的，然后才是指导机器要怎么做。</p>
</blockquote>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>“A handbook of Agile Software Craftsmanship” — Robert Martin.</p>
<p>“A handbook of Agile estimation” — Mike Cohn</p>
<h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h3><p><a href="https://medium.com/swlh/excellent-code-clean-and-beautiful-code-b541ca4b5a39" target="_blank" rel="noopener">https://medium.com/swlh/excellent-code-clean-and-beautiful-code-b541ca4b5a39</a></p>
<h3 id="译者点评"><a href="#译者点评" class="headerlink" title="译者点评"></a>译者点评</h3><p>这位作者以一种比较激进的语言告诉大家要注意代码的可读性，不过大家的观点都很类似，无非就是命名、代码格式、注释和错误处理这些点。希望这篇有些激进的文章可以帮助到一些同学，减少别人在review你的代码时，使用WTF的次数。</p>
]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】Googler如何解决编程问题</title>
    <url>/2019/04/02/%E3%80%90%E8%AF%91%E3%80%91Googler%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BC%96%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>本文是Google工程师<a href="https://blog.usejournal.com/@steve_45636?source=user_popover" target="_blank" rel="noopener">Steve Merritt</a>的一篇博客，向大家介绍他自己和身边的同事解决编程问题的方法。</p>
<p>原文地址：<a href="https://blog.usejournal.com/how-a-googler-solves-coding-problems-ec5d59e73ec5" target="_blank" rel="noopener">https://blog.usejournal.com/how-a-googler-solves-coding-problems-ec5d59e73ec5</a> <a id="more"></a></p>
<p>在本文中，我将完整的向你介绍一种解决编程问题的策略，这个策略是我在日常工作中一直使用的，并且用它来帮助各个等级的程序员（包括新手、大学生和实习生）学习和成长。应用这个结构化流程可以最大幅度的减少那令人沮丧的调试时间，并且能够在尽可能短的时间内编写出更加整洁、错误率更低的代码。</p>
<h4 id="一步步"><a href="#一步步" class="headerlink" title="一步步"></a>一步步</h4><p>接下来我将用一个栗子来说明。</p>
<p>问题：有两个字符串<code>sourceString</code>和<code>searchString</code>，返回<code>searchString</code>在<code>sourceString</code>中第一次出现的位置，如果<code>searchString</code>不是<code>sourceString</code>的字串，就返回-1。</p>
<h4 id="第一步：画下来"><a href="#第一步：画下来" class="headerlink" title="第一步：画下来"></a>第一步：画下来</h4><p>当你拿到一个需求，马上就开始着手写代码是一个非常愚蠢的主意。在写一篇文章之前，首先要弄清楚论证和论据，并且你要保证论证是有意义的。如果你没有这么做的话，当你意识到你所写的东西前言不搭后语时，你可能会因为浪费了大把的时间而想请自己吃一顿大嘴巴子。编程也是一样的道理，甚至比这还严重，严重到像洗澡的时候把洗发水弄进眼睛里。</p>
<p>问题的解决方法通常很重要，即使它看上去很简单。在写代码之前，首先要做的就是把这个方法在纸面上呈现出来，并且保证在不同的情况下适用。</p>
<p>所以不找急着写代码，甚至都不要思考如何写。后面你会有充足的时间去敲代码，在这之前，你要把自己当成一台计算机，弄清楚你这台计算机会怎么解决这个问题。</p>
<p>你可以使用流程图，或者使用其他能帮你具象化的方法，总之我们的目标是解决问题。你可以用纸和笔随意发挥，不需要收到键盘的限制。</p>
<p>我们从一些简单的情况开始，如果一个方法是“输入一个字符串”，那么“abc”可以作为第一个例子。首先要搞清楚正确的结果是什么，然后去想怎么样得到正确的结果，并且一步一步的进行。</p>
<p>我们假设输入的字符串是这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sourceString: <span class="string">"abcdyesefgh"</span></span><br><span class="line">searchString: <span class="string">"yes"</span></span><br></pre></td></tr></table></figure>
<p>我的想法是这样的：</p>
<p>我看到了<code>searchString</code>在<code>sourceString</code>里，但是我要怎么做呢？我从<code>sourceString</code>的第一个字符开始，逐字去读，一直到最后，判断每一个三个字符是不是<code>yes</code>。比如<code>abc</code>，<code>bcd</code>，<code>cdy</code>等等。当index值为4时，我找到了字符串<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">当我们写下算法时，必须要保证我们考虑了所有的情况，并且处理了所有可能的场景。当我们找到匹配的字符串时，返回结果。如果找不到匹配的字符串，同样要返回结果。</span><br><span class="line"></span><br><span class="line">我们来尝试另一组字符串：</span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">sourceString: &quot;abcdyefg&quot;</span><br><span class="line">searchString: &quot;yes&quot;</span><br></pre></td></tr></table></figure></p>
<p>我们重复刚才的操作，当我们读到下标为4的字符时，找到的字符串是<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">我们确定这一系列步骤（程序设计中，我们称之为算法）解决了我们的问题，并且处理了两种不同的场景，每次都得到了正确的结果。这时，我们就对我们的算法比较有信心了，并且可以将它形成条目。我们一起来进行下一步：</span><br><span class="line"></span><br><span class="line">#### 第二步：用英语写下来</span><br><span class="line"></span><br><span class="line">这里我们考虑将第一步形成的算法用英语写下来。这可以使每一步变得更加具体，以便我们后面写代码的时候有所参考。</span><br><span class="line"></span><br><span class="line">1. 从字符串的第一个字符开始</span><br><span class="line">2. 查看每一组3个的字符（其实是`searchString`的长度）</span><br><span class="line">3. 如果匹配上`searchString`，就返回当前的index</span><br><span class="line">4. 如果一直到末尾都没有找到匹配的字符串，就返回-1</span><br><span class="line"></span><br><span class="line">看起来很棒，不是吗</span><br><span class="line"></span><br><span class="line">#### 第三步：写伪代码</span><br><span class="line"></span><br><span class="line">伪代码并不是真正的代码，只是一种模拟形式，这里我写下上面的算法的伪代码：</span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">for each index in sourceString,</span><br><span class="line">    there are N characters in searchString</span><br><span class="line">    let N chars from index onward be called POSSIBLE_MATCH</span><br><span class="line">    if POSSIBLE_MATCH is equal to searchString, return index</span><br><span class="line">at the end, if we haven&apos;t found a match yet, return -1.</span><br></pre></td></tr></table></figure></p>
<p>我也可以用一种更接近代码的形式来写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> each index <span class="keyword">in</span> sourceString,</span><br><span class="line">    N = searchString.length</span><br><span class="line">    POSSIBLE_MATCH = sourceString[index to index+N]</span><br><span class="line">    <span class="keyword">if</span> POSSIBLE_MATCH === searchString:</span><br><span class="line">        <span class="built_in">return</span> index</span><br><span class="line"><span class="built_in">return</span> -1</span><br></pre></td></tr></table></figure>
<p>你的伪代码写得有多像真正的代码，你就会发现它有多么好用。</p>
<h4 id="第四步：翻译可以编码的内容"><a href="#第四步：翻译可以编码的内容" class="headerlink" title="第四步：翻译可以编码的内容"></a>第四步：翻译可以编码的内容</h4><p><em>注意：对于简单的问题，这一步可以和上一步合并</em></p>
<p>到这时我们才第一次需要考虑语法、方法参数和语言规则的问题。可能你不是全部代码都会写，但是没关系，先把会写的写出来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">findFirstMatch</span><span class="params">(searchString, sourceString)</span> </span>&#123;</span><br><span class="line">    let length = searchString.length;</span><br><span class="line">    <span class="keyword">for</span> (let index = <span class="number">0</span>; index &lt; sourceString.length; index++) &#123;</span><br><span class="line">        let possibleMatch = &lt;the LENGTH chars starting at index i&gt;</span><br><span class="line">        <span class="keyword">if</span> (possibleMatch === searchString) &#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意我留了一部分没有写，这是故意的！我不确定JavaScript切分字符串的语法要怎么写，所以我会在下一步查找它。</p>
<h4 id="第五步：不要猜测"><a href="#第五步：不要猜测" class="headerlink" title="第五步：不要猜测"></a>第五步：不要猜测</h4><p>我发现所有新手程序员都会犯一个共同的错误，就是从网上找到一个方法，觉得“可能有用”，然后不经过测试就写进代码里。你不理解的代码越多，就越不可能找到正确的方法。</p>
<p>你的程序的错误可能是你不了解代码的两倍还多。有一处不理解，如果程序出错，那么罪魁祸首只有一处。如果你有两处不理解，那就有三种可能出错（A出错，B出错，或者A和B都出错）。如果有三处不理解，就会有七种情况……很快它就失控了。</p>
<p><em>边注：程序出错的情况种类遵循Mersenne公式 a(n) = (2^n) — 1</em></p>
<p>首先要测试你的新代码。从互联网上找答案是好的，但是在写进你的代码之前，你要先对它进行单独的测试，确保它能按照你想要的方式执行。</p>
<p>在上一步中，我不确定JavaScript怎么切分字符串，所以我选择<strong>面向Google编程</strong></p>
<p><a href="https://www.google.com/search?q=how+to+select+part+of+a+string+in+javascript" target="_blank" rel="noopener">https://www.google.com/search?q=how+to+select+part+of+a+string+in+javascript</a></p>
<p>第一条结果来自w3schools，有点小过时，但比较可靠</p>
<p><a href="https://www.w3schools.com/jsref/jsref_substr.asp" target="_blank" rel="noopener">https://www.w3schools.com/jsref/jsref_substr.asp</a></p>
<p>基于此，我觉得我应该使用<code>substr(index, searchString.length)</code>来提取<code>sourceString</code> ，但这只是个假设，所以我要先来测试一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">let</span> testStr = <span class="string">"abcdefghi"</span></span><br><span class="line">&gt;&gt; <span class="built_in">let</span> subStr = testStr.substr(3, 4);  // simple, easy usage</span><br><span class="line">&gt;&gt; console.log(subStr);</span><br><span class="line"><span class="string">"defg"</span></span><br><span class="line">&gt;&gt; subStr = testStr.substr(8, 5);   // ask <span class="keyword">for</span> more chars than exist</span><br><span class="line"><span class="string">"i"</span></span><br></pre></td></tr></table></figure>
<p>现在我确定这个函数是可以用的，如果程序出错，就不是这个函数不可用导致的。最后我补充上最后的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findFirstMatch</span>(<span class="params">searchString, sourceString</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = searchString.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; sourceString.length; index++) &#123;</span><br><span class="line">        <span class="keyword">let</span> possibleMatch = (</span><br><span class="line">            sourceString.substr(index, length));</span><br><span class="line">        <span class="keyword">if</span> (possibleMatch === searchString) &#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>如果你读到这里，我要说的只有：”干就完了！“</p>
<p>再尝试处理一下上周遇到的困难，用上我教你的方法，我保证你很快就会有提高。</p>
<p>祝你好运，编码愉快！</p>
<p><em>译者注：个人认为作者还是强调要先想清楚，再动手写代码。而且要学会面向Google编程</em></p>
]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】做好这几件事，代码质量可以提升一个档次</title>
    <url>/2019/10/30/%E3%80%90%E8%AF%91%E3%80%91%E5%81%9A%E5%A5%BD%E8%BF%99%E5%87%A0%E4%BB%B6%E4%BA%8B%EF%BC%8C%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E5%8F%AF%E4%BB%A5%E6%8F%90%E5%8D%87%E4%B8%80%E4%B8%AA%E6%A1%A3%E6%AC%A1/</url>
    <content><![CDATA[<p>这篇文章又是关于代码质量的，有些同学可能觉得我比较啰嗦。不过我就是想用这种方式让大家重视起来。其实说来说去就那么几种方法，但是实际执行起来真是难于登天。<a id="more"></a></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1572148102/Blog/Other/0_k5ZxB0XDa81Nf5Bj.jpg" alt=" Photo by Clem Onojeghuo on Unsplash"></p>
<p>低质量的代码真的是一种灾难。当你的代码变得越来越混乱，维护起来就会花费大量的时间。在最坏的情况下，代码将变得不可维护，并且项目会慢慢终止。</p>
<p>为了避免这种情况，你需要注意你的代码质量。尝试在代码质量上花费一些时间，长久来看，这将对你有很大的好处。</p>
<p>无论你是管理者，测试人员或者是开发者都应该去自觉维护代码质量，因为在整个开发流程中，大家的目标都是交付可用的、高质量的代码。</p>
<p>要想提高代码质量，需要做到以下六件事，其中一些是一个人可以完成的，而有些则必须要团队配合。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1572148105/Blog/Other/0_ePlqU8F3I5FcbDVH.png" alt="GoodCode&amp;BadCode"></p>
<h3 id="1-四眼原则"><a href="#1-四眼原则" class="headerlink" title="1.  四眼原则"></a>1.  四眼原则</h3><p>四眼原则是易于理解和执行的。它的意思是必须要有至少两个人（包括作者）检查过代码，目前最流行的方法是Pull request。</p>
<blockquote>
<p>Pull request是让你告诉别人你已经在GitHub上向分支push了一些代码改动。在开启Pull request之后，你就可以和协作者讨论潜在的问题，并且可以在你的代码被merge之前继续对它进行修改。</p>
<p>——Github.com</p>
</blockquote>
<p>在代码审查期间，有几件事需要考虑。其中之一是检查代码是否违反了约定的代码规则。这一过程可以通过在管道中使用linter来实现自动化，但有时也需要手动执行。</p>
<p>另外一个需要检查的是代码的可维护性和错误处理。这件事还没办法自动化。最后，需要检查的是代码的完整性。这一修改是否完成了需要完成的全部功能？</p>
<h3 id="2-持续集成"><a href="#2-持续集成" class="headerlink" title="2. 持续集成"></a>2. 持续集成</h3><p>“开发环境是好的。”这是某些开发人员常说的，还有就是：“在我电脑上没问题”。</p>
<p>如果希望避免这种问题的争论。持续集成可以给你提供很大的帮助。</p>
<blockquote>
<p>持续集成是一种软件开发实践，团队的开发人员经常集成他们的工作，通常每人至少每天集成一次——这使得每天需要集成很多次。每次集成都应该由自动构建（包括测试）尽快确认是否存在集成错误。</p>
<p>—— Martin Fowler</p>
</blockquote>
<p>持续集成的意义在于，它可以快速的向开发者提供结果反馈。</p>
<p>持续集成的两个基本作用是：</p>
<ol>
<li>保持快速构建，没什么比一次耗时一小时的构建更让人沮丧的了。</li>
<li>快速修复损坏的构建。持续集成会让你始终在一个稳定的版本的基础上进行开发。</li>
</ol>
<p>持续集成通过快速向开发者提供反馈来帮助提高代码质量。如果测试不通过，那么构建就会失败，此时开发者就会注意到。此外，最好在构建脚本中添加linter来检查是否符合编码规范。毫无疑问，这也是用于提高代码质量的。</p>
<h3 id="3-编码规范"><a href="#3-编码规范" class="headerlink" title="3. 编码规范"></a>3. 编码规范</h3><p>拥有一系列的代码规约是非常重要的。但是在你开始制定代码规约之前，团队的每个人都应该参与。因为这期间可能存在大量的关于最优约定的讨论。</p>
<p>编码规范中应该包括怎样声明和命名一个变量等等。规则的数量是没有限制的，并且以后可以继续调整，前提是这些规则对你和你的团队有帮助。</p>
<p>当编码规范制定好以后，请务必遵守。就像我前面提到的，最好的检查办法是在管道中增加linter，这样就不需要人工干预了。如果不这样做，也可以选择在本地安装linter。但要保证在每次提交之前规范使用linter。这样你的团队的代码风格将非常统一，有利于提升代码的可读性和可维护性。</p>
<p>高质量的代码可以加快软件开发的速度，因为它可以被复用，并且开发人员不必花费大量时间修改bug和完善代码。同时新人加入项目也会更快适应。</p>
<h3 id="4-测试，测试，测试"><a href="#4-测试，测试，测试" class="headerlink" title="4. 测试，测试，测试"></a>4. 测试，测试，测试</h3><p>代码质量越高，bug就越少。我们通常通过测试过滤出严重的bug，确保代码按照预期执行。</p>
<p>制定清晰的测试策略对于提高代码质量至关重要。至少要保证你的代码可以通过单元测试。如果你以其他方式进行测试就更好了，例如集成测试或回归测试。</p>
<p>根据测试金字塔，项目中数量最多的测试应该是单元测试，因为它们既简单又快速。有很多工具可以帮助你创建单元测试并生成代码覆盖率报告。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1572148115/Blog/Other/0_v6btYB1Xtb9crWQv.png" alt="Test pyramid"></p>
<p>跑单元测试和生成代码覆盖率报告可以通过持续集成自动进行。当代码覆盖率达不到要求时，持续集成也会构建失败。</p>
<h3 id="5-分析bug"><a href="#5-分析bug" class="headerlink" title="5. 分析bug"></a>5. 分析bug</h3><p>代码中有bug是必然的事情，如何处理这些bug才是关键。如果你想要提升自己，学会从错误中学习至关重要。这也是为什么你要分析bug。</p>
<p>发现bug后，先分析bug的影响。是一个低优先级的还是高优先级的？如果是高优先级的，就需要尽快解决。</p>
<p>分析bug时，你需要问自己一些问题。是什么导致了错误？为什么没有测出来？其他地方也有可能发生吗？以及我们应该怎样避免类似的bug产生？</p>
<p>当然，我们也要学会使用工具追踪bug。目前市面上有许多可用的bug追踪工具，你可以根据需要选择适合自己的工具。</p>
<h3 id="6-开始量化"><a href="#6-开始量化" class="headerlink" title="6. 开始量化"></a>6. 开始量化</h3><p>在开始量化时，可以用几个指标来衡量代码的质量。</p>
<h4 id="缺陷指标"><a href="#缺陷指标" class="headerlink" title="缺陷指标"></a>缺陷指标</h4><p>缺陷的数量和缺陷的严重程度是衡量代码质量的重要指标。如果你想追踪bug，可以使用bug燃尽图。bug燃尽图和软件敏捷开发中的正常燃尽图一样。唯一不同的是bug燃尽图包含未修复的bug，而不是事故点。</p>
<h4 id="复杂度指标"><a href="#复杂度指标" class="headerlink" title="复杂度指标"></a>复杂度指标</h4><p>复杂度通常由<a href="https://en.wikipedia.org/wiki/Cyclomatic_complexit" target="_blank" rel="noopener">圈复杂度</a>衡量，它是程序的源代码线性独立路径数量的一个衡量。</p>
<p>圈复杂度数和缺陷频率之间存在一定的相关性：</p>
<blockquote>
<p>许多研究调查了函数或方法中圈复杂度数和缺陷频率数之间的相关性。有些研究发现了圈复杂度和缺陷数的正相关性：函数和方法越复杂，缺陷也就会越多。然而，圈复杂度和程序大小之间的相关性已被多次证明。</p>
</blockquote>
<p>从理论上来讲，降低代码的复杂度会使缺陷更少。</p>
<h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h3><p> <a href="https://medium.com/better-programming/things-that-you-can-do-to-improve-code-quality-c746c30e7521" target="_blank" rel="noopener">https://medium.com/better-programming/things-that-you-can-do-to-improve-code-quality-c746c30e7521</a> </p>
]]></content>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】给小白准备的Web架构基础知识</title>
    <url>/2019/04/21/%E3%80%90%E8%AF%91%E3%80%91Web%E6%9E%B6%E6%9E%84101/</url>
    <content><![CDATA[<p>警告：本文内容是入门级的，大佬请按秩序有序撤离。<a id="more"></a></p>
<p>原文地址：<a href="https://engineering.videoblocks.com/web-architecture-101-a3224e126947" target="_blank" rel="noopener">Web Architecture 101</a></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1555598840/Blog/Other/Web%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A6%82%E8%A7%88.png" alt="Web应用架构概览"></p>
<p>上图很好的展示了我们在Storyblocks的架构。如果你是一个新手工程师，可能会觉得这个架构非常复杂。在我们深入研究每个组件的细节之前，首先应该对它们有个大概的了解。</p>
<blockquote>
<p>当一个用户在Google搜索“<em>Strong Beautiful Fog And Sunbeams In The Forest</em>”时，<a href="https://www.storyblocks.com/stock-image/strong-beautiful-fog-and-sunbeams-in-the-forest-bxxg0dvxdzj6gt9ini" target="_blank" rel="noopener">第一条结果</a>来自<em>Storyblocks</em>，我们主要的照片网站。用户点击结果就会在浏览器中跳转到图片详情页。在引擎下，用户的浏览器想DNS服务器发送一个请求，查询如何连接<em>Storyblocks</em>，然后向<em>Storyblocks</em>发送请求。</p>
<p>请求会先到达我们的负载均衡器，负载均衡器会随机选择一个正在运行的服务器来处理请求。服务器先从缓存中查找一部分关于图片的信息，并从数据库查找剩余信息。我们注意到此时还没有对图片的颜色进行配置，因此我们发送“<em>color profile</em>”任务到我们的任务队列，处理任务的服务器会异步执行队列中的任务，并且将结果适时更新到数据库中。</p>
<p>接下来，我们试图从使用照片标题在全文检索服务中找到与输入的照片相似的照片。如果登录用户是<em>Storyblocks</em>的会员，我们会去账号服务中查找用户的相关信息。最后，我们会把页面访问数据发送到数据“<em>firehose</em>”，以便存储到我们的云存储系统上，并最终落地到数据仓库中。数据分析师会使用数据仓库中的数据来解决商业问题。</p>
<p>到这里，服务器已经呈现了一个HTML页面，并通过负载均衡器将它返回给用户。页面包含的JavaScript和CSS会放到连接了CDN的云存储系统中，所以用户的浏览器连接CDN取回数据。最后，由浏览器给用户呈现完整的页面。</p>
</blockquote>
<p>接下来，我会对每个组件挨个进行简单的介绍，以求给你建立一个良好的关于学习架构的思维模型。我会在另外一个系列的文章中分享我在Storyblocks这段时间的实践经验，给你提供良好的建议。</p>
<h4 id="1-DNS"><a href="#1-DNS" class="headerlink" title="1. DNS"></a>1. DNS</h4><p>DNS是“Domain Name System”的缩写，它是使万维网成为可能的核心技术。最基础的DNS提供了域名（例如google.com）和IP地址的（例如85.129.83.120）的键值对以供查找，这是计算机路由请求到指定服务器所必需的。类别电话号码，域名和IP地址的区别就像是“打给哲少”和“拨打201-867–5309”。就像过去你需要一个电话本来查找哲少的电话号码，如今你需要DNS服务器来查找域名对应的IP地址。所以你可以认为DNS就是互联网上的电话本。</p>
<p>关于DNS的细节我们还可以展开讲很多，但这里我们略过，因为这不是入门级介绍所关心的。</p>
<h4 id="2-Load-Balancer"><a href="#2-Load-Balancer" class="headerlink" title="2. Load Balancer"></a>2. Load Balancer</h4><p>在介绍负载均衡器之前，我们先来讨论一下应用的水平和垂直扩展。它们有什么不同呢？<a href="https://stackoverflow.com/questions/11707879/difference-between-scaling-horizontally-and-vertically-for-databases" target="_blank" rel="noopener">这篇帖子</a>介绍的很明白，水平扩展是通过向资源池中增加更多的机器，垂直扩展是在已有的机器中增加更高的配置（CPU、内存等）。</p>
<p>在Web开发中，为了应对服务器宕机，网络波动，数据中心不可用等突发情况，你一定经常使用横向扩展，因为它既简单又快捷。拥有一台以上的服务器使你的应用程序在部分服务器掉电时仍然可以正常运行。换句话说，你的程序具有较好的容错性。其次，横向扩展允许你通过让每个部分运行在不同的服务器上来解耦后端的依赖（Web服务器、数据库、服务 X等）。最后，当你的服务器达到一定规模时可能无法再进行垂直扩展。因为这个世界上没有任何一台计算机的性能好到可以支撑你所有应用的计算。举一个典型的栗子——Google的搜索平台。当然一原则对于多数规模较小的公司也适用，例如Storyblocks就部署了150到400个AWS EC2实例。对于这样的情况，要想通过垂直扩展来提供全部计算是一项艰难的挑战。</p>
<p>我们再说回负载均衡器，它们使水平扩展成为可能。它们将传入进来的请求路由到众多服务器中的一个，并将响应结果返回给客户端。这些服务器通常是彼此的克隆或镜像，它们中的任何一个都应该以相同的方式处理，这样就通过分发请求的方式解决避免某台机器出现过载问题。</p>
<p>负载均衡的概念非常简单，但是实现起来非常复杂。我们暂且不介绍。</p>
<h4 id="3-Web-Application-Servers"><a href="#3-Web-Application-Servers" class="headerlink" title="3. Web Application Servers"></a>3. Web Application Servers</h4><p>在上层的Web应用服务描述起来非常简单。它们用来执行主要的业务逻辑，处理用户请求，并将HTML返回到用户的浏览器。为了完成任务，它们通常要与各种后端基础组件交互，比如数据库、缓存、任务队列、检索服务、其他微服务、数据/日志队列等等。如上所述，为了处理用户请求，你至少有两个，通常更多的负载均衡器。</p>
<p>你应该知道应用服务的实现需要选择一种语言（Node.js、Ruby、PHP、 Scala、 Java、 C# 、.NET等）和对应MVC框架（Node.js的Express，Ruby的Rails，Scala的Play，PHP的Laravel等）。然而深挖这些语言和框架的细节也超出了本文的讨论范围。</p>
<h4 id="4-Database-Servers"><a href="#4-Database-Servers" class="headerlink" title="4. Database Servers"></a>4. Database Servers</h4><p>每个Web应用项目都利用一个或多个数据库来存储信息。数据库提供了定义数据结构、对数据的增删改查、跨数据计算的方法。多数情况下，Web应用服务器和任务队列直接通信。另外每个后端服务可能都拥有独立的数据库。</p>
<p>虽然我一直强调本文不会介绍某个组件的细节，但是如果不提SQL和NOSQL也是一种不负责任的行为。</p>
<p>SQL的全称是“结构化查询语言”，它在18世纪70年代被发明。它给大家提供了查询关系型数据集的标准方法。SQL数据库将数据存储在通过公共ID（通常是整数）连接在一起的表中。让我们来看一个存储用户历史地址信息的例子。你可能需要两张表，用户表和用户地址表，它们通过用户ID连接在一起。下图展示了一个简化版本。两个表通过外键连接。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1555736263/Blog/Other/user_user_address.png" alt="SQL databases"></p>
<p>如果你不是很了解SQL，我强烈推荐你学习一下Khan Academy的<a href="https://www.khanacademy.org/computing/computer-programming/sql" target="_blank" rel="noopener">一门课程</a>。SQL现在已经非常普及了，因此你至少要了解一些基础知识才能构建你的应用程序。</p>
<p>NoSQL代表“非SQL”，是一种新的数据库技术集，用于处理大规模Web应用产生的大量数据（大多数SQL不支持水平扩展，并且垂直扩展也只能扩展到某个点）。如果你不了解NoSQL，可以看下面这些介绍：</p>
<ul>
<li><a href="https://www.w3resource.com/mongodb/nosql.php" target="_blank" rel="noopener">https://www.w3resource.com/mongodb/nosql.php</a></li>
<li><a href="http://www.kdnuggets.com/2016/07/seven-steps-understanding-nosql-databases.html" target="_blank" rel="noopener">http://www.kdnuggets.com/2016/07/seven-steps-understanding-nosql-databases.html</a></li>
<li><a href="https://resources.mongodb.com/getting-started-with-mongodb/back-to-basics-1-introduction-to-nosql" target="_blank" rel="noopener">https://resources.mongodb.com/getting-started-with-mongodb/back-to-basics-1-introduction-to-nosql</a></li>
</ul>
<p>但是总的来说，业界还是要将<a href="https://blog.timescale.com/why-sql-beating-nosql-what-this-means-for-future-of-data-time-series-database-348b777b847a/" target="_blank" rel="noopener">SQL作为数据库的统一接口</a>，即使是对菲关系型数据库，所以如果你还不了解SQL的话，就真的要赶快去学习一下了。</p>
<h4 id="5-Caching-Service"><a href="#5-Caching-Service" class="headerlink" title="5. Caching Service"></a>5. Caching Service</h4><p>缓存服务提供了简单的kv存储数据，尽可能使保存和查找数据的时间复杂度接近O(1)。应用程序一般把计算比较复杂的结果保存到缓存服务中，以便再次取值时直接从缓存中读取而不用重新进行复杂的计算。应用可能缓存的信息包括，数据库查询的结果，调用外部服务的返回值，一个URL返回的HTML等等。下面是一些实际的例子：</p>
<ul>
<li>Google会将搜索结果缓存</li>
<li>Facebook在你登录后会缓存你看到的大部分信息，比如帖子、好友等。关于Facebook的缓存技术缓存可以看<a href="https://medium.com/@shagun/scaling-memcache-at-facebook-1ba77d71c082" target="_blank" rel="noopener">这篇文章</a></li>
<li>Storyblocks缓存来自服务器端React渲染，搜索结果和预输入结果等的HTML输出。</li>
</ul>
<p>目前应用最广泛的两种缓存服务是Redis和Memcache。我会在另一篇文章中对它们进行更深入的介绍。</p>
<h4 id="6-Job-Queue-amp-Servers"><a href="#6-Job-Queue-amp-Servers" class="headerlink" title="6. Job Queue &amp; Servers"></a>6. Job Queue &amp; Servers</h4><p>很多应用程序需要在后台异步处理一些和返回结果无关的逻辑。比如，Google为了提供搜索服务，需要爬取网页并进行索引。它并不是在你每次搜索的时候都去做这件事，而是异步爬取，并更新索引。</p>
<p>虽然现在有很多不同的架构都支持异步操作，但最普及的是我所说的“任务队列”架构。它包含两个组件：一个任务队列和至少一个任务服务器来执行队列中的任务。</p>
<p>任务队列通常保存一系列需要异步执行的任务。最简单的规则是先进先出（FIFO），大多数应用按照优先级给任务排序。当应用需要执行一个任务时，无论是定时任务还是用户操作，都会把任务放到队列中去。</p>
<p>还拿Storyblocks举例，我们使用一个后台的任务队列为我们的市场提供支持。我们会跑一些视频图片解码，处理CSV元数据标记，汇总用户统计信息，发送重置密码邮件等任务。我们一开始采用FIFO的原则，后来改为优先级队列，以保证有些具有时效性的任务能尽快完成，比如发送重置密码邮件。</p>
<p>任务服务器用来处理任务。它们轮询任务队列以确定是否有任务要执行以及是否有任务，如果有，就从任务队列中弹出一个任务来执行。底层语言和框架的选择非常多，但它们不在本文讨论范围。</p>
<h4 id="7-Full-text-Search-Service"><a href="#7-Full-text-Search-Service" class="headerlink" title="7. Full-text Search Service"></a>7. Full-text Search Service</h4><p>许多web应用支持某种搜索功能——用户输入文本，应用返回“相关”的结果。支撑这种功能的技术一般称为<a href="https://en.wikipedia.org/wiki/Full-text_search" target="_blank" rel="noopener">全文检索</a>，它利用<a href="https://en.wikipedia.org/wiki/Inverted_index" target="_blank" rel="noopener">反向索引</a>快速找到包含关键字的文档。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1555779106/Blog/Other/full_text_search.png" alt="Example showing how three document titles are converted into an inverted index to facilitate fast lookup from a specific keyword to the documents with that keyword in the title. Note, common words such as “in”, “the”, “with”, etc. (called stop words), are typically not included in an inverted index."></p>
<p>现在某些数据库也支持检索功能（比如<a href="https://dev.mysql.com/doc/refman/5.7/en/fulltext-search.html" target="_blank" rel="noopener">MySQL已经支持全文检索</a>），通常是运行独立的搜索服务来计算和存储反向索引，并提供查询接口。目前最受欢迎的全文检索平台是<a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="noopener">Elasticsearch</a>，另外还有一些其他比较好的平台 例如<a href="http://sphinxsearch.com/" target="_blank" rel="noopener">Sphinx</a>和<a href="http://lucene.apache.org/solr/features.html" target="_blank" rel="noopener">Apache Solr</a>。</p>
<h4 id="8-Services"><a href="#8-Services" class="headerlink" title="8. Services"></a>8. Services</h4><p>一旦一个APP达到一定的规模，就会有某些服务被独立出来运行。它们不会对外暴露，但是可以和应用内部的服务之间交互。Storyblocks有几个运营和计划的服务：</p>
<ul>
<li><strong>Account service</strong>存储我们所有网站上的用户数据，这使我们可以更轻松的提供交叉销售机会并创建更统一的用户体验</li>
<li><strong>Content service</strong>存储我们所有的视频、音频和图片的元数据。也提供了下载接口和查看历史下载记录的接口。</li>
<li><strong>Payment service</strong>提供对用户信用卡进行计费的接口</li>
<li><strong>HTML → PDF service</strong>提供了一个简单的HTML转PDF的接口</li>
</ul>
<h4 id="9-Data"><a href="#9-Data" class="headerlink" title="9. Data"></a>9. Data</h4><p>当下，一家公司的生死由他们驾驭数据的能力决定。如今几乎每个APP一旦达到一定规模，就需要通过数据管道来收集、存储和分析数据。典型的管道有三个步骤：</p>
<ol>
<li>APP发送数据，典型的关于用户交互的事件，数据发送到“firehose”——提供获取和处理数据的接口。原始数据通常需要进行转换、增强并发送到另一个firehose。AWS Kinesis和Kafka是两个公共工具。</li>
<li>原始数据和转换/增强后的数据都被保存到云端。AWS Kinesis提供了一个名为firehose的设置，可以将原始数据保存到其云存储（S3），配置起来非常容易。</li>
<li>转换/增强后的数据通常会被加载进数据仓库用作数据分析。我们使用的是AWS Redshift，大部分创业公司和增长的部分也是如此，尽管大公司会使用Oracle或其他专有的仓库技术。</li>
</ol>
<p>另外一个没有在架构图中画出来的一个步骤：将数据从应用程序和服务的操作数据库加载到数据仓库中。例如在Storyblocks，我们每晚将VideoBlocks, AudioBlocks, Storyblocks, account service和贡献值门户网站的数据加载到Redshift。通过将核心业务数据与我们的用户交互事件数据放在一起，为我们的分析师提供了一整个数据集。</p>
<h4 id="10-Cloud-storage"><a href="#10-Cloud-storage" class="headerlink" title="10. Cloud storage"></a>10. Cloud storage</h4><p>“云存储是一种简单、可靠且可扩展的存储、检索和共享数据的方法”——来自AWS。你可以使用它存储或多或少的存储和访问本地文件系统的任何内容，并且可以通过HTTP上的RESTful API与其进行交互。Amazon的S3是目前最流行的云存储产品，也是我们在Storyblocks广泛依赖的产品，用于存储我们的视频、照片和音频资产，我们的CSS和JavaScript，我们的用户数据等等。</p>
<h4 id="11-CDN"><a href="#11-CDN" class="headerlink" title="11. CDN"></a>11. CDN</h4><p>CDN的全称是“Content Delivery Network”，该技术提供了通过Web获取静态HTML，CSS，JavaScript和图像资源的方式，比直接从单个源服务器提供服务要快得多。它的工作原理是在世界各地的许多“边缘”服务器上分发内容，以便用户从“边缘”服务器而不是源服务器下载资源。例如下图中，一个用户从西班牙请求源服务器在纽约的网站，但是静态资源会从在英国的CDN边缘服务器加载，防止许多缓慢的跨大西洋HTTP请求。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1555779121/Blog/Other/cdn.png" alt="cdn"></p>
<p><a href="https://www.creative-artworks.eu/why-use-a-content-delivery-network-cdn/" target="_blank" rel="noopener">这篇文章</a>进行了更详尽的介绍。通常web应用应该始终使用CDN来提供CSS，JavaScript，图片，视频和其他资源。某些应用也可能利用CDN来提供静态HTML页面。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这是一篇入门级的Web架构总结。希望能够对你有帮助。我希望发布一系列的进阶文章，在接下来一两年内我会对这些组件进行深入研究。</p>
]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】别让你的团队掉入Code Review的坑</title>
    <url>/2019/09/12/%E3%80%90%E8%AF%91%E3%80%91%E5%88%AB%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%9B%A2%E9%98%9F%E6%8E%89%E5%85%A5Code-Review%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>代码审查是许多高效团队的工程实践。即使你的软件已经有很多优点了，但团队在做代码审查时仍然会遇到一些陷阱。<a id="more"></a></p>
<p>这篇文章我讲向你介绍一些需要特别注意的陷阱，以防代码审查工作拖累你的团队。知道可能遇到的问题或陷阱，将会帮助你进行更加高效、有效的的代码审查工作。这是我们<a href="https://www.michaelagreiler.com/wp-content/uploads/2019/03/Code-Reviewing-in-the-Trenches-Understanding-Challenges-Best-Practices-and-Tool-Needs.pdf" target="_blank" rel="noopener">调查了900名微软员工后得到的结论</a>。</p>
<h4 id="一个典型的代码审查过程"><a href="#一个典型的代码审查过程" class="headerlink" title="一个典型的代码审查过程"></a>一个典型的代码审查过程</h4><p>一个典型的使用工具进行的代码审查过程大致是这样的：开发者完成一段代码，她提交代码准备开始让别人review。然后她选择需要审查她的代码的人。审查代码的人开始查看代码并给出一些评论。作者按照这些评论完善代码。当所有人都觉得没问题了以后，代码就可以合并进代码库了。在另一篇中我详细介绍了微软的代码审查的过程。</p>
<p>我为我的邮件订阅读者们准备了一份代码审查电子书，书中包含了全部的代码审查最佳实践的清单。我还加了一些额外的见解，大家可以<a href="https://www.michaelagreiler.com/code-review-e-book/" target="_blank" rel="noopener">自行申请</a>。</p>
<p><img src="https://i1.wp.com/www.michaelagreiler.com/wp-content/uploads/2019/05/E-Book-Preview.jpg?w=860&amp;ssl=1" alt="Check out the VIP [Code Review e-Book](https://www.michaelagreiler.com/code-review-e-book/) I prepared for my subscribers."></p>
<h4 id="代码审查并不总是一个平稳的过程"><a href="#代码审查并不总是一个平稳的过程" class="headerlink" title="代码审查并不总是一个平稳的过程"></a>代码审查并不总是一个平稳的过程</h4><p>这些步骤听起来像是 一个很平稳的过程，其实并不是，像其他所有事情一样，实际过程往往不如预期。在代码审查过程中，经常会遇到一些陷阱，这会降低整个审查代码的积极性。如果不能正确处理，代码审查会对整个团队的工作效率产生影响。所以让我们来看一下代码审查过程中究竟存在哪些坑。</p>
<p>关键问题主要有两种：代码审查花费的时间和代码审查所能提供的价值。</p>
<h4 id="等待回复是一种煎熬"><a href="#等待回复是一种煎熬" class="headerlink" title="等待回复是一种煎熬"></a>等待回复是一种煎熬</h4><p>作者需要面对的一个最主要的陷阱就是及时收到回复。等待评论的过程中不能在代码中做其他工作是一个巨大的问题。即使开发者可以完成其他任务，如果代码审查工作耗时过长，也会对开发者对工作效率和满意度造成不好的影响。</p>
<h4 id="开发者必须兼顾多项职责"><a href="#开发者必须兼顾多项职责" class="headerlink" title="开发者必须兼顾多项职责"></a>开发者必须兼顾多项职责</h4><p>代码审查并不是代码审查人员唯一的任务。相反，它只是开发者日常工作之一（即使需要每天花费大量时间来做）。所以代码审查人员很可能在做其他工作，并且必须在开始代码审查之前停下或完成这些工作。</p>
<p>如果时间不理想，或者代码审查人员在之前没有预料到这种变化，那么她可能在代码审查之前需要一点时间。远程团队还需要注意时差，这意味着代码审查可能花费更多的时间。</p>
<h4 id="开发者会面对代码审查不被当作实际工作的问题"><a href="#开发者会面对代码审查不被当作实际工作的问题" class="headerlink" title="开发者会面对代码审查不被当作实际工作的问题"></a>开发者会面对代码审查不被当作实际工作的问题</h4><p>对于作者和代码审查人员来说，时间都是有限的，如果团队想要开发者做代码审查工作，但又不把它计入工作时间，这是有很大问题的。</p>
<p><img src="https://i1.wp.com/www.michaelagreiler.com/wp-content/uploads/2019/04/Code-Review-value-time.png?w=1024&amp;ssl=1" alt="You have to value and plan for the time spent doing code reviews.
Photo by [freestocks.org](https://unsplash.com/photos/vcPtHBqHnKk?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText)"></p>
<h4 id="代码审查工作和效果没有奖励"><a href="#代码审查工作和效果没有奖励" class="headerlink" title="代码审查工作和效果没有奖励"></a>代码审查工作和效果没有奖励</h4><p>如果只是声称对代码审查工作进行评估而没有任何奖励，这将没有意义。大多数公司只会对开发者开发的功能或者写出的代码进行奖励，这减弱了开发人员在工作中帮助他人的动力和能力。代码审查应该成为绩效评估和晋升决策的基石。</p>
<h4 id="社会因素和团队动力"><a href="#社会因素和团队动力" class="headerlink" title="社会因素和团队动力"></a>社会因素和团队动力</h4><p>等待代码审查并不总是和缺乏时间以及缺少奖励系统有关。由于社会性质，延迟审查可能是由于不安全感或团队动力。尤其是如果代码审查工作是压倒性的或者审查者是新手，那么代码审查会让人不知所措。</p>
<h4 id="大量代码很难审查"><a href="#大量代码很难审查" class="headerlink" title="大量代码很难审查"></a>大量代码很难审查</h4><p>大量的代码是审查工作的另一个巨大的陷阱。想象一下如果你是代码审查人员，当你需要审查一段代码时，你通常会想：我很快就能看完，但是当你打开的时候，发现这是一段巨大的改动，修改遍布整个代码库，你的第一反应是什么？</p>
<p>大概是：天呐！（译者注：也可能是我*！）</p>
<p>没错，这正是我们在分析了数千次代码评审中看到的。随着代码数量的增加，不仅是审核时间需要增加，评论的质量也会随之下降。这也是可以理解的。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1567928096/Blog/Other/code_review/code-review00.png" alt="tweet"></p>
<p>大量的代码更改非常难以审核，另外，如果审核人员对这部分代码并不熟悉，那这将是一场噩梦。</p>
<h4 id="理解代码修改需要一些指导"><a href="#理解代码修改需要一些指导" class="headerlink" title="理解代码修改需要一些指导"></a>理解代码修改需要一些指导</h4><p>大多数审核人员会面临无法理解代码修改的动机的困境。如果没有任何对修改的描述和解释，代码审查工作将会非常难以进行。研究表明如果审核人员不理解代码修改的目的，或者由于量大而不堪重负，那么她很难给出良好的建议。</p>
<blockquote>
<p>It’s just this big incomprehensible mess… then you can’t add any value because they are just going to explain it to you and you’re going to parrot back what they say.</p>
</blockquote>
<h4 id="没有得到有价值的反馈会降低开发人员审核代码的动力"><a href="#没有得到有价值的反馈会降低开发人员审核代码的动力" class="headerlink" title="没有得到有价值的反馈会降低开发人员审核代码的动力"></a>没有得到有价值的反馈会降低开发人员审核代码的动力</h4><p>毫无疑问，花费时间去等待代码审查，却没有得到有用的反馈是一个常见的问题。虽然团队可能从知识分享中受益，但这样仍会降低开发者的动力和收益。</p>
<p>审核人员不能给出有效建议的原因通常有这样几种</p>
<ol>
<li>审核人员不具备这方面专业知识</li>
<li>审核人员没有时间去完整的审查代码</li>
<li>审核人员没有理解修改的目的</li>
</ol>
<h4 id="一旦主要讨论代码格式，你就需要采取行动"><a href="#一旦主要讨论代码格式，你就需要采取行动" class="headerlink" title="一旦主要讨论代码格式，你就需要采取行动"></a>一旦主要讨论代码格式，你就需要采取行动</h4><p>另一个在代码审查过程中很重要的问题叫做bikeshedding。它的意思是开发者专注于小问题的讨论（例如代码格式）而忽略了更严重的问题。导致这种行为的原因有很多，通常是由于审核人员并不理解改动的目的或者没有时间做代码审查。有时bikeshedding可能代表团队的动力出了问题。</p>
<h4 id="达成共识可能需要面对面讨论"><a href="#达成共识可能需要面对面讨论" class="headerlink" title="达成共识可能需要面对面讨论"></a>达成共识可能需要面对面讨论</h4><p>有时候会发生代码作者和审核人员或者是审核人员之间很难达成共识的情况。由于团队动力和这件事紧密相关，因此必须小心处理这种情况通过工具和书面形式只会加剧这种问题。如果要讨论有争议的问题，那么面对面或者视频也许是更好的方案。</p>
<h4 id="代码审核的好处大于工作量"><a href="#代码审核的好处大于工作量" class="headerlink" title="代码审核的好处大于工作量"></a>代码审核的好处大于工作量</h4><p>我希望这些陷阱不会改变你对代码审核的想法，因为如果你了解了这些陷阱并妥善处理它们，代码审核工作对于整个技术团队是非常有好处的，而且会有更有效的方法来做代码审核。</p>
<h4 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h4><p><a href="https://www.michaelagreiler.com/code-review-pitfalls-slow-down/" target="_blank" rel="noopener">https://www.michaelagreiler.com/code-review-pitfalls-slow-down/</a></p>
<p>最后，如果可以的话请帮忙填一下调查问卷。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1568307144/Blog/Other/code_review/code-review-qrcode.jpg" alt="调查问卷"></p>
]]></content>
      <tags>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】大O的友好指南</title>
    <url>/2019/03/10/%E3%80%90%E8%AF%91%E3%80%91%E5%A4%A7O%E7%9A%84%E5%8F%8B%E5%A5%BD%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>原文链接：<a href="https://medium.com/@daily_javascript/a-friendly-guide-to-big-o-ea781c5f68f0" target="_blank" rel="noopener">https://medium.com/@daily_javascript/a-friendly-guide-to-big-o-ea781c5f68f0</a></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1552196439/Blog/%E7%AE%97%E6%B3%95/%E5%A4%A7O1.png" alt="算法复杂度"></p>
<p>并不是每个公司在面试的时候都会问关于算法复杂度大O的问题，但是如果你想要到Facebook、Google或Amazon这样的公司工作的话，这是你必须要了解的知识。如果你没有很好的数学功底，那么你去看课本上关于大O的概念的话将会是一场灾难。<a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Let T(n) = the number of operations performed in an algorithm as a function of n. </span><br><span class="line">T(n) = O(f(n)) if and only if there exists two constants, n0 &gt; 0 and c &gt; 0, and a function f(n) such that for all n &gt; n0, cf(n) ≥ T(n).</span><br></pre></td></tr></table></figure>
<p>那么我们就一起来学习一下它的数学证明吧。开个玩笑，实际上证明要比概念复杂得多（译者：不会就直说嘛）。</p>
<p>回想一下，你是否曾经接受过这样的任务，为了完成它，你需要按照指定的步骤，一步一步来执行。在计算机科学中，这一系列指定的步骤被称为算法。</p>
<p>在现实生活中，我们为了完成一项任务，往往会寻找更好的办法：更快、更便宜、或者更明确的方法。算法也是一样，我们常常需要更好的算法来实现。但是我们怎么知道哪种算法对计算机而言是更好的呢？</p>
<p>一个比较直观的方法就是，选择不同算法之中，完成同一项任务用时最短的那个，也就是我们常说的运行时间最短的。不幸的是，我们没有办法精确的比较出哪个算法的运行时间更短，因为它受很多因素的影响。</p>
<p>例如：</p>
<ul>
<li>写算法所用的语言</li>
<li>相同语言的版本差异</li>
<li>计算机硬件差异，每次读取数据的大小</li>
</ul>
<p>我们能做的是通过计算算法从开始到完成一共做了多少步工作来近似的比较两个算法的运行时间。所以我们应该做出一些假设，而不管每个人使用的硬件和语言的差异，找到一个公认的方法来比较不同算法解决问题的能力。</p>
<h4 id="假设1："><a href="#假设1：" class="headerlink" title="假设1："></a>假设1：</h4><p>计算机每次从上到下读取一个步骤</p>
<h4 id="假设2："><a href="#假设2：" class="headerlink" title="假设2："></a>假设2：</h4><p>定义变量、调用函数、逻辑对比以及所有的算术运算都被当成一个步骤</p>
<h4 id="假设3："><a href="#假设3：" class="headerlink" title="假设3："></a>假设3：</h4><p>内存是无限大的，而且访问任何位置的数据所消耗的时间是一样的</p>
<p>做出了上面的假设之后，我们来看一个简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ans = ans * a</span><br><span class="line">        b = b - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个算法先定义了一个变量，这是一个步骤；然后开始了循环，这是三步（比较、乘法、减法）。最后返回变量，这也是一个步骤。所以这个算法的总步骤就是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> + (<span class="number">3</span> * b)</span><br></pre></td></tr></table></figure>
<p>如果b=100，这个算法就要进行302步，</p>
<p>如果b=1000，这个算法就要进行3002步，</p>
<p>如果b=10,000，这个算法就要进行30,002步。</p>
<p>可以看到，由于我们不需要精确的比较，所以数字2对结果的影响微乎其微。这就是为什么当我们计算大O的时候，你只需要关心影响最大的因素，而可以忽略常数以及影响较小的因素。我们再来看一个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x + x^<span class="number">2</span> + x^<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>你可以放心的忽略掉x和x<sup>2</sup>，因为它们没有x<sup>3</sup>对结果的影响大。</p>
<p>大O只是用来判断运行时间增加的速率，也叫作渐近分析。</p>
<p>所以我们已经知道了如何计算大O，但是我们怎么知道要选择哪些影响因素呢？我们需要尽可能大的输入，来忽略常数和低阶因素。大O表示的是最坏情况，这才是最有意义的比较结果。</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】工程师如何打怪升级</title>
    <url>/2019/11/05/%E3%80%90%E8%AF%91%E3%80%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%A6%82%E4%BD%95%E6%89%93%E6%80%AA%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<p>初级、中级和高级工程师并不是通过你从事编码工作的年限来判断的。初级工程师有时可能比高级工程师工作时间还要长。能否成为更高等级的工程师完全取决于你对专业技能的掌握程度，这也不是说高级工程师必须在每一方面都是专家，但是可以肯定的是，高级工程师一定比初级和中级工程师更加专业。<a id="more"></a></p>
<p>不仅仅是编程能力更加专业，高级工程师和初中级工程师相比还有其他区别。这区别到底是什么呢？</p>
<h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><p>很明显，高级工程师需要掌握更多的知识。学习设计模式、架构、自动化测试、性能、安全等知识是初级工程师迈向中高级工程师的必经之路。</p>
<p>知道软件开发过程中需要做什么是一件非常重要的事情。但是当你掌握了上面所说的全部知识时，你并不是已经成为高级工程师了，这些知识只是不同等级工程师之间的区别之一。</p>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>很多人认为编码是人和计算机之间的一种交流，实际上是人和人的交流然后用于指导计算机。代码最终还需要编译成二进制码。</p>
<p>你的代码需要保证可读性，这样以后其他开发者才能在这基础上做其他工作。最好能做到让一个从来没有看过你的代码的团队一打开就能立即进行新功能开发或者修复bug。这也是初级和高级工程师的区别之一。</p>
<p>这里我们忽略了中级工程师，因为中级工程师在编程能力的比较中处于灰色地带。因为中级工程师介于初级与高级之间，并且更倾向于高级。编码能力更更加依赖于经验，而中级工程师通常至少参与过一次完整的软件开发流程。他们已经从一些简单的错误中吸取了教训。</p>
<h4 id="如何辨别初级工程师"><a href="#如何辨别初级工程师" class="headerlink" title="如何辨别初级工程师"></a>如何辨别初级工程师</h4><p>初级工程师通常没有开发经验。有些是刚毕业，第一次全职做开发。初级开发者的心态通常就是「能用就行」。能用的软件和好用的软件在他们看来都一样。</p>
<p>写出简洁的代码是一件困难的事情。这也是初级工程师不具备的能力，他们写的代码往往比较繁琐。你可以通过诡异的单行代码以及庞杂的抽象逻辑来识别初级工程师。这是初级工程师炫耀的方法，让其他开发人员知道他们的能力，但这是错误的做法。</p>
<p>初级工程师编码时专注于计算机端，而忽略了人力端。</p>
<h4 id="高级工程师是怎样的"><a href="#高级工程师是怎样的" class="headerlink" title="高级工程师是怎样的"></a>高级工程师是怎样的</h4><p>当查看高级工程师的代码时，你也许会想：这是全部代码吗？剩下的在哪？高级工程师写的代码总是简单、直接的。这时编程时可以修炼的最强技能之一。高级工程师遵循KISS原则：<em>Keep it simple, stupid</em>。</p>
<p>高级工程师在编码方式和初级工程师有所不同，他们会优先考虑代码的可维护性和可扩展性。两种级别的工程师编码时的心态也完全不同，高级工程师更多考虑的时后续维护代码的人，而初级工程师考虑的是使代码可以被计算机执行。</p>
<h3 id="不止于编程能力"><a href="#不止于编程能力" class="headerlink" title="不止于编程能力"></a>不止于编程能力</h3><p>除了编程能力之外，还有一些其他因素可以告诉你一名工程师的级别。</p>
<p>初级工程师通常只是做一些简单的任务。他们不负责任何架构设计。中级工程师也不设计解决方案，他们同样是执行任务。与初级工程师不同的是，他们并不需要太多的监督和指导，只要分配给他们较为常规的任务，他们就能独立完成。高级工程师则可以独立的开发一款应用。</p>
<p>这并不意味着高级工程师在开发过程中就不会碰到问题，每个开发人员每天都会遇到大量的问题，对于高级工程师来说也是如此。</p>
<p>不同之处是高级工程师知道如何正确提问以及怎么解决问题。中级工程师在对于常规问题也知道如何正确提问，但遇到更加复杂的问题时则需要寻求帮助。</p>
<p>高级工程师从不迷失方向，他们知道如何以正确的方式跟踪问题。不是说高级工程师不需要向其他人寻求帮助。有时最正确的选择就是向相关领域的专家寻求帮助。</p>
<p>中级工程师也需要具备正确提出问题的能力，除非分配给他们的是需要很深入的专业知识的复杂任务。</p>
<p>你不能指望初级工程师总是准确的提出问题。因为他们缺乏经验，他们需要更有经验的工程师来指导。我们要为初级工程师提供必要的资源，以及不断推动他们朝着正确的方向前进。</p>
<h3 id="如何晋级"><a href="#如何晋级" class="headerlink" title="如何晋级"></a>如何晋级</h3><p>我们都希望提升自己的等级，成为更好的工程师，但是要怎么做呢？</p>
<h4 id="初级到中级"><a href="#初级到中级" class="headerlink" title="初级到中级"></a>初级到中级</h4><p>由于初级工程师缺乏经验，因此他们至少要经历几次完整的软件开发流程。这一过程中他们不遇到很多坑，然后需要在下次避免再踩这样的坑。</p>
<p>编码时，初级工程师要学会使自己的代码变得更加简洁。多为下一位接手这段代码的人考虑。你需要学会怎么调试代码，这会帮助你更好的理解它的运行过程。</p>
<p>此外，你需要对一些最佳实践更加熟悉，同时你需要学习架构、性能、安全等知识，从而跨越到达到中级工程师的知识鸿沟。</p>
<h4 id="中级到高级"><a href="#中级到高级" class="headerlink" title="中级到高级"></a>中级到高级</h4><p>从中级工程师到高级工程师可能会比较困难。有些开发人员整个职业生涯都停留在中级工程师。</p>
<p>高级工程师知道什么可以做什么不可以做。这是最难学的一门课程，你只能从过去犯的错误中学习。</p>
<p>如果你想要达到高级水平，你必须要准备好承担没有人能处理的任务。你应该考虑的是如何把工作做得更好，而不仅仅是怎么完成。</p>
<p>作为高级工程师，你还有一项工作就是要帮助缺乏经验的工程师，当他们不知道怎么做时，你就是他们坚强的后盾。</p>
<p>高级工程师的技术栈可能不会使你感到惊讶，除了编程能力，他们对公司所用的工具和应用的使用都是非常熟悉的。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>初级、中级、高级工程师的区别不只是工作年限。当然，你可以肯定的说，高级工程师要比初级和中级工程师更加专业，知识更丰富。但这不是决定工程师等级的唯一因素。</p>
<p>高级工程师写代码更加简洁，并且编码时的心态与初级开发者不同。但是除了编码，知识如何提出并跟进问题也是一项必要的能力。只有高级工程师才能凭借丰富的经验从容的应对各种问题。</p>
<p>初级工程师想要成长就要专注于编写更加简洁的代码，并且多经历完整的开发流程。从中级进阶到高级则需要学会处理更多困难的问题。你应该愿意承担更有挑战的任务，并成为技术栈的主人。高级工程师的另一项工作就是作为其他开发人员的后盾。</p>
<p>最后送给你一句Martin Fowler的话：“任何傻瓜都能编写计算机可以理解的程序，好的工程师编写人类可以理解的代码。”</p>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://medium.com/better-programming/the-differences-between-a-junior-mid-level-and-senior-developer-bb2cb2eb000d" target="_blank" rel="noopener">https://medium.com/better-programming/the-differences-between-a-junior-mid-level-and-senior-developer-bb2cb2eb000d</a></p>
<h3 id="译者点评"><a href="#译者点评" class="headerlink" title="译者点评"></a>译者点评</h3><p>本文作者从编码能力和处理问题的能力阐述了不同级别工程师之间的区别。个人认为作者对于中级工程师的能力和国内的互联网公司的要求还是有些区别的。至少我接触的中级工程师都要具备一定的系统设计能力了。而高级工程师则需要具备更加全面的问题处理的能力。不过对于大多数人来说，可能头衔已经是中级了，但是并没有掌握文中提到的那些知识，这反而成为了中级到高级的鸿沟。相信大家也都意识到了学习的重要性，既然入了这行，就一起活到老学到老吧。</p>
]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】利用Lombok消除重复代码</title>
    <url>/2019/11/20/%E3%80%90%E8%AF%91%E3%80%91%E5%88%A9%E7%94%A8Lombok%E6%B6%88%E9%99%A4%E9%87%8D%E5%A4%8D%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>当你在写Getter和Setter时，一定无数次的想过，为什么会有POJO这么烂的东西。你不是一个人！（不是骂人…）无数的开发人员花费了大量的时间来写这种样板代码，而他们本来可以利用这些时间做出更有价值的输出。<a id="more"></a></p>
<p>从我开始写Java以来，已经写了几千行代码了，其中大概50%都是样板代码，在转型之前，我就这么一直毫无怨言的写着。而最近两年，我不再Java了，转而开始写一些Python，Go和JavaScript的代码。这时我才感觉到Java中的重复的样板代码是多么令人沮丧。</p>
<p>值得庆幸的是，现在的IDE为我们提供了自动生成这些代码的功能。但是我仍然需要按快捷键或者点鼠标来操作，这是非常影响我的编码思路的。</p>
<h3 id="Lombok简介"><a href="#Lombok简介" class="headerlink" title="Lombok简介"></a>Lombok简介</h3><blockquote>
<p><a href="https://projectlombok.org/" target="_blank" rel="noopener">Project Lombok</a> <em>is a java library that automatically plugs into your editor and build tools, spicing up your java. Never write another getter or equals method again</em></p>
</blockquote>
<p>上面这段话摘自Lombok的<a href="https://projectlombok.org/" target="_blank" rel="noopener">首页</a>。这是一个每个人都需要使用的库，简直是一种仙丹！开个玩笑。Java是一门很棒的语言，但是它的冗长经常会令人感到苦恼。</p>
<p>Lombok到底有多香呢？我总结了以下几点：</p>
<ol>
<li>Getter和Setter注解会自动生成getter、setter方法</li>
<li>NoArgsConstructor和AllArgConstructor可以帮助你快速生成构造函数</li>
<li>ToString会使POJO打印更加友好的日志</li>
<li>Data会让你的POJO成为一个完全符合规范的POJO</li>
<li>SneakyThrows可以偷偷抛出检查异常，而不需要再写throws子句</li>
</ol>
<p>想了解更多Lombok特性的话，可以自行前往<a href="https://projectlombok.org/features/all查看。" target="_blank" rel="noopener">https://projectlombok.org/features/all查看。</a></p>
<h3 id="Lombok是如何工作的？"><a href="#Lombok是如何工作的？" class="headerlink" title="Lombok是如何工作的？"></a>Lombok是如何工作的？</h3><p>Lombok是在Java注解处理器和几个编译时注解的帮助下工作的，它将注入额外的Java字节码来帮助我们处理重复的代码。你可以查看它生成的Java代码，这一过程被幽默的称为“Delombokisation”。</p>
<h3 id="我应该如何开始使用？"><a href="#我应该如何开始使用？" class="headerlink" title="我应该如何开始使用？"></a>我应该如何开始使用？</h3><p>Lombok引入了一个额外的编译时依赖。</p>
<p>如果你使用vanilla javac进行编译，你需要指定<a href="https://projectlombok.org/download" target="_blank" rel="noopener">lombok.jar</a>作为注解处理器：<figure class="highlight plain"><figcaption><span>-cp lombok.jar MyCode.java```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">如果你使用的是maven，那么需要在pom.xml中插入以下代码来保证你的代码可以使用Lombok。</span><br><span class="line"></span><br><span class="line">``` xml</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;1.18.4&lt;/version&gt;</span><br><span class="line">		&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">	&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></p>
<p>如果你使用的是Gradle，那么你需要使用<a href="https://github.com/franzbecker/gradle-lombok" target="_blank" rel="noopener">Gradle Lombok插件</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &apos;io.franzbecker.gradle-lombok&apos; version &apos;1.14&apos;</span><br><span class="line">    id &apos;java&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="设置你的IDE"><a href="#设置你的IDE" class="headerlink" title="设置你的IDE"></a>设置你的IDE</h4><p>从你开始使用Java起，你应该就开始使用一个智能的IDE来自动编译或给你的代码提供一些建议。为了将Lombok集成进IDE，你需要告诉Lombok io来安装合适的钩子。</p>
<p>获取Lombok的jar包后，执行<figure class="highlight java"><figcaption><span>-jar lombok.jar```来完成所有的设置。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">IntelliJ IDEA和Visual Studio用户需要一个单独的Lombok插件，你可以选择从插件库中安装。</span><br><span class="line"></span><br><span class="line">### 代码拿来！</span><br><span class="line"></span><br><span class="line">talk is cheap, show me your code.程序员就应该拿代码说话。下面我们就来看一个完整的例子。</span><br><span class="line"></span><br><span class="line">#### Getters和Setters</span><br><span class="line"></span><br><span class="line">为被注解的自动生成getXXX和setXXX方法。</span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UptimeResponse</span> </span>&#123;</span><br><span class="line">    <span class="comment">// GetXXX and SetXXX are automatically generated</span></span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> <span class="keyword">long</span> uptime;</span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> <span class="keyword">long</span> currentTime;</span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> String status;</span><br><span class="line">    UptimeResponse() &#123;</span><br><span class="line">        <span class="keyword">this</span>.uptime = ManagementFactory</span><br><span class="line">                          .getRuntimeMXBean().getUptime();</span><br><span class="line">        <span class="keyword">this</span>.currentTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// So this works automagically</span></span><br><span class="line">UptimeResponse res = <span class="keyword">new</span> UptimeResponse();</span><br><span class="line">res.setStatus(<span class="string">"FAIL"</span>);</span><br><span class="line">System.out.println(res.getUptime());</span><br></pre></td></tr></table></figure></p>
<h4 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h4><p>可以自动创建默认的POJO构造函数，它将字段初始化为默认值。</p>
<ol>
<li>NoArgConstructor创建一个无参构造函数，所有的字段都会初始化为默认值</li>
<li>AllArgsConstructor创建一个全参数构造函数，每个字段都会初始化为指定值</li>
<li>RequiredArgsConstructor创建一个构造函数，参数包括所有final字段和标记为NotNull的字段</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.*</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Document</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This works automagically</span></span><br><span class="line">Document d = <span class="keyword">new</span> Document(<span class="string">"Hello World"</span>, <span class="string">"Message Body"</span>);</span><br><span class="line">d.getTitle();   <span class="comment">// Hello World</span></span><br><span class="line">d.getContent(); <span class="comment">// Message Body</span></span><br></pre></td></tr></table></figure>
<h4 id="Equals-and-hash-codes"><a href="#Equals-and-hash-codes" class="headerlink" title="Equals and hash codes"></a>Equals and hash codes</h4><p>Lombok可以生成的样板代码是包含局部变量的equals方法和hashcode方法。你可以手动排除一些字段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br><span class="line">    <span class="meta">@EqualsAndHashCode</span>.Exclude</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> String lastAction;  <span class="comment">// not required for equality checks</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This works automagically</span></span><br><span class="line">User u1 = <span class="keyword">new</span> User(<span class="string">"amitosh"</span>);</span><br><span class="line">u1.setLastAction(<span class="string">"Hello"</span>);</span><br><span class="line">User u2 = <span class="keyword">new</span> User(<span class="string">"amitosh"</span>);</span><br><span class="line">u2.setLastAction(<span class="string">"Compile"</span>);</span><br><span class="line">u1.equals(u2) <span class="comment">// Gives true</span></span><br></pre></td></tr></table></figure>
<h4 id="To-String"><a href="#To-String" class="headerlink" title="To String"></a>To String</h4><p>Lombok的ToString注解自动生成toString方法，其中包含类封装的全部字段。这是用于生成调试表示的快速方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> String target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This works automagically</span></span><br><span class="line">Entry e = <span class="keyword">new</span> Entry();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">System.out.println(e);  <span class="comment">// Nice output with values of id and target</span></span><br></pre></td></tr></table></figure>
<h4 id="Data-classes"><a href="#Data-classes" class="headerlink" title="Data classes"></a>Data classes</h4><p>这个注解用于生成符合规范的完整POJO。它是ToString、EqualsAndHashCode以及所有非final字段的Getter和Setter的集合体。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sender;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This works automagically</span></span><br><span class="line">Message m = <span class="keyword">new</span> Message(<span class="string">"amitosh"</span>, <span class="string">"Hello World"</span>);</span><br><span class="line">m.setSender(<span class="string">"agathver"</span>);</span><br><span class="line">m.getContent();  <span class="comment">// Hello World</span></span><br><span class="line">m.toString();    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<h4 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="SneakyThrows"></a>SneakyThrows</h4><p>Java是一门静态检查语言，但有时检查会比较多余。例如有时我们不关心异常，或者确定代码中不会出现异常，所以就不想去写捕获和处理异常的代码。这时SneakyThrows注解可以帮助我们一起骗过编译器。</p>
<p>但要注意不能滥用这个注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SneakyThrowsExample</span> </span>&#123;</span><br><span class="line">   <span class="meta">@SneakyThrows</span>(UnsupportedEncodingException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">   public String utf8ToString(byte[] bytes) &#123;</span><br><span class="line">       <span class="comment">// This exception is never generated as UTF-8 is guaranteed</span></span><br><span class="line">       <span class="comment">// to be supported by the JVM</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, <span class="string">"UTF-8"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Delomboking"><a href="#Delomboking" class="headerlink" title="Delomboking"></a>Delomboking</h3><p>不是所有的工具都支持Lombok的，最著名的是JavaDoc工具。你需要有一个中间态的代码来使文档正确表示。此外，有时候你可能会想看看Lombok生成的代码到底是什么样的。幸好Lombok提供了“delomboking”，用来将Lombok转换成Java源代码。</p>
<p>要转换一个文件夹下的全部代码，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar lombok.jar delombok src -d src-delomboked</span><br></pre></td></tr></table></figure>
<p>maven和gradle插件也包含了delomboking任务，在你需要的时候可以使用。</p>
<p>Lombok是一个提高你的Java生产力的工具。我无法想象没有它时应该怎么写Java程序。真心希望你在读完本文以后能够认识到它的强大！</p>
<h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h3><p><a href="https://medium.com/@agathver/banish-repetitive-java-code-with-lombok-f9b97d0d4137" target="_blank" rel="noopener">https://medium.com/@agathver/banish-repetitive-java-code-with-lombok-f9b97d0d4137</a></p>
<h3 id="译者点评"><a href="#译者点评" class="headerlink" title="译者点评"></a>译者点评</h3><p>Lombok是一款非常好用的工具，它可以帮助我们快速构建POJO类。但是如果直接使用@Data注解时，会破坏类的封装特性。这点不符合面向对象编程的思想，但工作中会使用一些序列化工具，这些工具要求所有字段都要有setter方法。为了编码的方便，可能使用@Data方法是一个好的选择。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】Redis喜提新数据结构：Redis Streams</title>
    <url>/2019/03/28/%E3%80%90%E8%AF%91%E3%80%91Redis%E5%96%9C%E6%8F%90%E6%96%B0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9ARedis-streams/</url>
    <content><![CDATA[<p>本文是Redis作者antirez的一篇博客</p>
<p>原文地址：<a href="http://antirez.com/news/128" target="_blank" rel="noopener">http://antirez.com/news/128</a><a id="more"></a></p>
<p>我们在Redis5版本迎来了一个新的数据结构，它的名字叫做”Streams”。（撒花）Streams一经推出，就引起了社区中各位大佬的关注。所以我决定过一段时间做一个社区调查，讨论一下它的使用场景，并会在博客中将结果记录下来（是Redis作者的博客）。今天我想聊的是另一个问题：我怀疑有很多用户认为Streams的使用场景是和Kafka一样的。实际上，这个数据结构的设计背景也是消息的生产和消费，但你应该认为Redis Streams只是更擅长做这样的事情。流是一种很好的模型和”心理模型”，它能帮助我们更好的设计系统，但是Redis Streams像其他Redis数据结构一样，它更加通用，可以用来处理更多不同的问题。所以这篇博客我们会重点关注Redis Streams作为一种数据结构有哪些特性，而完全忽略它的阻塞操作、消费群和所有消息相关的内容。</p>
<h4 id="Streams是steroids上的CSV文件"><a href="#Streams是steroids上的CSV文件" class="headerlink" title="Streams是steroids上的CSV文件"></a>Streams是steroids上的CSV文件</h4><p>如果你想记录一系列的结构化数据，并且确定数据库是足够大的，你可能会说：我们以追加写入的方式打开一个文件，每一行记录是一个CSV数据项：</p>
<p>time=1553096724033,cpu_temp=23.4,load=2.3<br>time=1553096725029,cpu_temp=23.2,load=2.1</p>
<p>这看起来很简单，然后人们一直这样做了好多年，并且一直持续着：如果你知道你在做什么，那么这将成为一种固定的模式。如果同样的事情发生在内存中会怎样呢？内存的顺序写入能力更强，并且会自动移除掉CSV文件的一些限制：</p>
<ol>
<li>很难批量查询</li>
<li>太多的冗余信息：每个条目的时间几乎相同，字段也相同。但是移除字段会降低灵活性，就不能再增加别的字段了</li>
<li>每个条目的偏移量都是它在文件中的字节偏移量，而如果我们修改了文件结构，那么这些偏移量就会失效。所以这里缺少一个唯一标识的ID。</li>
<li>不能删除条目，只能标记无效。如果不重写日志的话，又没有垃圾回收，重写日志经常会因为各种原因出错，所以最好不要重写。</li>
</ol>
<p>不过使用这样的CSV条目也有一些好处：没有固定格式，字段可以改变，生成比较容易，而且存储格式比较紧凑。我们保留了其优点，去掉了限制，于是设计出了像Redis Sorted Set这样的混合数据结构——Redis Streams。他们看起来像基本数据结构一样，但是为了得到这样的效果，内部是有多种表现形式的。</p>
<h4 id="Streams-101（就是Streams基础部分）"><a href="#Streams-101（就是Streams基础部分）" class="headerlink" title="Streams 101（就是Streams基础部分）"></a>Streams 101（就是Streams基础部分）</h4><p>Redis Streams是一种通过基数树连接的增量压缩的宏节点。（好难理解的概念，把原话贴出来：Redis Streams are represented as delta-compressed macro nodes that are linked together by a radix tree）。它的作用是，快速查找一个随机项，获取范围值，删除旧值来创建一个有大小上限的流。对程序员来说，我们的接口和CSV文件很相似：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; XADD mystream * cpu-temp 23.4 load 2.3</span><br><span class="line"><span class="string">"1553097561402-0"</span></span><br><span class="line">&gt; XADD mystream * cpu-temp 23.2 load 2.1</span><br><span class="line"><span class="string">"1553097568315-0"</span></span><br></pre></td></tr></table></figure>
<p>通过这个例子可以看到，XADD命令自动生成并返回了一个entry ID。它是单调递增的，并且有两部分组成，&lt;时间&gt;-&lt;数量&gt;，时间是毫秒级，而数量则是同一毫秒生成的entry数量递增。</p>
<p>所以第一个从上面所说的”追加写入CSV”文件抽象出来概念就是，如果用星号作为XADD命令的ID参数，就从服务器获取了一个entry ID。这个ID不仅仅是entry的唯一标识，也和entry加入流的时间有关。XRANGE命令可以批量获取或获取单个数据项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; XRANGE mystream 1553097561402-0 1553097561402-0</span><br><span class="line">1) 1) <span class="string">"1553097561402-0"</span></span><br><span class="line">   2) 1) <span class="string">"cpu-temp"</span></span><br><span class="line">      2) <span class="string">"23.4"</span></span><br><span class="line">      3) <span class="string">"load"</span></span><br><span class="line">      4) <span class="string">"2.3"</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，为了得到单个数据项，我用了相同的ID作为起始和结束值。然而我可以获取任意范围的数据项，并且用COUNT参数限制结果的数量。我也可以将起止参数都设置为时间戳，获取一段时间内的数据项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; XRANGE mystream 1553097560000 1553097570000</span><br><span class="line">1) 1) <span class="string">"1553097561402-0"</span></span><br><span class="line">   2) 1) <span class="string">"cpu-temp"</span></span><br><span class="line">      2) <span class="string">"23.4"</span></span><br><span class="line">      3) <span class="string">"load"</span></span><br><span class="line">      4) <span class="string">"2.3"</span></span><br><span class="line">2) 1) <span class="string">"1553097568315-0"</span></span><br><span class="line">   2) 1) <span class="string">"cpu-temp"</span></span><br><span class="line">      2) <span class="string">"23.2"</span></span><br><span class="line">      3) <span class="string">"load"</span></span><br><span class="line">      4) <span class="string">"2.1"</span></span><br></pre></td></tr></table></figure>
<p>篇幅原因，我们不再展示更多的Streams API了。我们有相关的<a href="https://redis.io/topics/streams-intro" target="_blank" rel="noopener">文档</a>，感兴趣的同学可以去阅读。目前为止，我们只需要关注基本使用方法：XADD用来增加数据，XRANGE（或XREAD）用来读取数据。我们来看一下我为什么说Streams是一个强大的数据结构。</p>
<h4 id="网球运动员"><a href="#网球运动员" class="headerlink" title="网球运动员"></a>网球运动员</h4><p>前几天我和一个最近在学习Redis的朋友一起建模一个应用程序：这是一个用来追踪当地网球场、球员和比赛的app。很明显，球员是一个小的模型，在Redis中只需要用一个hash就足够了，key的形式可以是player:\&lt;id>。当你进一步使用Redis建模时，就会意识到你需要去追踪指定网球俱乐部的一场比赛。如果球员1和球员2打了一场比赛，球员1获胜。那么我们可以这样来记录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; XADD club:1234.matches * player<span class="_">-a</span> 1 player-b 2 winner 1</span><br><span class="line"><span class="string">"1553254144387-0"</span></span><br></pre></td></tr></table></figure>
<p>通过这样简单的操作，我们就可以获得如下的信息：</p>
<ol>
<li>一场比赛的唯一标识：流里的ID</li>
<li>不需要创建一个表示比赛的对象</li>
<li>分页查询比赛情况，或者查看某场比赛是否在指定时间就进行</li>
</ol>
<p>在Streams出现之前，我们需要创建一个Sorted Set，分数是时间。Sorted Set的元素是比赛的ID（存在一个Hash里）。这不仅是增加了工作量，而且还造成了更多的内存浪费，比你想象的要多得多。</p>
<p>现在看起来Streams像是一个追加模式的，以时间为分数，元素是小型Hash的Sorted Set。简而言之，这是Rediscover建模环境中的一次革命。</p>
<h4 id="内存使用情况"><a href="#内存使用情况" class="headerlink" title="内存使用情况"></a>内存使用情况</h4><p>上面的例子不仅仅是固化模式的问题，相比旧有的Sorted Set+ Hash的模式，Streams对内存的节省做了很好的优化，然而这一点是不容易被发现的。</p>
<p>假设我们要记录100万场比赛，</p>
<p>Sorted Set + Hash的内存使用量是220MB（242RSS）</p>
<p>Stream的内存使用量是16.8MB（18.11RSS）</p>
<p>这不仅仅是一个数量级的差异（实际上是13倍的差异），这意味着我们旧有的模式实在是太浪费了，而新的模式是完美可行的。Redis Streams还有其他神奇的地方：宏节点可以包括多个元素，它们使用叫做listpack的数据进行编码。listpacks会对二进制形式的整数进行编码，即时它是语义字符串。最重要的是，我们使用了增量压缩和相同字段压缩。我们可以通过ID或时间进行查询，因为宏节点是用基数树连接的。基数树叶被设计为使用很少的内存。所有的事情都使用极少的内存，但有趣的是，用户并不能从语义上看到使Streams更加高效的实现细节。</p>
<p>现在我们来做一个简单的计算，如果我保存了100万个entry，使用了18MB内存，那么1000万个就是180MB，1亿个使用1.8GB，保存10亿数据也只使用18GB内存。</p>
<h4 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h4><p>有一个比较重要的事情需要注意，在我看来，上面我们用来记录网球比赛的例子与把Redis Streams作为一个时间序列来使用非常不同。没错，逻辑上我们仍然是记录一类事件，但本质上的区别是记录日志和创建一个entry并存入对象的不同。在使用时间序列时，我们只是记录一个外部事件，而不需要真的展示一个对象。你可能认为这个区别不重要，但事实不是这样。对Redis用户来说很重要的是，如果需要保存一系列有序的对象，并且给每个对象赋一个ID，那么就需要使用Redis Streams。</p>
<p>然而即时是一个简单的时间序列，也是一个很大的用例，因为在Streams出现之前，Redis在面对这种用例时令人有些绝望。一个节省内存，并且灵活的流，对开发者来说是一个重要的工具。</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>Streams非常灵活并且有很多使用场景，我想尽量用简短的语言，以确保上面的例子和内存分析更加通俗易懂。也许大多数读者已经搞懂了。不过在上个月我和别人交流时感觉到Streams和流式处理还是有着很强的关联。就像这个数据结构只能用来处理流一样，事实并非如此。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】推荐你使用Vim的三个半理由</title>
    <url>/2020/03/11/%E3%80%90%E8%AF%91%E3%80%91%E6%8E%A8%E8%8D%90%E4%BD%A0%E4%BD%BF%E7%94%A8Vim%E7%9A%84%E4%B8%89%E4%B8%AA%E5%8D%8A%E7%90%86%E7%94%B1/</url>
    <content><![CDATA[<p>在很久以前，软件行业就有一种争论：究竟要不要使用Vim。这种争论有点像音乐界关于模拟信号与数字信号的争论。<a id="more"></a></p>
<p>在大多数工程师眼中，Vim是一种老旧的，已经过时了的文本编辑器。它缺乏很多优秀的功能，用起来也没有现代的IDE舒服。但实际上，Vim绝对不是一种老旧的文本编辑器。</p>
<p>Vim就像是手动挡的汽车一样。</p>
<p>你必须要学会如何去驾驭它，如何手动换挡。而一旦你习惯了以后，就会获得成倍的收获与乐趣。它可以带着你在蜿蜒的小路上行驶，你需要保持全神贯注，并且精巧的换挡。这时你会觉得你和汽车之间仿佛建立了某种连接，它就像是你身体的一部分一样。</p>
<p>Vim就是这样子，这也是为什么它会如此有趣的原因。</p>
<p>下面就是我推荐你使用Vim的3个半理由。</p>
<h3 id="1-不用鼠标"><a href="#1-不用鼠标" class="headerlink" title="1. 不用鼠标"></a>1. 不用鼠标</h3><p>当你使用Vim的时候，你几乎可以不使用鼠标，你必须用键盘去做所有的事情。这会使你成为更强大、更高效的开发者。</p>
<p>你的手离开键盘的次数越多，你的工作效率就会越低。每次使用鼠标都会拖慢你的工作效率，你的大脑就像CPU一样要进行线程上下文的切换。所以你应该慢慢学会使用快捷键。</p>
<p>Vim的一大好处就是它只能使用快捷键，你想用鼠标都不行。</p>
<p>你必须学着习惯这一点。</p>
<h3 id="2-本地开发"><a href="#2-本地开发" class="headerlink" title="2. 本地开发"></a>2. 本地开发</h3><p>在大多数Unix系统中，默认都可以使用Vim或者Vi。这两者是完全运行在命令行上的编辑器看，由于没有GUI，因此它们更加通用和轻便。</p>
<p>因为Vim是完全由命令行驱动的，当你使用SSH连接远程服务器编辑文本或者在线修改代码时，就会有飞一样的感觉了。</p>
<p>在使用像Ubuntu Server这样本身并不包含GUI的系统时，VIm更是显得尤为重要。</p>
<p>有了Vim，你就不需要在系统直接来回传输文件，也不用使用SSHFS来挂载远程系统了。只需要用vim打开你的配置文件，编辑，然后<code>:wq</code>。</p>
<h3 id="3-不会分心"><a href="#3-不会分心" class="headerlink" title="3. 不会分心"></a>3. 不会分心</h3><p>你是否真的需要自动补全和集成代码分析呢？你又真的需要那些花里胡哨的UI吗？</p>
<p>你应该学会的是简单思考，Vim没有那些大型IDE臃肿的功能，它能让你专注于问题的本质：代码。</p>
<p>使用Vim时，你会变得更加有条理和严谨。你会更加清楚你当前在编辑的是哪个文件，它在什么目录下。即使没有展示在你面前，你也会很清楚它们的位置。</p>
<p>由于编辑器的简单性，在文件之间进行编辑，剪切，粘贴和移动这些动作会变得更加清晰和明确。</p>
<p>当然了，有时候你可能需要一些额外的功能。可以通过安装Vim插件来达到目的。这些插件都是按需取用的，你只需要选择你真正需要用的即可。</p>
<p>你可以使用<a href="https://github.com/tpope/vim-pathogen" target="_blank" rel="noopener">Pathogen</a>来帮助你管理Vim的插件。</p>
<h3 id="3½-街头威望"><a href="#3½-街头威望" class="headerlink" title="3½ 街头威望"></a>3½ 街头威望</h3><p>其他不使用Vim的开发人员看到你使用Vim开发时会觉得你很疯狂，你可以利用他们的这种心态来展示自己的优势，同时还能提高影响力。</p>
<p>记住，你可以比别人开发的更快。因为Vim比那些现代的大型IDE占用的内存要少得多。</p>
<p>无论你是为了什么目的去使用Vim，抑或是被迫去使用的。你都可以学着去爱上它，这样你自己也会成长很多。</p>
<p>Vim是最好的厨师才能用的刀。你可以用它来切东西，或者被它切。。。</p>
<h3 id="译者点评"><a href="#译者点评" class="headerlink" title="译者点评"></a>译者点评</h3><p>Vim在开发中的用处还是很大的，不过我本人也只是把它作为一个文本编辑器来用，写代码还是更习惯用IDE。因为我真的需要代码补全功能。用Vim编程也许只有那些初代目大佬才能做到吧。大家还是可以适当学一学使用Vim，毕竟在外行看来可以算是装X利器了。</p>
<h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h3><p><a href="https://medium.com/better-programming/3%C2%BD-reasons-why-you-should-be-using-vim-8202360afa3" target="_blank" rel="noopener">https://medium.com/better-programming/3%C2%BD-reasons-why-you-should-be-using-vim-8202360afa3</a></p>
]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】感谢你的Code Review</title>
    <url>/2020/02/17/%E3%80%90%E8%AF%91%E3%80%91%E6%84%9F%E8%B0%A2%E4%BD%A0%E7%9A%84Code-Review/</url>
    <content><![CDATA[<p>作为一名初级工程师，当我看到一些问题时，通常会主动去解决它们，因此我总会进行一些大范围的代码修改。<a id="more"></a></p>
<p>这意味着我需要发出大量的代码审查。在一次修改中通常会涉及到从UI到数据库的所有部分。</p>
<p>我对于自己能够维护整个系统而骄傲，也为自己的快速处理问题的能力而骄傲。同时也为自己的勇敢和解决重大问题的能力而自豪。</p>
<p>直到有一天，一位资深工程师把我拉到一边，给我提出了迄今为止我收到过最好的代码审查返回。它告诉我应该将巨型的代码审查拆分为更小的增量修改。</p>
<p>我第一反应是感到恼怒。我不理解他为什么要我这么做。我对自己解决重大问题的能力非常有信心！为什么他说我的工作做的不好？！一点一点的进行修改只会拖慢我的脚步！</p>
<p>虽然当时我还不知道小规模、增量修改的种种好处，但是我很庆幸当时听了这位高级工程师的意见，很高兴我开始学着进行小规模、增量的修改。</p>
<p>这种方法给我后来的职业生涯带来了巨大的好处。</p>
<h3 id="增量修改的好处"><a href="#增量修改的好处" class="headerlink" title="增量修改的好处"></a>增量修改的好处</h3><p>进行增量修改有诸多好处，下面我来列举一些。</p>
<ul>
<li><strong>更少的合并冲突。</strong>你改的文件越多，和其他人的修改发生冲突的可能性就越大，小规模的修改可以有效的避免冲突，即使有冲突时也能更快的解决。</li>
<li><strong>更快的代码审查。</strong>对代码审查人员来说，审查5个文件无疑要比审查50多个文件轻松许多。与那些需要面对面交谈十分钟才能开始看的代码相比，小规模的修改能够更快速的开始审查并且更容易解释。当审查人员面对大量的代码审查工作时，他们有可能会犯懒，非常希望能找个人替他们完成这项工作。因此你可能需要花费很长时间才能找到一个愿意审查你的代码的人。</li>
<li><strong>更早的修正。</strong>你的代码审查者可能与你的思路相左。他们可能会要求你重做所有的事情。如果你之前只花了几个小时进行修改，那么这对你来说可能不是什么大问题。但是如果你在这个问题上已经花费了两天时间，那么重做可能是一件非常痛苦的事情。</li>
<li><strong>更快速的测试。</strong>如果你的代码修改涉及到了从UI到数据库的所有层级，你可能需要对整个产品进行重新测试。而如果你只进行小规模修改，那就只需要测试你所修改的那部分。如果你需要解决很多代码审查反馈或者是合并很多代码时，这种好处就非常明显了。重新测试所有东西会花费大量的时间，特别是手动测试。</li>
<li><strong>更少的bug。</strong>小规模修改意味着你不需要同时将所有东西都装进脑子里。你可以专注于你进行优化的这一部分代码，保证你可以把它做到最好。（我曾经见过一个工程师，它对自己的大规模改动感到不知所措，后来他养成了检查和修复都追求完美的习惯。希望你不要成为那样的人，即使没人抱怨，但是你的同事将会慢慢变得不信任你的代码。）</li>
<li><strong>更容易排除故障。</strong>如果你需要改动一些代码，那么小规模的改动可以帮助你更加容易的定位问题。</li>
<li><strong>增量部署。</strong>如果你想要不停机更新，那么更小的、增量的改动会帮助你解决这个问题。（但这并不是全部解决方法）</li>
<li><strong>还原更加简单。</strong>当你写了bug时，你的改动越小，还原就更加简单。如果你合入了大量代码，并且其他人又在后来进行了改动，那么还原你的代码就会是一件非常痛苦的事情。也许你可以进行快速修复，但这并不是一定奏效，生产环境出现事故时，剔除有问题的代码会使团队的其他人更加放心。</li>
<li><strong>部署回滚更加简单。</strong>如果单次部署更新了web服务和即时生效的UI功能，那么如果你想要回滚后端服务就必须先要回滚UI的改动。由于这样部署方式，想要做到不停机更新可能并不容易。最好的办法就是把它们分别合入代码仓库并部署。</li>
<li><strong>更低的风险。</strong>这实际上是上述所有情况的结果。</li>
</ul>
<h3 id="为你的未来交学费"><a href="#为你的未来交学费" class="headerlink" title="为你的未来交学费"></a>为你的未来交学费</h3><p>那天我从那位高级工程师那里收到的代码审查反馈，已经被证明是职业生涯迄今为止收到的最好的代码审查反馈了。</p>
<p>多年后，我遇到了另一名工程师，他一直在进行大规模、彻底的变更。我把相同的反馈分享给了他，他看起来很生我的气，但是我完全可以理解他。在我看到他有进步之前，我离开了那家公司，希望他最终能体验到小规模修改带来的好处。</p>
<p>相信他以后会是一名优秀的工程师。</p>
<h3 id="译者点评"><a href="#译者点评" class="headerlink" title="译者点评"></a>译者点评</h3><p>小范围的修改确实是很有必要的。我自己在做code review的时候看到那种几百行的代码修改也是很头疼的。作者对于小规模修改的好处总结的还是比较全面的，希望大家能有收获。</p>
<h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h3><p><a href="https://medium.com/better-programming/the-best-code-review-feedback-i-ever-received-43313a503517" target="_blank" rel="noopener">https://medium.com/better-programming/the-best-code-review-feedback-i-ever-received-43313a503517</a></p>
]]></content>
      <tags>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】如何成为一名优秀的初级工程师</title>
    <url>/2019/10/22/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E4%BC%98%E7%A7%80%E7%9A%84%E5%88%9D%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88/</url>
    <content><![CDATA[<p>很多人都在想着如何成为一名高级工程师，而我想要的是先成为优秀的初级工程师。<a id="more"></a></p>
<p>明年将是我正式受雇佣写代码的第15年了。（译者：老外的写代码职业生涯真的挺长的）</p>
<p>回首往昔，我第一天工作的日子仍然历历在目。那时的我每天都在格子间中写着SAP、算法、数据结构、SQL和C++，还涉及了更广泛的主题，包括知识管理和项目管理。我了解所有的这些知识，但我缺乏的是在需要的地方使用这些知识的信心。</p>
<p>我花了很多年才获得这种信心，在那时，我也意识到实际上我只需要做到两件事就可以成功：</p>
<ul>
<li>学习某些新东西的态度</li>
<li>无论学到什么都有能力付诸行动</li>
</ul>
<p>这两者都是养成的技能，不仅需要努力，而且还要谦虚的承认自己的无知，并与适合的人交流以消除这种无知。这就像三个正在建立隔离围墙的工人的故事。</p>
<p>你问第一个人他在干什么。他说他在搭砖头，他并不担心自己做的对或错。第二个工人说他正在建造一堵墙，但并不知道为什么要建这堵墙。第三个眨着眼睛充满热情的工人说他正在建造一座大教堂。他为自己在建造大教堂时能发挥作用而自豪。</p>
<p>优秀的初级开发者应该像第三个工人一样。他们与大方向保持一致，并且按照自己的方法不断进步。他们知道自己正在解决什么问题，并且为自己在建造大教堂（软件开发）中发挥的作用感到自豪。最后你需要保持谦卑，埋头工作，你会得到你想要的。</p>
<p>还有一些我作为初级开发者时学到的比较好的东西想要分享给你。</p>
<h3 id="每天暴漏自己的无知"><a href="#每天暴漏自己的无知" class="headerlink" title="每天暴漏自己的无知"></a>每天暴漏自己的无知</h3><p>Elbert Hubbard说过：</p>
<blockquote>
<p>永远无知的秘诀是：对你自己的意见和知识感到满意。</p>
<p><strong>The recipe for perpetual ignorance is: Be satisfied with your opinions and content with your knowledge.</strong></p>
</blockquote>
<p>你是一名初级开发者，你并没有了解所有事情，这没关系。即使在行业内打拼多年的资深工程师，也不是能了解所有的事情。无知并不是错误，不暴漏出这种无知才是更严重的问题。</p>
<p>在开会、讨论、进行代码演练时，你会听到几件事，这些事会在你脑中转瞬即逝。不要假装自己理解并点头，不懂就问。如果你不说出来，就错失了学习的机会，这最终会危及你的职业生涯。</p>
<p>在多年后的今天，我每天仍然会问许多问题。记住，没什么是愚蠢的问题，问一个愚蠢的问题并弄明白比整天坐在屏幕前要好得多。</p>
<p><strong>加快获得缺失知识的速度最好的方法是在每一个机会中暴露自己的无知。</strong></p>
<h3 id="写代码之前先读代码"><a href="#写代码之前先读代码" class="headerlink" title="写代码之前先读代码"></a>写代码之前先读代码</h3><p>Rasheed Ogunlaru说</p>
<blockquote>
<p>读到的代码有多好，写出来的就能有多好。</p>
<p><strong>How you look at the code is pretty much how you’ll see it.</strong></p>
</blockquote>
<p>我还记得我的第一个研发任务，需要我为现有功能编写出口，而我在这个任务上花了50个小时。周一我向领导汇报时，她说：“我们有现成的实现这个功能的代码，你应该直接用，这样能更快做出来。“</p>
<p>我错在哪了？我没有去读已有代码。现实生活中，开发人员往往在读代码上花费的时间要比写代码多。即使是添加新功能或纠正缺陷，也需要了解已有代码。这没有捷径，读代码，读代码还是读代码。</p>
<p>读代码可以让你了解别人是怎么写代码的，以及有哪些你可以复用的库。需要注意的是：</p>
<ul>
<li>编码标准</li>
<li>命名约定</li>
<li>设计模式</li>
<li>注释</li>
<li>用到的测试脚本和测试用例等</li>
</ul>
<p>记住，聪明的开发者不会重复造轮子。他们会尽可能尝试服用并构建已有功能。这不仅节省了时间，而且在共享代码的开发人员之间建立 了友情。</p>
<p><strong>现在已经有了解决问题的办法了。所以当你尝试完成一个功能时，先看一下其他人是否已经解决了这个问题。这不是偷工减料，而是在努力完成。</strong></p>
<h3 id="寻求建设性批评"><a href="#寻求建设性批评" class="headerlink" title="寻求建设性批评"></a>寻求建设性批评</h3><p>Elbert Hubbard提到了一个避免批评的最佳技术：</p>
<blockquote>
<p>想要避免批评就要什么也不说，什么也不做，什么也不成为。</p>
<p><strong>To avoid criticism say nothing, do nothing, be nothing.</strong></p>
</blockquote>
<p>我们所有人都喜欢接收赞美，在别人称赞我们的工作时会感到很开心，这没问题。然而作为一名初级开发者，相比赞美，我认为你更应该接受建设性的批评。良药苦口利于病。</p>
<p>我记得我第一次接受一名资深工程师的代码审查。在40分钟时间内，他细致的审查了我的代码，结束时，他的评论比我的代码还要多。经过这么多努力，我真的很难过。但这次代码审查确实帮助我发现了我的短板，并向我详细展示了我可以改善的地方。这是我前进道路上的启明灯。</p>
<p>也就是说，想要得到建设性批评，就要主动寻求。我合作过很多资深工程师，他们从没拒绝过我的请求，即使他们很忙。当然，你需要根据他们的时间制定可行的日程，以进行有意义的会话。</p>
<p>如果资深工程师花时间帮你审查代码并提出一些改进意见，表示他们对你的工作很有兴趣。不要浪费机会，主动上去寻求建设性批评。</p>
<p>正如Andy Marks所说：</p>
<blockquote>
<p>如果你对你的代码感到自豪，就把它展示出来。如果你没有展示出来，意识到你的自豪感的人都是想与你合作的人。</p>
<p><strong>If you take pride in your code, it will show up in the code. If you don’t it also shows. The people who recognize your sense of pride are people you want to work with.</strong></p>
</blockquote>
<h3 id="寻求大局观"><a href="#寻求大局观" class="headerlink" title="寻求大局观"></a>寻求大局观</h3><p>Murat Ildan说过：</p>
<blockquote>
<p>想要看到更多风景，就走出黑暗的山谷，爬上光明的山顶！</p>
<p><strong>To see the big picture, get out of the dark valleys, climb to the sunny summits!</strong></p>
</blockquote>
<p>还记得我们讲的三个工人的故事中那个知道自己在盖教堂的工人吗？关注大局往往就是这样。作为一名初级开发者，在大多数时间中，你只会接触一小段代码或者解决已有代码中的bug。你在完成分配给你的工作，这没有错。但如果你想成为整个交易的一部分；你需要花点时间找出交易的全部内容。</p>
<p>你调整视角，并询问有关代码如何适应整个系统的问题。</p>
<p>为什么使用特定的设计模式？</p>
<p>为什么使用特定的语言？</p>
<p>缺点是什么？它可以与你的代码一起使用吗？</p>
<p>这些代码是否易于维护？</p>
<p>等等……</p>
<p>最好也是最简单的方法是获得导师的指导。技术导师可以帮助你提高技能水平并通过大的项目帮你巩固。但是没有明确的方法去寻找技术导师。也许是一杯咖啡就可以打破僵局。</p>
<p><strong>大多数初级开发者因为不理解功能或者对项目目标做出假设而犯错。花时间了解系统运作的实际情况将会对你成为优秀的开发者有很大帮助。</strong></p>
<h3 id="最后，一名优秀的高级开发者不仅仅了解编程"><a href="#最后，一名优秀的高级开发者不仅仅了解编程" class="headerlink" title="最后，一名优秀的高级开发者不仅仅了解编程"></a>最后，一名优秀的高级开发者不仅仅了解编程</h3><p>很长一段时间中，我都认为一名优秀的高级开发者就是拥有多年的开发经验（5年Java，7年Python等等……）。经验越丰富就越优秀。</p>
<p>但是我错了。一名优秀的高级开发者不仅仅是只了解编程。他们充满好奇。他们是优秀的导师。最重要的是他们具有不可思议的代码意识，知道什么时候不做某事。例如，他们知道从头开始重写一个库只是为了使其更具有可读性，或者在团队选择旧框架时切换到新的框架并不总是明智的选择。他们不是在规则风险。他们是更加谨慎的做正确的事情。</p>
<p>不是每个人在他（她）的职业生涯中都能成为“高级”开发者。一个好的高级开发者不仅需要好的经验，还应该有正确的态度和能力，以便将来应用这些经验。资历与能力有关，与年龄无关。</p>
<p>就像Kevin de Leon说的：</p>
<blockquote>
<p>如果你什么都不做，资历就没有任何意义。</p>
<p><strong>Seniority means nothing if you do not do anything with it.</strong></p>
</blockquote>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://medium.com/swlh/how-to-be-a-good-junior-developer-cd86b77086fc" target="_blank" rel="noopener">https://medium.com/swlh/how-to-be-a-good-junior-developer-cd86b77086fc</a></p>
]]></content>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】微软如何进行代码审查</title>
    <url>/2019/06/23/%E3%80%90%E8%AF%91%E3%80%91%E5%BE%AE%E8%BD%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/</url>
    <content><![CDATA[<p>带你了解全球最大的软件公司的code review</p>
<p>原文链接：<a href="https://www.freecodecamp.org/news/how-code-reviews-work-at-microsoft-4ebdea0cd0c0/" target="_blank" rel="noopener">https://www.freecodecamp.org/news/how-code-reviews-work-at-microsoft-4ebdea0cd0c0/</a><a id="more"></a></p>
<h5 id="你是否想知道全球最大的软件公司之一是如何通过代码审查来保证代码质量的？"><a href="#你是否想知道全球最大的软件公司之一是如何通过代码审查来保证代码质量的？" class="headerlink" title="你是否想知道全球最大的软件公司之一是如何通过代码审查来保证代码质量的？"></a>你是否想知道全球最大的软件公司之一是如何通过代码审查来保证代码质量的？</h5><p>我也一样，这就是我和微软的同事一起研究在我们公司怎么进行代码审查的原因。它是一种常规的做法吗？每个开发人员都需要进行代码审查吗？他们使用什么工具呢？</p>
<p>这些问题在本文中会找到答案。</p>
<p>首先，我想先介绍一些关于微软的关键信息。<a href="https://news.microsoft.com/facts-about-microsoft/#EmploymentInfo" target="_blank" rel="noopener">微软有14万员工</a>，其中大约44%（超过6万）是工程师。Office、Visual Studio和Windows等一些产品同时有上千人在共同的代码库上开发的。</p>
<p>我说这些是为了告诉你协调和管理软件开发的过程意味着什么。可以想象到的是，协调不同团队共同开发是一件非常重要的事。代码审查在这一过程中扮演着重要的角色。</p>
<h5 id="在微软，代码审查是开发过程中不可或缺的一部分"><a href="#在微软，代码审查是开发过程中不可或缺的一部分" class="headerlink" title="在微软，代码审查是开发过程中不可或缺的一部分"></a>在微软，代码审查是开发过程中不可或缺的一部分</h5><p>微软的代码审查是一个被广泛采用的工程实践，成千上万的工程师认为这水一项伟大的实践，很多高绩效的团队都会在代码审查中花费大量的时间。</p>
<h5 id="调查微软的代码审查"><a href="#调查微软的代码审查" class="headerlink" title="调查微软的代码审查"></a>调查微软的代码审查</h5><p>正是因为代码审查在开发过程中扮演着重要的角色，所以我们需要更深入的挖掘并真正理解这种做法的利弊。<a href="https://www.michaelagreiler.com/wp-content/uploads/2019/03/Code-Reviewing-in-the-Trenches-Understanding-Challenges-Best-Practices-and-Tool-Needs.pdf" target="_blank" rel="noopener">在微软代码审查的大规模研究中</a>，我们采访、观察并调查了超过900位工程师，来了解他们在代码审查中的实践。</p>
<p>我们的目标是弄清楚代码审查究竟发挥着什么样的作用，工程师在做代码审查时面临着哪些挑战，并提炼出他们克服这些挑战的最佳实践。</p>
<h5 id="我们能从微软的代码审查实践中学到什么？"><a href="#我们能从微软的代码审查实践中学到什么？" class="headerlink" title="我们能从微软的代码审查实践中学到什么？"></a>我们能从微软的代码审查实践中学到什么？</h5><p>大多数经验告诉我们，小团队和大团队一样有价值。如果你的团队还没有进行代码审查，我会以一种展示最佳实践的方式来提炼我们的发现。我还会解释代码审查的生命周期，以便你在开发过程中加入这样的实践。</p>
<p>如果你的团队已经在做代码审查了，你可以把你的实践经验与微软的代码审查实践进行对比。看你的代码审查生命周期是否有所不同，在后面的文章中，你会从代码实践的挑战中学习到有用的知识。通过阅读本文，你可以看看你的团队是否实现了我说的所有最佳实践，并克服了相应的挑战。</p>
<h5 id="微软的工程师多久进行一次代码审查？"><a href="#微软的工程师多久进行一次代码审查？" class="headerlink" title="微软的工程师多久进行一次代码审查？"></a>微软的工程师多久进行一次代码审查？</h5><p>研究表明，36%的工程师说他们一天会进行多次代码审查，另外39%的工程师说他们每天最少进行一次代码审查，有12%的工程师会在一周进行多次，只有13%的工程师表示他们过去一周一次代码审查都没有做过。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1561167716/Blog/Other/code_review/code_review_01.png" alt="how_ofen_code_review"></p>
<p>这表示微软的工程师会花费较多的时间来进行代码审查，所以要保证这些时间花费的是值得的。但是，代码审查有哪些好处呢？</p>
<h5 id="代码审查带来哪些好处呢？"><a href="#代码审查带来哪些好处呢？" class="headerlink" title="代码审查带来哪些好处呢？"></a>代码审查带来哪些好处呢？</h5><p>代码审查最大的好处就是可以保证代码的质量，并且能够发现代码中的一些缺陷。另一个重要的好处就是知识传输。</p>
<p>知识传输意味着团队成员审核彼此的代码，以便熟悉代码库中的大部分代码，也是团队开发的最佳实践。另一个好处是，初级程序员和团队新人可以通过审查和被审查代码来快速提升他们的编程技巧。</p>
<p>工程师可以在代码审查期间讨论替代解决方案，这样做不仅可以改善代码库，也是所有相关人员学习的过程。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1561167716/Blog/Other/code_review/code_review_02.png" alt="code_review_benefits"></p>
<h5 id="工程师一般怎么进行代码审查？"><a href="#工程师一般怎么进行代码审查？" class="headerlink" title="工程师一般怎么进行代码审查？"></a>工程师一般怎么进行代码审查？</h5><p>代码审查可以通过多种方式执行，有时是一名工程师走到另一名工程师的办公桌前一起看代码，有时是整个团队一起审查代码。但是在微软，最常见的情况是使用代码审查工具来完成代码审查。</p>
<h5 id="微软的代码审查经常通过内部工具进行"><a href="#微软的代码审查经常通过内部工具进行" class="headerlink" title="微软的代码审查经常通过内部工具进行"></a>微软的代码审查经常通过内部工具进行</h5><p>代码审查工具有很多种，微软的团队可以自由选择。2016年，89%的工程师使用的是CodeFlow作为代码审查工具。后文我会对此进行进一步的解释。由于Git的兴起，工具库也随之改变，我会尽快增加更新后的数字。但我们要先来讨论常见的代码审查场景：</p>
<p>假设有一位名叫Rose的微软工程师，Rose刚刚完成了一个功能的一部分，现在想要得到同事的反馈。</p>
<h5 id="Rose怎么在微软发起代码审查"><a href="#Rose怎么在微软发起代码审查" class="headerlink" title="Rose怎么在微软发起代码审查"></a>Rose怎么在微软发起代码审查</h5><p>Rose这时已经准备好接收反馈了，所以她首先要准备好自己接受审查的代码，然后打开代码审查工具，此时可以看到自己做了哪些修改。</p>
<p>认真检查这些修改之后，她需要向审查人员描述一下修改内容以及为什么修改。这个描述会帮助审查人员快速理解代码修改的目的，最后准备把代码发送给审查人员。</p>
<h5 id="Rose怎么选择正确的审查人员？"><a href="#Rose怎么选择正确的审查人员？" class="headerlink" title="Rose怎么选择正确的审查人员？"></a>Rose怎么选择正确的审查人员？</h5><p>大多数有经验的程序员都知道谁应该来进行代码审查。但对于团队新人或者是做了新的领域任务的工程师来说是有一些困惑的。如果Rose不知道她应该添加谁，她应该看一下团队规定或者问一下同事。她也可以使用代码审查工具的推荐功能来帮助她选择审查人员。</p>
<h5 id="谁是相应的审查人员？"><a href="#谁是相应的审查人员？" class="headerlink" title="谁是相应的审查人员？"></a>谁是相应的审查人员？</h5><p>Rose选择了她认为合适的审查人员。他们通常是其他工程师，但也有可能是其他相关人员，例如开发工程师、设计人员或者是管理人员。选择一些审查人员是因为他们有专业知识，而有些审查人员被选择则是让他们了解即将发生的变化。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1561167717/Blog/Other/code_review/code_review_03.png" alt="code_reviewer_select"></p>
<h5 id="Rose请求同事给予反馈"><a href="#Rose请求同事给予反馈" class="headerlink" title="Rose请求同事给予反馈"></a>Rose请求同事给予反馈</h5><p>选择好审查人员后，Rose会将代码审查发送出去。代码审查工具会自动通知审查人员，有时也会通知管理人员或者其他团队的项目管理者。</p>
<h5 id="接收反馈是一个迭代过程"><a href="#接收反馈是一个迭代过程" class="headerlink" title="接收反馈是一个迭代过程"></a>接收反馈是一个迭代过程</h5><p>当Rose的同事有时间时，就会来进行代码审查。每一个审查人员都可以发表评论，评论完成后，审查人员便会把评论发送给Rose，Rose就可以根据审查人员的意见来完善代码了。</p>
<p>审查人员通常会关注的事情有：代码看起来有没有bug？架构是否有问题？是否存在一些细节问题，比如缺少注释或拼写错误。并不是所有的评论都很有价值，不过有几种最佳实践可以提升代码价值。</p>
<h5 id="Rose准备好了一个新的优化后的版本"><a href="#Rose准备好了一个新的优化后的版本" class="headerlink" title="Rose准备好了一个新的优化后的版本"></a>Rose准备好了一个新的优化后的版本</h5><p>Rose会按照审查人员的建议修复bug并优化代码。如果Rose发现这其中有一些误解或其他有争议的问题，她会走向同事讨论这些问题。这种方法有时会比使用工具更加高效。</p>
<p>总之，当她处理完所有的反馈之后，她把最新的代码发送给审查人员。这种新的版本叫做revision。</p>
<p>如果需要，她会收到更多的反馈，这种循环会持续多次，这主要取决于修改的类型以及代码的质量。对于简单的修改，只需要一次就可以，而对于复杂的修改，往往要经过多轮的review。</p>
<h5 id="所有的审查人员同意Rose合并代码"><a href="#所有的审查人员同意Rose合并代码" class="headerlink" title="所有的审查人员同意Rose合并代码"></a>所有的审查人员同意Rose合并代码</h5><p>在审查结束后，审查人员会将代码标记为OK，Rose就可以将代码合并到代码库了。</p>
<p>有些团队会允许开发人员在审查结束前合入代码，但这只限于修改部分较小的代码，这有利于异步审查和快速开发。</p>
<p>我所描述的所有步骤都是微软典型的代码审查过程，但不同的团队也会根据情况制定更加宽松或严格的规则。</p>
<h5 id="不是所有的团队都相同"><a href="#不是所有的团队都相同" class="headerlink" title="不是所有的团队都相同"></a>不是所有的团队都相同</h5><p>可以想象的是，在微软的6万个工程师，上千个团队并不是完全相同的，有些团队会根据需要增加一些步骤或工具。而我只想向你介绍一些概要的步骤。</p>
<h5 id="代码审查包括测试结果"><a href="#代码审查包括测试结果" class="headerlink" title="代码审查包括测试结果"></a>代码审查包括测试结果</h5><p>代码审查中，我们最不想在查bug方面浪费时间，所以需要一套自动化测试流程。你要在提交审查之前保证代码执行结果符合预期。</p>
<p>这就是为什么有些团队需要在提交任何代码审查之前都跑一遍测试，这是为了防止某些工程师忘了测试，并保证每次提交的代码可用。</p>
<p>还有些团队会更进一步，在开发人员提交代码后触发一个构建。这个构建包括精确显示修改部分，并开始一系列自动测试。测试结果会反馈到代码审查中。这么做是为了保证公共代码库中代码的可用性。</p>
<h5 id="代码审查包括用户接口"><a href="#代码审查包括用户接口" class="headerlink" title="代码审查包括用户接口"></a>代码审查包括用户接口</h5><p>如果修改影响到接口，那么开发人员应该提交截图。这么做可以让审查人员直观的看到改变，其次可以与在自己机器上运行的结果进行比较。</p>
<h5 id="代码审查包括静态分析"><a href="#代码审查包括静态分析" class="headerlink" title="代码审查包括静态分析"></a>代码审查包括静态分析</h5><p>静态分析工具可以使审查人员不必浪费时间来检查代码风格是否符合规范。微软有些团队会使用自动话的审查机器人。审查机器人会自动标注代码风格问题，以节省人工审核时间。</p>
<h5 id="微软代码审查工具"><a href="#微软代码审查工具" class="headerlink" title="微软代码审查工具"></a>微软代码审查工具</h5><p>多年来，微软使用一款名叫CodeFlow的内部工具作为代码审查工具。这是一款复杂的代码审查工具，它可以引导开发人员发起审查，自动提醒审查人员，并包含丰富的评论和讨论功能。</p>
<p>CodeFlow的UI是比较重的，很像Word和PowerPoint。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1561167718/Blog/Other/code_review/code_review_04.png" alt="CodeFlow"></p>
<h5 id="CodeFlow的接口说明"><a href="#CodeFlow的接口说明" class="headerlink" title="CodeFlow的接口说明"></a>CodeFlow的接口说明</h5><p>如果不感兴趣的话可以跳过这部分，不过为了感兴趣的同学，我还是要介绍一下CodeFlow的各个接口。区域A展示的是所有有影响的文件。</p>
<p>区域B是已分配的审核人员列表以及审核状态（比如已签名或待处理）。C是文档展示区域，D是所有文档的评论列表。</p>
<p>F展示的是单条评论，这个评论和具体的代码相关联。最后，E区域是整个代码审查的结果，这里是complete。上方的数字表示之前的几个版本，这里有5个不同版本。</p>
<h5 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h5><p>评论功能是CodeFlow最棒的功能之一。审查人员可以选择代码中的一部分进行评论，代码的作者和其他审查人员就会收到通知，并且可以在这里开始讨论。</p>
<h5 id="讨论功能"><a href="#讨论功能" class="headerlink" title="讨论功能"></a>讨论功能</h5><p>这个功能就像是在社交软件上交流一样（Twitter或Facebook），所以在CodeFlow上使用评论显得非常自然。另一个亮点是评论的状态，它可以是“won’t fix”, “resolved” 或“open”。</p>
<h5 id="对照两个不同的版本"><a href="#对照两个不同的版本" class="headerlink" title="对照两个不同的版本"></a>对照两个不同的版本</h5><p>对比两个不同的版本是一个非常实用的功能。你可以清晰的看出作者在不同的版本之间做了哪些修改。这可以帮助审查人员轻松追踪修改过程。</p>
<h5 id="代码审查分析工具"><a href="#代码审查分析工具" class="headerlink" title="代码审查分析工具"></a>代码审查分析工具</h5><p>微软开发者会花费大量的时间在执行代码审查上，为了保证这时间花费的是值得的，微软有自己的代码审查分析平台。</p>
<p>这个平台会存储所有的代码审查数据。包括代码审查的开发者，所有的评论，甚至是每一个修改版本的代码。</p>
<p>这些数据是代码审查研究的基础，它也会被一些产品团队用来检验自己团队的实践结果。我在这个系列文章中的一些研究和分析也都来自于这些数据。</p>
<h5 id="微软代码审查的未来"><a href="#微软代码审查的未来" class="headerlink" title="微软代码审查的未来"></a>微软代码审查的未来</h5><p>随着微软收购了Github，改变是不可避免的。例如，微软内部已经开始广泛采用Git作为代码版本控制工具了。这也意味着未来代码审查可能采用PR的形式。</p>
]]></content>
      <tags>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】浅谈SOLID原则</title>
    <url>/2019/12/04/%E3%80%90%E8%AF%91%E3%80%91%E6%B5%85%E8%B0%88SOLID%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>SOLID原则是一种编码的标准，为了避免不良设计，所有的软件开发人员都应该清楚这些原则。SOLID原则是由Robert C Martin推广并被广泛引用于面向对象编程中。正确使用这些规范将提升你的代码的可扩展性、逻辑性和可读性。<a id="more"></a></p>
<p>当开发人员按照不好的设计来开发软件时，代码将失去灵活性和健壮性。任何一点点小的修改都非常容易引起bug。因此，我们应该遵循SOLID原则。</p>
<p>首先我们需要花一些时间来了解SOLID原则，当你能够理解这些原则并正确使用时，你的代码质量将会得到大幅的提高。同时，它可以帮助你更好的理解一些优秀软件的设计。</p>
<p>为了理解SOLID原则，你必须清楚接口的用法，如果你还不理解接口的概念，建议你先读一读这篇<a href="https://medium.com/better-programming/understanding-use-of-interface-and-abstract-class-9a82f5f15837" target="_blank" rel="noopener">文章</a>。</p>
<p>下面我将用简单易懂的方式为你描述SOLID原则，希望能帮助你对这些原则有个初步的理解。</p>
<h3 id="单一责任原则"><a href="#单一责任原则" class="headerlink" title="单一责任原则"></a>单一责任原则</h3><blockquote>
<p>一个类只能因为一个理由被修改。</p>
<p><em>A class should have one, and only one, reason to change.</em></p>
</blockquote>
<p>一个类应该只为一个目标服务。并不是说每个类都只能有一个方法，但它们都应该与类的责任有直接关系。所有的方法和属性都应该努力做好同一类事情。当一个类具有多个目标或职责时，就应该创建一个新的类出来。</p>
<p>我们来看一下这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdersReportService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderVO&gt; <span class="title">getOrdersInfo</span><span class="params">(Date startDate, Date endDate)</span> </span>&#123;</span><br><span class="line">        List&lt;OrderDO&gt; orders = queryDBForOrders(startDate, endDate);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> transform(orders);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;OrderDO&gt; <span class="title">queryDBForOrders</span><span class="params">(Date startDate, Date endDate)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// select * from order where date &gt;= startDate and date &lt; endDate;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;OrderVO&gt; <span class="title">transform</span><span class="params">(List&lt;OrderDO&gt; orderDOList)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//transform DO to VO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码就违反了单一责任原则。为什么会在这个类中执行sql语句？这样的操作应该放到持久化层，持久化层负责处理数据的持久化的相关操作，包括从数据库中存储或查询数据。所以这个职责不应该属于这个类。</p>
<p>transform方法同样不应该属于这个类，因为我们可能需要很多种类型的转换。</p>
<p>因此我们需要对代码进行重构，重构之后的代码如下（为了节省篇幅）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdersReportService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrdersReportDao ordersReportDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Formatter formatter;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderVO&gt; <span class="title">getOrdersInfo</span><span class="params">(Date startDate, Date endDate)</span> </span>&#123;</span><br><span class="line">        List&lt;OrderDO&gt; orders = ordersReportDao.queryDBForOrders(startDate, endDate);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> formatter.transform(orders);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdersReportDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderDO&gt; <span class="title">queryDBForOrders</span><span class="params">(Date startDate, Date endDate)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Formatter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;OrderVO&gt; <span class="title">transform</span><span class="params">(List&lt;OrderDO&gt; orderDOList)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><blockquote>
<p>对扩展开放，对修改关闭。</p>
<p><em>Entities should be open for extension, but closed for modification.</em></p>
</blockquote>
<p>软件实体（包括类、模块、函数等）都应该可扩展，而不用因为扩展而修改实体的内容。如果我们严格遵循这个原则，就可以做到修改代码行为时，不需要改动任何原始代码。</p>
<p>我们还是以一段代码为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CostManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(Shape shape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> costPerUnit = <span class="number">1.5</span>;</span><br><span class="line">        <span class="keyword">double</span> area;</span><br><span class="line">        <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Rectangle) &#123;</span><br><span class="line">            area = shape.getWidth() * shape.getHeight();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            area = shape.getRadius() * shape.getRadius() * pi();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> costPerUnit * area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你想要计算正方形的面积，那么我们就需要修改calculate方法的代码。这就破坏了开闭原则。根据这个原则，我们不能修改原有代码，但是我们可以进行扩展。</p>
<p>所以我们可以把计算面积的方法放到Shape类中，再由每个继承它的子类自己去实现自己的计算方法。这样就不用修改原有的代码了。</p>
<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>里氏替换原则是由<a href="https://en.wikipedia.org/wiki/Barbara_Liskov" target="_blank" rel="noopener">Barbara Liskov</a>在1987年的“数据抽象“大会上提出的。Barbara Liskov和<a href="https://en.wikipedia.org/wiki/Jeannette_Wing" target="_blank" rel="noopener">Jeannette Wing</a>在1994年发表了论文对这一原则进行阐述：</p>
<blockquote>
<p>如果φ(x)是类型T的属性，并且S是T的子类型，那么φ(y)就是S的属性。</p>
<p><em>Let φ(x) be a property provable about objects x of type T. Then φ(y) should be true for objects y of type S where S is a subtype of T.</em></p>
</blockquote>
<p>Barbara Liskov给出了易于理解的版本，但是这一版本更依赖于类型系统：</p>
<blockquote>
<p><em>1. Preconditions cannot be strengthened in a subtype.</em><br><em>2. Postconditions cannot be weakened in a subtype.</em><br><em>3. Invariants of the supertype must be preserved in a subtype.</em></p>
</blockquote>
<p>Robert Martin在1996年提出了更加简洁、通顺的定义：</p>
<blockquote>
<p>使用指向基类指针的函数也可以使用子类。</p>
<p><em>Functions that use pointers of references to base classes must be able to use objects of derived classes without knowing it.</em></p>
</blockquote>
<p>更简单一点讲就是子类可以替代父类。</p>
<p>根据里氏替换原则，我们可以在接受抽象类（接口）的任何地方用它的子类（实现类）来替代它们。基本上，我们应该注意在编程时不能只关注接口的输入参数，还需要保证接口实现类的返回值都是同一类型的。</p>
<p>下面这段代码就违反了里氏替换原则：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LessonRepositoryInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fetch all records.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLessonRepository</span> <span class="keyword">implements</span> <span class="title">LessonRepositoryInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// return through file system</span></span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DbLessonRepository</span> <span class="keyword">implements</span> <span class="title">LessonRepositoryInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Violates LSP because:</span></span><br><span class="line"><span class="comment">              - the return type is different</span></span><br><span class="line"><span class="comment">              - the consumer of this subclass and FileLessonRepository won't work identically</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// return Lesson::all();</span></span><br><span class="line">        <span class="comment">// to fix this</span></span><br><span class="line">        <span class="keyword">return</span> Lesson::all()-&gt;toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>译者注：这里没想到Java应该怎么实现，因此直接用了作者的代码，大家理解就好</p>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><blockquote>
<p>不能强制客户端实现它不使用的接口。</p>
<p><em>A client should not be forced to implement an interface that it doesn’t use.</em></p>
</blockquote>
<p>这个规则告诉我们，应该把接口拆的尽可能小。这样才能更好的满足客户的确切需求。</p>
<p>与单一责任原则类似，接口隔离原则也是通过将软件拆分为多个独立的部分来最大程度的减少副作用和重复代码。</p>
<p>我们来看一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WorkerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HumanWorker</span> <span class="keyword">implements</span> <span class="title">WorkerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"work"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sleep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RobotWorker</span> <span class="keyword">implements</span> <span class="title">WorkerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"work"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// No need</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面这段代码中，我们很容易发现问题所在，机器人不需要睡觉，但是由于实现了WorkerInterface接口，它不得不实现sleep方法。这就违背了接口隔离的原则，下面我们一起修复一下这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WorkAbleInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SleepAbleInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HumanWorker</span> <span class="keyword">implements</span> <span class="title">WorkAbleInterface</span>, <span class="title">SleepAbleInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"work"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sleep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RobotWorker</span> <span class="keyword">implements</span> <span class="title">WorkerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"work"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><blockquote>
<p>高层模块不应该依赖于低层的模块，它们都应该依赖于抽象。</p>
<p>抽象不应该依赖于细节，细节应该依赖于抽象。</p>
<p>High-level modules should not depend on low-level modules. Both should depend on abstractions.</p>
<p>Abstractions should not depend on details. Details should depend on abstractions.</p>
</blockquote>
<p>简单来讲就是：抽象不依赖于细节，而细节依赖于抽象。</p>
<p>通过应用依赖倒置模块，只需要修改依赖模块，其他模块就可以轻松得到修改。同时，低层模块的修改是不会影响到高层模块修改的。</p>
<p>我们来看这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MYSQL Connection"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordReminder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MySQLConnection mySQLConnection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PasswordReminder</span><span class="params">(MySQLConnection mySQLConnection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mySQLConnection = mySQLConnection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有一种常见的误解是，依赖倒置只是依赖注入的另一种表达方式，实际上两者并不相同。</p>
<p>在上面这段代码中，尽管将MySQLConnection类注入了PasswordReminder类，但它依赖于MySQLConnection。而高层模块PasswordReminder是不应该依赖于低层模块MySQLConnection的。因此这不符合依赖倒置原则。</p>
<p>如果你想要把MySQLConnection改成MongoConnection，那就要在PasswordReminder中更改硬编码的构造函数注入。</p>
<p>要想符合依赖倒置原则，PasswordReminder就要依赖于抽象类（接口）而不是细节。那么应该怎么改这段代码呢？我们一起来看一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConnectionInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLConnection</span> <span class="keyword">implements</span> <span class="title">ConnectionInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MYSQL Connection"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordReminder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConnectionInterface connection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PasswordReminder</span><span class="params">(ConnectionInterface connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connection = connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改后的代码中，如果我们想要将MySQLConnection改成MongoConnection，就不需要修改PasswordReminder类的构造函数注入，因为这里PasswordReminder类依赖于抽象而非细节。</p>
<p>感谢阅读！</p>
<h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h3><p><a href="https://medium.com/better-programming/solid-principles-simple-and-easy-explanation-f57d86c47a7f" target="_blank" rel="noopener">https://medium.com/better-programming/solid-principles-simple-and-easy-explanation-f57d86c47a7f</a></p>
<h3 id="译者点评"><a href="#译者点评" class="headerlink" title="译者点评"></a>译者点评</h3><p>作者对于SOLID原则介绍的还是比较清楚的，但是里氏原则那里我认为说得还不是很明白，举的例子似乎也不是很明确。我理解的里氏替换原则是：子类可以扩展父类的功能，但不能修改父类方法。因此里氏替换原则可以说是开闭原则的一种实现。当然，这篇文章也只是大概介绍了SOLID的每个原则，大家可以通过查资料来进行更详细的了解。我相信理解了这些设计原则之后，你对程序设计就会有更加深入的认识。后面我也会继续推送一些关于设计原则的文章，欢迎关注。</p>
]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】送给你的代码审查问题手册</title>
    <url>/2019/10/15/%E3%80%90%E8%AF%91%E3%80%91%E9%80%81%E7%BB%99%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5%E9%97%AE%E9%A2%98%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>快来领取这份代码审查问题手册！<a id="more"></a></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1569859706/Blog/Other/code_review/Code-Review-Checklist.jpg" alt="code review checklist"></p>
<p>代码审查列表，是代码审查的明确规则和指导手册，它可以使代码审查为你的团队带来更多好处，并且能够显著提升代码审查的速度。</p>
<p>研究表明，使用代码审查列表的审阅者的表现要优于不使用的审阅者。所以不管你是新手开发者还是经验丰富的开发者，开始考虑使用代码审查列表吧。</p>
<h3 id="代码作者应该关注的列表"><a href="#代码作者应该关注的列表" class="headerlink" title="代码作者应该关注的列表"></a>代码作者应该关注的列表</h3><p>作为代码的作者，你应该保证：</p>
<ul>
<li>代码编译成功并且通过静态检查（没有警告）</li>
<li>代码通过所有的测试（单元测试、集成测试和系统测试）</li>
<li>你已经仔细检查了拼写错误，并做了处理（注释、todo等）</li>
<li>概述代码修改的原因以及修改了哪些地方</li>
</ul>
<p>除此之外，作为代码作者，也应该在提交审查之前，按照审查者的列表对自己的代码进行审查。</p>
<h3 id="代码审查者应该关注的列表"><a href="#代码审查者应该关注的列表" class="headerlink" title="代码审查者应该关注的列表"></a>代码审查者应该关注的列表</h3><p>作为代码审查者，你的任务是寻找最重要的问题。评论会要对代码的结构性或逻辑性问题更有价值，即使有时候会显得挑剔。</p>
<p>你应该知道什么是<a href="[https://jackeyzhe.github.io/2019/09/22/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E6%8F%90%E5%87%BA%E5%A5%BD%E7%9A%84Code-Review%E5%8F%8D%E9%A6%88/](https://jackeyzhe.github.io/2019/09/22/[译]如何提出好的Code-Review反馈/">好的代码反馈</a>)。另外需要注意，最好的代码审查反馈不是点评，而是建议。所以不要说“变量名称应该是removeObject“，最好说”调用变量removeObject怎么样？“。</p>
<p>下面这份列表足够帮助你提出好的代码审查反馈了。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>此代码更改会执行它应该做的事情吗？</li>
<li>这种解决方法是最简单的吗？</li>
<li>这个更改有引入一些不需要的编译时或运行时的依赖吗？</li>
<li>是否使用了不应该使用的框架、API、库、服务？</li>
<li>是否存在可以提升解决方法的未使用的框架、API、库、服务？</li>
<li>代码是否处于正确的抽象级别？</li>
<li>代码是否的模块化做的是否足够好？</li>
<li>你是否有其他的解决方案，该方案在代码可维护性、可读性、性能、安全方面表现更好？</li>
<li>是否已经存在类似功能的函数？如果有，为什么不复用？</li>
<li>是否有最佳实践、设计模式或特定语言模式可以优化代码？</li>
<li>代码是否遵循面向对象的分析和设计原则，例如单一责任原则，开闭原则，里氏替换原则，接口隔离，依赖注入？</li>
</ul>
<h4 id="逻辑错误或Bug"><a href="#逻辑错误或Bug" class="headerlink" title="逻辑错误或Bug"></a>逻辑错误或Bug</h4><ul>
<li>你能想到代码不按预期运行的任何用例吗？</li>
<li>你能想到任何可能破坏代码的输入或外部事件吗？</li>
</ul>
<h4 id="错误处理和日志"><a href="#错误处理和日志" class="headerlink" title="错误处理和日志"></a>错误处理和日志</h4><ul>
<li>错误都被正确处理了吗？</li>
<li>是否有需要增加或删除的日志/debug信息？</li>
<li>错误消息对用户是否友好？</li>
<li>是否有足够的日志，它们的编写方式是否是易于调试的？</li>
</ul>
<h4 id="可用性和可访问性"><a href="#可用性和可访问性" class="headerlink" title="可用性和可访问性"></a>可用性和可访问性</h4><ul>
<li>从可用性角度出发，所提出的解决方案是否设计合理？</li>
<li>API文档是否足够好？</li>
<li>提出的解决方案是否具备可访问性？</li>
<li>API/UI是否直观易用？</li>
</ul>
<h4 id="测试与可测试性"><a href="#测试与可测试性" class="headerlink" title="测试与可测试性"></a>测试与可测试性</h4><ul>
<li>代码是否达到可测试标准？</li>
<li>是否有足够的自动化测试（单元测试/集成测试/系统测试）？</li>
<li>现有测试是否合理覆盖代码变更？</li>
<li>是否有额外的测试用例、输入或边界用例以供测试？</li>
</ul>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><ul>
<li>如果这个修改需要更新代码以外的文件，例如更新文档，配置，readme文件。是否完成了这些更新？</li>
<li>这个修改是否会对系统其他地方造成影响？是否能后向后兼容？</li>
</ul>
<h4 id="安全和隐私数据"><a href="#安全和隐私数据" class="headerlink" title="安全和隐私数据"></a>安全和隐私数据</h4><ul>
<li>这段代码是否打开软件的安全漏洞？</li>
<li>权限和身份验证是否被正确处理？</li>
<li>是否安全处理了敏感数据，例如用户数据、信用卡信息等？是否正确使用加密方法？</li>
<li>代码更改是否显露了一些私密信息（如迷药，用户名等）？</li>
<li>如果代码处理用户输入，是否解决了跨站点脚本，SQL注入等安全漏洞，是否进行了输入清洗和验证？</li>
<li>从外部API或库中获得的数据是否进行了相应的检查？</li>
</ul>
<h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><ul>
<li>这段代码修改是否会对系统性能产生负面影响？</li>
<li>是否可以进一步提升代码性能？</li>
</ul>
<h4 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h4><ul>
<li>代码是否容易理解？</li>
<li>哪一部分使你困惑，为什么？</li>
<li>可以通过减小方法来提高代码可读性吗？</li>
<li>可以通过使用不同的函数/方法或变量名称来提升代码可读性吗？</li>
<li>代码是否存放在正确的文件/目录/包？</li>
<li>你是否认为方法应该重构以拥有更直观的控制流程？</li>
<li>数据流是否可理解？</li>
<li>是否有多余的注释？</li>
<li>某些注释是否可以更好的传达信息？</li>
<li>是否更多的注释会使你的代码更容易理解？</li>
<li>是否可以移除一些注释，通过提升代码可读性来理解代码？</li>
<li>是否存在注释掉的代码？</li>
</ul>
<h4 id="专家意见"><a href="#专家意见" class="headerlink" title="专家意见"></a>专家意见</h4><ul>
<li>你是否认为特定专家（如安全专家或可用性专家）应该先检查代码，然后再提交代码？</li>
<li>这个代码修改会影响其他团队吗？他们也应该发表意见吗？</li>
</ul>
<p>好了，以上就是最为紧迫的一些问题列表。</p>
<h4 id="代码风格和约定"><a href="#代码风格和约定" class="headerlink" title="代码风格和约定"></a>代码风格和约定</h4><p>您的团队或公司必须拥有清晰的编码风格指南，这一点很重要。因为这是在代码库中实施唯一性的唯一方法。并且一致性会使代码审查更快，使人们可以轻松地更改项目，并保持您代码的可读性和可维护性。</p>
<p>Google是做到这一点的很好的例子，无疑，这使Google可以进行快速的代码审查。</p>
<p>首先，我建议使用现成的编码样式来支持Google提供的多种语言。设定基本规则很重要，但要确保一劳永逸。不要持续争论。</p>
<h4 id="尽可能自动化"><a href="#尽可能自动化" class="headerlink" title="尽可能自动化"></a>尽可能自动化</h4><p>确定了代码风格以后，请花一些时间正确安装和配置工具，以便一键格式化代码。</p>
<p>另外还有很多事情可以做。例如使用静态检查来代替部分人工审核。这是值得为之努力的。</p>
<h3 id="完整问题列表"><a href="#完整问题列表" class="headerlink" title="完整问题列表"></a>完整问题列表</h3><p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1569859715/Blog/Other/code_review/Code_Review_Checklist_Greiler.png" alt="checklist"></p>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p> <a href="https://www.michaelagreiler.com/code-review-checklist/" target="_blank" rel="noopener">https://www.michaelagreiler.com/code-review-checklist/</a> </p>
]]></content>
      <tags>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】教你用16个小时从0构建一个Rust应用</title>
    <url>/2020/02/23/%E3%80%90%E8%AF%91%E3%80%91%E6%95%99%E4%BD%A0%E7%94%A816%E4%B8%AA%E5%B0%8F%E6%97%B6%E4%BB%8E0%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AARust%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>我们在2019年的最后两天，参加了Prodigy Education举办的黑客马拉松，许多团队聚在一起努力将他们的想法变成现实。<a id="more"></a></p>
<p>我们之中有的人只是单纯为了好玩，有的是想学一些新的知识，还有些人可能是想证明一些概念或想法。</p>
<p>我在过去几周总是被动的获取Rust相关信息或使用Rust的代码，因此我认为hackathon是一次学习Rust的绝佳时机。</p>
<p>hackathon的时间紧迫性使我更加快速的去学习，同时也会去解决现实世界的一些问题。</p>
<h3 id="为什么是Rust"><a href="#为什么是Rust" class="headerlink" title="为什么是Rust"></a>为什么是Rust</h3><p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582370825/Blog/Other/learn_rust/lr-2.jpg" alt="Getting a chance to peek under the hood again"></p>
<p>在我职业生涯的前10年中，有8年都在使用C和C++。</p>
<p>从好的方面来讲，我喜欢像C++这样可以提供静态类型的语言，因为它能在编译期就能够早早的发现错误。</p>
<p>我个人对于C++的一些看法是：</p>
<ul>
<li>工程师很容易搬起石头砸自己的脚</li>
<li>作为一门编程语言，它已经非常臃肿且复杂</li>
<li>缺乏良好的、标准的广泛适用的包管理系统</li>
</ul>
<p>自从我改做Web应用以来，一直是做Python和JavaScript开发，使用像Django、Flask和Express这样的框架。</p>
<p>到目前为止，我在Python和JavaScript中的开发经验是，它们可以提供良好的程序迭代和交付速度，但有时会占用大量的CPU和内存，即使服务是相对空闲的。</p>
<p>我经常发现自己写好的C++程序，会缺失一些安全性、速度和精简性。</p>
<p>我想要寻找一种像Rust这样精简的、裸机编程语言来开发web应用。</p>
<p>没有运行时，没有垃圾回收。直接加载二进制代码，交给内核执行。</p>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>我的目标是完成一个后端由Rust编写，前端是JavaScript+React完成的类似于S3作为图床的应用程序，用户可以做以下事情：</p>
<ul>
<li>浏览图床中所有的图片（分页可选）</li>
<li>上传图片</li>
<li>上传图片时可以给图片增加标签</li>
<li>通过名称进行查询或过滤</li>
</ul>
<p>所有有趣的hackathon项目都有一个名字，所以我决定将这个项目命名为：</p>
<p>RustIC -&gt; Rust + Image Contents</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582370820/Blog/Other/learn_rust/lr3.jpg" alt="Let’s hack something great"></p>
<p>我认为如果我做到了以下这些事情，那么这次hackathon之行对我个人来说就是成功的：</p>
<ul>
<li>对Rust有一个基本的理解，包括它的类型系统和内存模型</li>
<li>探索S3的对于文件和任意标签的预签名链接功能</li>
<li>写出一个可以验证的功能正常的应用</li>
</ul>
<p>由于我的主要目标是开发功能，同时兼顾学习。很多代码是我一边学一边写的，所以代码组织和效率可能并不是最理想的，因为这些属于次要目标。</p>
<h3 id="Rust的原则"><a href="#Rust的原则" class="headerlink" title="Rust的原则"></a>Rust的原则</h3><p>在我开始之前，我带着好奇心去了解了要学习的语言的设计师在创建这门语言时内心的原则是什么。我找到了一个<a href="https://doc.rust-lang.org/1.4.0/complement-design-faq.html" target="_blank" rel="noopener">简化版本</a>和一个<a href="https://github.com/dtolnay/rust-faq" target="_blank" rel="noopener">详细版本</a>。</p>
<p>与我在许多博客上读到的内容相反，Rust是有可能发生内存泄露（循环引用）和之行不安全的操作（unsafe代码块中）的，详细描述在上面的FAQ中。</p>
<blockquote>
<p><em>“We [the language creators] do not intend [for Rust] to be 100% static, 100% safe, 100% reflective.”</em></p>
</blockquote>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582370827/Blog/Other/learn_rust/lr-4.jpg" alt="Dazzling, intricate, sophisticated"></p>
<h3 id="从后端开始"><a href="#从后端开始" class="headerlink" title="从后端开始"></a>从后端开始</h3><p>Google搜索“Rust web framework“，排在最前面的是<a href="https://rocket.rs/" target="_blank" rel="noopener">Rocket</a>。我进入这个网站，发现文档的示例都一目了然。</p>
<p>有一点需要注意的是Rocket需要Rust的nightly版本，不过在hackathon上这都是小问题。</p>
<p>GitHub的<a href="https://github.com/SergioBenitez/Rocket/tree/v0.4" target="_blank" rel="noopener">代码库</a>中有着非常丰富的例子。完美！</p>
<p>我使用<a href="https://doc.rust-lang.org/cargo/" target="_blank" rel="noopener">Cargo</a>创建了一个新的项目，在TOML文件中加入了Rocket依赖，然后跟着Rocket的<a href="https://rocket.rs/v0.4/guide/getting-started/" target="_blank" rel="noopener">入门指南</a>，写了第一段代码：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[get(<span class="meta-string">"/"</span>)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">index</span></span>() -&gt; &amp;<span class="symbol">'static</span> <span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="string">"Hello, world!"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    rocket::ignite().mount(<span class="string">"/"</span>, routes![index]).launch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于熟悉Django、Flask、Express等框架等同学来说，这段代码读起来非常容易。作为一名Rocket用户，你可以使用宏作为装饰器来将路由映射到对应的处理函数上。</p>
<p>在编译时，宏将被扩展。这对开发者是完全透明的。如果你想看扩展后的代码，可以使用<a href="https://github.com/dtolnay/cargo-expand" target="_blank" rel="noopener">cargo-expand</a>。</p>
<p>以下是我在构建Rust应用程序时的一些有趣的或者有挑战性的亮点：</p>
<h4 id="指定路由响应"><a href="#指定路由响应" class="headerlink" title="指定路由响应"></a>指定路由响应</h4><p>我想要以JSON的数据格式返回S3中所有的文件列表。</p>
<p>你可以看到路由关联的处理函数的代码决定了响应类型。</p>
<p>设置响应结构非常容易，如果你想要返回JSON格式的数据，并且每个字段都有自己的结构和类型，那对应的就是Rust的<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">所以你应该先定义一个结构体`struct(S)`来接受响应，并且需要进行标注：</span><br><span class="line"></span><br><span class="line">``` rust</span><br><span class="line">#[derive(Serialize)]</span><br></pre></td></tr></table></figure></p>
<p>struct(s)被标记了<code>#[derive(Serialize)]</code>，因此可以通过<code>rocket_contrib::json::Json将它转换成JSON</code>。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Serialize)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BucketContents</span></span> &#123;</span><br><span class="line">    data: <span class="built_in">Vec</span>&lt;S3Object&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Serialize)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S3Object</span></span> &#123;</span><br><span class="line">    file_name: <span class="built_in">String</span>,</span><br><span class="line">    presigned_url: <span class="built_in">String</span>,</span><br><span class="line">    tags: <span class="built_in">String</span>,</span><br><span class="line">    e_tag: <span class="built_in">String</span>, <span class="comment">// AWS generated MD5 checksum hash for object</span></span><br><span class="line">    is_filtered: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[get(<span class="meta-string">"/contents?&lt;filter&gt;"</span>)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">get_bucket_contents</span></span>(</span><br><span class="line">    filter: <span class="built_in">Option</span>&lt;&amp;RawStr&gt;</span><br><span class="line">) -&gt; <span class="built_in">Result</span>&lt;Json&lt;BucketContents&gt;, Custom&lt;<span class="built_in">String</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">// Returns either Ok(Json(BucketContents)) or,</span></span><br><span class="line">    <span class="comment">// a Custom error with a reason</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="处理分段上传"><a href="#处理分段上传" class="headerlink" title="处理分段上传"></a>处理分段上传</h4><p>当我意识到我的前端很有可能使用POST方法上传格式为<code>multipart/form-data</code>的表单数据时，我就开始深入研究如何使用Rocket来构建程序了。</p>
<p>不幸的是，Rocket0.4版本不支持multipart，看起来在0.5版本会支持。</p>
<p>这意味着我需要使用<a href="https://crates.io/crates/multipart" target="_blank" rel="noopener">multipart</a> crate并集成到Rocket中。最终代码可以正常运行，但是如果Rocket支持multipart将会使代码更加简洁。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[post(<span class="meta-string">"/upload"</span>, data = <span class="meta-string">"&lt;data&gt;"</span>)]</span></span><br><span class="line"><span class="comment">// signature requires the request to have a `Content-Type`. The preferred way to handle the incoming</span></span><br><span class="line"><span class="comment">// data would have been to use the FromForm trait as described here: https://rocket.rs/v0.4/guide/requests/#forms</span></span><br><span class="line"><span class="comment">// Unfortunately, file uploads are not supported through that mechanism since a file upload is performed as a</span></span><br><span class="line"><span class="comment">// multipart upload, and Rocket does not currently (As of v0.4) support this. </span></span><br><span class="line"><span class="comment">// https://github.com/SergioBenitez/Rocket/issues/106</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">upload_file</span></span>(cont_type: &amp;ContentType, data: Data) -&gt; <span class="built_in">Result</span>&lt;Custom&lt;<span class="built_in">String</span>&gt;, Custom&lt;<span class="built_in">String</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">// this and the next check can be implemented as a request guard but it seems like just</span></span><br><span class="line">    <span class="comment">// more boilerplate than necessary</span></span><br><span class="line">    <span class="keyword">if</span> !cont_type.is_form_data() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">Err</span>(Custom(</span><br><span class="line">            Status::BadRequest,</span><br><span class="line">            <span class="string">"Content-Type not multipart/form-data"</span>.into()</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (_, boundary) = cont_type.params()</span><br><span class="line">                                 .find(|&amp;(k, _)| k == <span class="string">"boundary"</span>)</span><br><span class="line">                                 .ok_or_else(</span><br><span class="line">        || Custom(</span><br><span class="line">            Status::BadRequest,</span><br><span class="line">            <span class="string">"`Content-Type: multipart/form-data` boundary param not provided"</span>.into()</span><br><span class="line">        )</span><br><span class="line">    )?;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The hot mess that ensues is some weird combination of the two links that follow</span></span><br><span class="line">    <span class="comment">// and a LOT of hackery to move data between closures.</span></span><br><span class="line">    <span class="comment">// https://github.com/SergioBenitez/Rocket/issues/106</span></span><br><span class="line">    <span class="comment">// https://github.com/abonander/multipart/blob/master/examples/rocket.rs</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> d = <span class="built_in">Vec</span>::new();</span><br><span class="line">    data.stream_to(&amp;<span class="keyword">mut</span> d).expect(<span class="string">"Unable to read"</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mp = Multipart::with_body(Cursor::new(d), boundary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> file_name = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> categories_string = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> raw_file_data = <span class="built_in">Vec</span>::new();</span><br><span class="line"></span><br><span class="line">    mp.foreach_entry(|<span class="keyword">mut</span> entry| &#123;</span><br><span class="line">        <span class="keyword">if</span> *entry.headers.name == *<span class="string">"fileName"</span> &#123; </span><br><span class="line">            <span class="keyword">let</span> file_name_vec = entry.data.fill_buf().unwrap().to_owned();</span><br><span class="line">            file_name = from_utf8(&amp;file_name_vec).unwrap().to_string()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> *entry.headers.name == *<span class="string">"tags"</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> tags_vec = entry.data.fill_buf().unwrap().to_owned();</span><br><span class="line">            categories_string = from_utf8(&amp;tags_vec).unwrap().to_string();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> *entry.headers.name == *<span class="string">"file"</span> &#123;</span><br><span class="line">            raw_file_data = entry.data.fill_buf().unwrap().to_owned()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).expect(<span class="string">"Unable to iterate"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s3_file_manager = s3_interface::S3FileManager::new(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>);</span><br><span class="line">    s3_file_manager.put_file_in_bucket(file_name.clone(), raw_file_data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tag_name_val_pairs = <span class="built_in">vec!</span>[(<span class="string">"tags"</span>.to_string(), categories_string)];</span><br><span class="line">    s3_file_manager.put_tags_on_file(file_name, tag_name_val_pairs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">Ok</span>(</span><br><span class="line">        Custom(Status::<span class="literal">Ok</span>, <span class="string">"Image Uploaded"</span>.to_string())</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置CORS"><a href="#配置CORS" class="headerlink" title="配置CORS"></a>配置CORS</h4><p>路由写好了以后，我就开始用curl或Postman来进行测试了，现在已经是时候开始把前端集成进来了。我需要适当设置响应头以避免跨域问题。</p>
<p>Rocket依旧没有支持这个特性。</p>
<p>然后我在GitHub代码库中找到了一些解决方案：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CORS Solution below comes from: https://github.com/SergioBenitez/Rocket/issues/25</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> rocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::io::Cursor;</span><br><span class="line"><span class="keyword">use</span> rocket::fairing::&#123;Fairing, Info, Kind&#125;;</span><br><span class="line"><span class="keyword">use</span> rocket::&#123;Request, Response&#125;;</span><br><span class="line"><span class="keyword">use</span> rocket::http::&#123;Header, ContentType, Method&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CORS</span></span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Fairing <span class="keyword">for</span> CORS &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">info</span></span>(&amp;<span class="keyword">self</span>) -&gt; Info &#123;</span><br><span class="line">        Info &#123;</span><br><span class="line">            name: <span class="string">"Add CORS headers to requests"</span>,</span><br><span class="line">            kind: Kind::Response</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">on_response</span></span>(&amp;<span class="keyword">self</span>, request: &amp;Request, response: &amp;<span class="keyword">mut</span> Response) &#123;</span><br><span class="line">        <span class="keyword">if</span> request.method() == Method::Options || </span><br><span class="line">           response.content_type() == <span class="literal">Some</span>(ContentType::JSON) || </span><br><span class="line">           response.content_type() == <span class="literal">Some</span>(ContentType::Plain) &#123;</span><br><span class="line"></span><br><span class="line">            response.set_header(Header::new(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://localhost:3000"</span>));</span><br><span class="line">            response.set_header(Header::new(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS"</span>));</span><br><span class="line">            response.set_header(Header::new(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type"</span>));</span><br><span class="line">            response.set_header(Header::new(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> request.method() == Method::Options &#123;</span><br><span class="line">            response.set_header(ContentType::Plain);</span><br><span class="line">            response.set_sized_body(Cursor::new(<span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    </span><br><span class="line">    rocket::ignite().attach(</span><br><span class="line">        CORS()</span><br><span class="line">    ).mount(</span><br><span class="line">        <span class="string">"/"</span>, </span><br><span class="line">        routes![get_bucket_contents, upload_file]</span><br><span class="line">    ).launch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过了一会，我发现了<a href="https://crates.io/crates/rocket_cors" target="_blank" rel="noopener">rocket_cors</a>，它帮助我大幅缩减了代码量。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; <span class="built_in">Result</span>&lt;(), Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> allowed_origins = AllowedOrigins::some_exact(&amp;[<span class="string">"http://localhost:3000"</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cors = rocket_cors::CorsOptions &#123;</span><br><span class="line">        allowed_origins,</span><br><span class="line">        allowed_methods: <span class="built_in">vec!</span>[Method::Get, Method::Post].into_iter().map(<span class="built_in">From</span>::from).collect(),</span><br><span class="line">        allowed_headers: AllowedHeaders::some(&amp;[<span class="string">"Content-Type"</span>, <span class="string">"Authorization"</span>, <span class="string">"Accept"</span>]),</span><br><span class="line">        allow_credentials: <span class="literal">true</span>,</span><br><span class="line">        ..<span class="built_in">Default</span>::default()</span><br><span class="line">    &#125;</span><br><span class="line">    .to_cors()?;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    rocket::ignite().attach(cors)</span><br><span class="line">                    .mount(<span class="string">"/"</span>, routes![get_bucket_contents, upload_file])</span><br><span class="line">                    .launch();</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="运行起来"><a href="#运行起来" class="headerlink" title="运行起来"></a>运行起来</h4><p>我们只需要一个简单的<code>cargo run</code>命令就可以让程序运行起来</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582370830/Blog/Other/learn_rust/lr-5.png" alt="output"></p>
<p>我机器上的活动监视器告诉我这个程序正在运行中，并且只消耗了2.7MB内存。</p>
<p>而且这还只是没有经过优化的调试版本。项目使用<code>- release</code>标签打包的话，运行时只需要1.6MB内存。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582370814/Blog/Other/learn_rust/lr-6.png" alt="memory"></p>
<p>基于Rust的后端服务器，我们请求<code>/contents</code>这个路由会得到如下响应：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"file_name"</span>: <span class="string">"Duck.gif"</span>,</span><br><span class="line">            <span class="attr">"presigned_url"</span>: <span class="string">"https://s3.amazonaws.com/rustic-images/Duck.gif?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIARDWJNDW3U8329UDNJ%2F20200107%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20200107T050353Z&amp;X-Amz-Expires=1800&amp;X-Amz-Signature=1369c003b2f54510882bf9982ab56d024d6c9d2655a4d86f8907313c7499b56d&amp;X-Amz-SignedHeaders=host"</span>,</span><br><span class="line">            <span class="attr">"tags"</span>: <span class="string">"animal"</span>,</span><br><span class="line">            <span class="attr">"e_tag"</span>: <span class="string">"\"93c570cadd6b8b2f85b47c2f14fd82a1\""</span>,</span><br><span class="line">            <span class="attr">"is_filtered"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"file_name"</span>: <span class="string">"GIZMO.png"</span>,</span><br><span class="line">            <span class="attr">"presigned_url"</span>: <span class="string">"https://s3.amazonaws.com/rustic-images/GIZMO.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIARDWJNDW3U8329UDNJ%2F20200107%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20200107T050353Z&amp;X-Amz-Expires=1800&amp;X-Amz-Signature=040e76c2df5a9a54ed4fbc8490378cf732b32bae78f628448536fc610018c0c3&amp;X-Amz-SignedHeaders=host"</span>,</span><br><span class="line">            <span class="attr">"tags"</span>: <span class="string">"robots"</span>,</span><br><span class="line">            <span class="attr">"e_tag"</span>: <span class="string">"\"2cde221a0c7a72c0a7a60cffce29a0bc\""</span>,</span><br><span class="line">            <span class="attr">"is_filtered"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"file_name"</span>: <span class="string">"GreenSmile.gif"</span>,</span><br><span class="line">            <span class="attr">"presigned_url"</span>: <span class="string">"https://s3.amazonaws.com/rustic-images/GreenSmile.gif?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIARDWJNDW3U8329UDNJ%2F20200107%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20200107T050354Z&amp;X-Amz-Expires=1800&amp;X-Amz-Signature=d115b107de530ce15b3590abdbab355c2a9481a81131f88bf4ad2a59ca11bbac&amp;X-Amz-SignedHeaders=host"</span>,</span><br><span class="line">            <span class="attr">"tags"</span>: <span class="string">"smile-face"</span>,</span><br><span class="line">            <span class="attr">"e_tag"</span>: <span class="string">"\"86854a599540f50bdc5e837d30ca34f9\""</span>,</span><br><span class="line">            <span class="attr">"is_filtered"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前端的工作相对简单一些，我们使用的是：</p>
<ul>
<li>React</li>
<li>React Bootstrap</li>
<li>react-grid-gallery</li>
<li>react-tags-input</li>
</ul>
<p>用户可以在我们的页面浏览图片，也可以通过文件名或标签来进行检索或过滤。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582370817/Blog/Other/learn_rust/lr-7.png" alt="images"></p>
<p>用户还可以通过拖拽来上传文件，并且可以在提交上传之前打上标签。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582370815/Blog/Other/learn_rust/lr-8.png" alt="upload"></p>
<h3 id="我喜欢使用Rust构建应用程序的原因"><a href="#我喜欢使用Rust构建应用程序的原因" class="headerlink" title="我喜欢使用Rust构建应用程序的原因"></a>我喜欢使用Rust构建应用程序的原因</h3><ul>
<li>Cargo对于依赖和应用管理的程度简直令人惊叹</li>
<li>编译器对于我们处理编译错误帮助非常大，有位博主在<a href="https://dmerej.info/blog/post/letting-the-compiler-tell-you-what-to-do/" target="_blank" rel="noopener">博客</a>中描述了他是如何按照编译器大指导来写代码的。我的经验也比较类似。</li>
<li>我需要的每一项功能都有crate，这让我感到非常惊喜</li>
</ul>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582370831/Blog/Other/learn_rust/lr-9.jpg" alt="Crates galore on crates.io! "></p>
<ul>
<li>在线的<a href="https://play.rust-lang.org/" target="_blank" rel="noopener">Rust Playground</a>，让我可以运行小的代码片段。</li>
<li>Rust语言服务器，已经很好的集成到了Visual Studio Code，它能够提供实时错误检查、格式设置、符号查找等。这让我可以在几个小时内不编译就能取得不错的进展。</li>
</ul>
<h3 id="不便、惊喜和麻烦"><a href="#不便、惊喜和麻烦" class="headerlink" title="不便、惊喜和麻烦"></a>不便、惊喜和麻烦</h3><p>尽管Rust的文档很棒，但我不得不依赖一些crates的文档和例子。有些crates有很棒的集成测试，提供了一些关于如何使用的提示。当然了，Stack Overflow和Reddit也给我提供了很多帮助。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1582370822/Blog/Other/learn_rust/lr-10.jpg" alt="“Where’s the documentation?”"></p>
<p>另外还要注意的是：</p>
<ul>
<li>理解所有权、生命周期和所有权借用会使学习难度陡增，特别是在为期两天的黑客马拉松中努力提供功能时。我将它们与C++做比较并且弄清楚，但有时还是会感到困惑。</li>
<li>在所有的事情中，<code>Strings</code>拦住了我几分钟，特别是<code>String</code>和<code>&amp;str</code>的区别更是令人困惑——直到我花了些时间来理解所有权、生命周期和所有权借用才搞清楚这些。</li>
</ul>
<h3 id="其他的一些观察"><a href="#其他的一些观察" class="headerlink" title="其他的一些观察"></a>其他的一些观察</h3><ul>
<li>Rust中没有真正意义上的null类型，通常情况下，空值需要用<code>Option</code>类型的<code>None</code>来表示</li>
<li>模式匹配非常棒，这是我在Scala中最喜欢的一个特性，在Rust中也一样。这种代码看起来表现力很强，并且允许编译器标记未处理的情况。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> bucket_contents &#123;</span><br><span class="line">    <span class="literal">Err</span>(why) =&gt; <span class="keyword">match</span> why &#123;</span><br><span class="line">        S3ObjectError::FileWithNoName =&gt; <span class="literal">Err</span>(Custom(</span><br><span class="line">            Status::InternalServerError,</span><br><span class="line">            <span class="string">"Encountered bucket objects with no name"</span>.into()</span><br><span class="line">        )),</span><br><span class="line">        S3ObjectError::MultipleTagsWithSameName =&gt; <span class="literal">Err</span>(Custom(</span><br><span class="line">            Status::InternalServerError,</span><br><span class="line">            <span class="string">"Encountered a file with a more than one tag named 'tags'"</span>.into()</span><br><span class="line">        ))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">Ok</span>(s3_objects) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> visible_s3_objects: <span class="built_in">Vec</span>&lt;S3Object&gt; = s3_objects.into_iter()</span><br><span class="line">                                                          .filter(|obj| !obj.is_hidden())</span><br><span class="line">                                                          .collect();</span><br><span class="line">        <span class="literal">Ok</span>(Json(BucketContents::new(visible_s3_objects)))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>说起安全和不安全模式，你仍然可以进行更底层的编程，比如说在不安全的模式下可以和C语言代码通过接口交互。尽管Rust中有很多正确性检查，但你仍然可以在不安全模块中做一些骚操作，例如解引用。读代码的人也可以从不安全模块中获取到很多信息。</li>
<li>通过<code>Box</code>在堆中分配内存空间，而不是<code>new</code>和<code>delete</code>。刚开始感觉比较奇怪，但是也很容易理解。标准库中还定义了其他的一些<a href="https://doc.rust-lang.org/book/ch15-00-smart-pointers.html" target="_blank" rel="noopener">智能指针</a>，如果你需要使用引用数量或者弱引用时就可以直接使用。</li>
<li>Rust中的异常也很有趣，因为它没有异常。你可以选择使用<code>Result&lt;T, E&gt;</code>表示可以恢复的错误，也可以用<code>panic!</code>宏表示不可恢复的错误。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This code:</span></span><br><span class="line"><span class="comment">// 1. Takes a vector of objects representing S3 contents</span></span><br><span class="line"><span class="comment">// 2. Uses filter to remove entries we don't care about</span></span><br><span class="line"><span class="comment">// 3. Uses map to transform each object into another type, but terminates iteration</span></span><br><span class="line"><span class="comment">// .  if the lambda passed to map returns an Err. </span></span><br><span class="line"><span class="comment">// 4. If all iterations produced an Ok(S3Object) result, these are collected into a Vec&lt;S3Object&gt;</span></span><br><span class="line"><span class="keyword">let</span> bucket_contents: <span class="built_in">Result</span>&lt;<span class="built_in">Vec</span>&lt;S3Object&gt;, S3ObjectError&gt; = bucket_list</span><br><span class="line">        .into_iter()</span><br><span class="line">        .filter(|bucket_obj| bucket_obj.size.unwrap_or(<span class="number">0</span>) != <span class="number">0</span>) <span class="comment">// Eliminate folders</span></span><br><span class="line">        .map(|bucket_obj| &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">None</span> = bucket_obj.key &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">Err</span>(S3ObjectError::FileWithNoName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> file_name = bucket_obj.key.unwrap();</span><br><span class="line">            <span class="keyword">let</span> e_tag = bucket_obj.e_tag.unwrap_or(<span class="built_in">String</span>::new());</span><br><span class="line">            <span class="keyword">let</span> tag_req_output = s3_file_manager.get_tags_on_file(file_name.clone());</span><br><span class="line">            <span class="keyword">let</span> tags_with_categories: <span class="built_in">Vec</span>&lt;Tag&gt; = tag_req_output.into_iter()</span><br><span class="line">                                                            .filter(|tag| tag.key == <span class="string">"tags"</span>)</span><br><span class="line">                                                            .collect();</span><br><span class="line">            <span class="keyword">if</span> tags_with_categories.len() &gt; <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">Err</span>(S3ObjectError::MultipleTagsWithSameName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> tag_value = <span class="keyword">if</span> tags_with_categories.len() == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="string">""</span>.to_string()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tags_with_categories[<span class="number">0</span>].value.clone()</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> presigned_url = s3_file_manager.get_presigned_url_for_file(</span><br><span class="line">                file_name.clone()</span><br><span class="line">            );</span><br><span class="line">            <span class="literal">Ok</span>(S3Object::new(</span><br><span class="line">                file_name,</span><br><span class="line">                e_tag,</span><br><span class="line">                tag_value,</span><br><span class="line">                presigned_url,</span><br><span class="line">                <span class="literal">false</span>,</span><br><span class="line">            ))</span><br><span class="line">        &#125;)</span><br><span class="line">        .collect();</span><br></pre></td></tr></table></figure>
<p>手册中是这样描述的：</p>
<blockquote>
<p>在多数情况下，Rust需要你尽可能了解错误，并且在编译之前对其做出相应的处理。这个需求使你的程序更加健壮，保证你在发布之前就可以发现并处理其中的错误。</p>
</blockquote>
<h3 id="要点和教训"><a href="#要点和教训" class="headerlink" title="要点和教训"></a>要点和教训</h3><ul>
<li>John Carmack曾经将编写Rust的经历描述为“非常有益”。我同意这种感受，这次hackathon给我的感觉就像是打开了一扇新世界的大门并且发现了很多新鲜事物，这些收获绝不仅仅是停留在代码层面的。</li>
<li>事后看来，我应该更加严谨的选择网络框架的。再多想一下的话，我可能会走出一条不同的道路。我下次可能会选择<a href="http://ironframework.io/" target="_blank" rel="noopener">iron</a>、<a href="https://actix.rs/" target="_blank" rel="noopener">actix-web</a>, 或者是 <a href="https://github.com/tiny-http/tiny-http" target="_blank" rel="noopener">tiny-http</a>。</li>
<li>我只学到了Rust的皮毛，16个小时是不可能完全成为一名Rustacean的，即使我对这门语言充满了好奇心，也做了一些深入的了解。我对Rust的未来感到兴奋，我认为它为构建应用程序带来了很多规范，它是一种表现力非常丰富的语言，并且能为我们提供与C++性能相当的运行速度和内存性能呢。</li>
</ul>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p><a href="https://github.com/sidshank/rustic-backend" target="_blank" rel="noopener">RustIC后端代码</a></p>
<p><a href="https://github.com/sidshank/rustic-frontend" target="_blank" rel="noopener">RustIC前端代码</a></p>
<p><a href="https://www.rusoto.org/" target="_blank" rel="noopener">Rusoto：一个Rust的AWS SDK</a></p>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://medium.com/better-programming/learning-to-use-rust-over-a-16-hour-hackathon-5f0ac2f604df" target="_blank" rel="noopener">https://medium.com/better-programming/learning-to-use-rust-over-a-16-hour-hackathon-5f0ac2f604df</a></p>
]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>代码检查又一利器：ArchUnit</title>
    <url>/2019/12/16/%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%8F%88%E4%B8%80%E5%88%A9%E5%99%A8%EF%BC%9AArchUnit/</url>
    <content><![CDATA[<p>Code Review总是让人又爱又恨，它可以帮助我们在提测之前发现很多代码中比较“丢人”的问题，但是，Code Review通常会比写代码更加耗费精力，因为你需要理解别人的代码，而为了这一目的，往往需要很多次的沟通。<a id="more"></a></p>
<p>人们常说“见字如面”。我认为代码也是一样，看到一个人的代码，就会对这个人有一个大概的印象。例如，当你看到一段代码写的非常随意，随意的格式、随意的命名、随意的封装，然后又没有单元测试，那我们一般会认为这段代码的作者是一个不够严谨、做事随意、有些懒惰，又对自己的代码责任心不强的人。如果你不是这样的人，那就需要花费更多的力气向同事证明自己。而如果在代码中做好每一个细节，严格遵循编码规范，单元测试覆盖率比较高，那么同事对你的第一印象一定是这个人还是比较可靠的，跟他合作应该比较愉快。</p>
<p>说了这么多，其实就是想强调Code Review的重要性。那么既然它这么重要，但又给我们带来了更大的工作量。作为程序员，我们一定会想，能不能自动化？答案当然是可以。事实上现在也有很多公司实现了自动化，例如自动进行静态代码分析来确保代码质量，利用类似<a href="https://cobertura.github.io/cobertura/" target="_blank" rel="noopener">Cobertura</a>这样的工具来检查单元测试覆盖程度等等。但是这并不能完全保证代码的整洁性和可靠性。</p>
<p>有了这些工具之后Code Review轻松了许多，但是这些工具的安装、使用也是需要花费很高的成本的。所以我想给大家介绍的是一个使用简单、方便的工具来帮我完成这些任务。在介绍之前，我们先来想一想我们平时在Review别人代码时可能会注意哪些问题。这里我简单列出来了一些：</p>
<ul>
<li>抛出的异常不能太过广泛</li>
<li><p>不能写<figure class="highlight plain"><figcaption><span>```，而是要用日志输出</span></figcaption><table><tr><td class="code"><pre><span class="line">- 不能使用```java.util.logging</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>如果使用贫血模型开发，每个类需要放到对应的包中</p>
</li>
<li>接口不能放在实现类的包中</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 合理使用第三方库</span><br><span class="line"></span><br><span class="line">这些事情以前我们都是靠人工来检查，直到我发现了[ArchUnit]( https://www.archunit.org/ )这个库。感觉像是抓住了自动化道路上的救命稻草。</span><br><span class="line"></span><br><span class="line">### 什么是ArchUnit？</span><br><span class="line"></span><br><span class="line">ArchUnit的官方网站是 [https://www.archunit.org](https://www.archunit.org/) </span><br><span class="line"></span><br><span class="line">官网中原话介绍是</span><br><span class="line"></span><br><span class="line">&gt;  ArchUnit is a free, simple and extensible library for checking the architecture of your Java code using any plain Java unit test framework.</span><br><span class="line"></span><br><span class="line">意思是ArchUnit是一款免费、简单可扩展的库，它可以使用任何Java单元测试框架来检查Java代码的架构。</span><br><span class="line"></span><br><span class="line">也就是说，它的主要功能是用来检查代码结构的。那么怎么使用呢？</span><br><span class="line"></span><br><span class="line">### 如何使用？</span><br><span class="line"></span><br><span class="line">ArchUnit的简单绝对不是空谈，如果你是maven项目，只需要在pom.xml文件中添加如下依赖：</span><br><span class="line"></span><br><span class="line">``` xml</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.tngtech.archunit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;archunit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.12.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>如果你是Gradle项目，使用起来同样非常简单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testCompile &apos;com.tngtech.archunit:archunit:0.8.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当你添加了依赖以后，就可以为我们前面提到的规则写测试用例了。</p>
<p>当然，也有一些内建的通用规则，它们定义在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.tngtech.archunit.library.GeneralCodingRules</span><br></pre></td></tr></table></figure>
<p>这个类中。关于内建规则的细节，可以查看<a href="https://www.archunit.org/userguide/html/000_Index.html#_general_coding_rules" target="_blank" rel="noopener">官方文档</a>。</p>
<h3 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h3><p>除了内建规则以外，ArchUnit也支持你定义自己需要的规则，至于如何定义规则，文档中都有详细的介绍。当然，也可以参考这个例子来写一些规则。 <a href="https://github.com/TNG/ArchUnit-Examples" target="_blank" rel="noopener">https://github.com/TNG/ArchUnit-Examples</a></p>
<h3 id="如何执行"><a href="#如何执行" class="headerlink" title="如何执行"></a>如何执行</h3><p>规则定义好以后如何执行呢？我们说ArchUnit使用起来非常简单，如果需要测试，对maven项目来说只需要执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>而对于Gradle项目来说，只要执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gradle <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ArchUnit看起来是一个很酷的三方库，我并没有在使用层面做过多介绍，因为我也在摸索中，感兴趣的朋友可以和我一起交流。</p>
]]></content>
      <tags>
        <tag>整洁</tag>
      </tags>
  </entry>
  <entry>
    <title>代码洁癖系列（一）：什么是整洁代码</title>
    <url>/2018/08/26/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B4%E6%B4%81%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>作为一个代码洁癖患者，我最大的愿望就是世界和平……对不起，拿错剧本了，最大的愿望就是将对代码的洁癖传播给每一个人，净化所有的代码。这是一个宏大的愿望，但我会一直努力净化我所看到的每一行代码，并且希望能影响更多的人，让大家都写出整洁的代码。<a id="more"></a></p>
<p>在阅读本文之前，想先提两个问题：</p>
<ol>
<li>你是程序员吗</li>
<li>你想成为更好的程序员吗</li>
</ol>
<p>如果上面两个回答都是肯定的，那请你继续读下去，否则就可以直接关闭网页了。</p>
<h4 id="什么是整洁代码"><a href="#什么是整洁代码" class="headerlink" title="什么是整洁代码"></a>什么是整洁代码</h4><p>相信有过一定工作经验的程序员都读过别人的代码，也一定看到过槽糕的代码，看到那些糟糕的代码时你是不是在想：这写的什么垃圾东西，读懂这段代码所花费的时间我都能把这个功能再实现一遍了。还有另一种情况：引用别人的代码时，为了能按时完成，不得不去适应别人的代码风格，跟着制造混乱。当混乱越来越多时，整个团队的生产力也越来越低，直到最后不得不把所有代码重新整理一遍，而这个工作里可想而知。</p>
<p>上面说的都是糟糕的代码所带来的影响。那么什么是整洁的代码呢？在我看来可以从两个方面定义整洁代码：</p>
<ol>
<li><p>外在美</p>
<p>外观看起来优雅美观的代码会使人心情愉悦。其中主要体现在：代码所在的位置是否恰当，代码里是否有适当的注释，适当的缩进和空行以及没有重复代码等等。</p>
</li>
<li><p>内在美</p>
<p>外在美只是“看起来”使人心情愉悦，如果缺乏内在美，那么当别人真正开始读的时候，刚才愉悦的心情会在一瞬间烟消云散。而内在美则体现在：尽量少的API，代码之间的尽量少的依赖，干净利落的抽象和直截了当的控制语句等。</p>
</li>
</ol>
<p>在理解了什么是整洁代码后，希望我们在写每一行代码之前都要思考一下，这行代码是否足够整洁，是否让人看了心情愉悦。</p>
<p>之后的一段时间，我也将会从以下几个方面和大家分享，如何写出整洁的代码。</p>
<h4 id="有意义的命名"><a href="#有意义的命名" class="headerlink" title="有意义的命名"></a>有意义的命名</h4><p>什么是无意义的命名？如果代码中所有的变量名，函数名都是abcd之类的，相信你在看到这样一段代码的第一眼就已经失去了读下去的欲望了。也许有人觉得这太极端了，认为不会有人这样写代码。那么我们在考虑一下，我为一个变量命名为name，那么在没有前后语境的情况下，你能想象出这个变量是用来做什么的吗？是一个人的name还是一个物品的name，是firstName还是lastName？所以，有意义的命名对代码阅读是非常重要的。</p>
<h4 id="如何定义类和函数"><a href="#如何定义类和函数" class="headerlink" title="如何定义类和函数"></a>如何定义类和函数</h4><p>如何定义相信大家都会，毕竟这是最基本的操作，那么怎么才能算是整洁的类和函数呢？</p>
<h4 id="要不要写注释"><a href="#要不要写注释" class="headerlink" title="要不要写注释"></a>要不要写注释</h4><p>大多数程序员都觉得写注释（文档）很麻烦，觉得自己的工作就是实现功能，自己写的代码自己能看懂就行。事实上真的是这样吗，他们真的能看懂自己三个月前写的代码吗？</p>
<p>另一种程序员知道要写注释，但是他们写的注释都是诸如：“这是一个方法”、“这是一个循环”……这样的注释写出来真的有意义吗？</p>
<h4 id="如何排版"><a href="#如何排版" class="headerlink" title="如何排版"></a>如何排版</h4><p>这个属于外在美，第一印象很重要，第一眼看上去很好，才会继续看下去不是吗。</p>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>代码运行时的错误如何处理吗？全部抛出去，交个用户处理？全部catch住，隐藏起来不处理？这两种程序员相信都会被老板当成错误处理掉吧。</p>
<h4 id="合格的单元测试"><a href="#合格的单元测试" class="headerlink" title="合格的单元测试"></a>合格的单元测试</h4><p>什么样的单元测试才算合格，单元测试对代码的覆盖率要达到多少？</p>
<h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>胖子从来都不是一口吃成的，怎么才能让你的代码越来越饱满，系统越来越稳定呢？唯有不断迭代。</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>上面这些问题，我将在后面的文章中挨个解读。希望你读完之后，也能化身为整洁代码的守护者。</p>
]]></content>
      <tags>
        <tag>整洁</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】如何提出好的Code Review反馈</title>
    <url>/2019/09/22/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E6%8F%90%E5%87%BA%E5%A5%BD%E7%9A%84Code-Review%E5%8F%8D%E9%A6%88/</url>
    <content><![CDATA[<p>没错，Code Review系列还在继续，今天我们一起来聊一聊如何提出好的Code Review反馈。<a id="more"></a></p>
<p>Code Review是保证代码的质量和可维护性，以及向团队成员分享知识的重要手段。但是，随着团队产出代码质量的提升，Code Review所带来的价值反而会下降。本文我将向你说明如何提出好的Code Review反馈。这一调研结果是来自于对微软数百人的高效工程师的访问。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1569258203/Blog/Other/code_review/great-code-review-feedback.jpg" alt="Great Code Review Feedback"></p>
<h3 id="代码审查检查的是关于代码的问题和质量"><a href="#代码审查检查的是关于代码的问题和质量" class="headerlink" title="代码审查检查的是关于代码的问题和质量"></a>代码审查检查的是关于代码的问题和质量</h3><p>在一次代码审查过程中，由一名工程师做出的修改将由其他工程师来进行检查和讨论。代码审查的主要目标是查出代码的问题，保证代码的质量。即使Code Review还带来了一些其他的像传播和学习知识这样的好处，但我们仍要谨记这两个最重要的目标。</p>
<p>有些团队担心的，有些团队已经遇到了代码审查的主要缺点：降低编码速度。这意味着团队的生产效率被代码审查拖慢了。</p>
<p>为什么会这样呢？</p>
<p><a href="https://jackeyzhe.github.io/2019/09/12/%E3%80%90%E8%AF%91%E3%80%91%E5%88%AB%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%9B%A2%E9%98%9F%E6%8E%89%E5%85%A5Code-Review%E7%9A%84%E5%9D%91/">前文我们已经有过介绍</a>，降低团队效率的原因可能有很多，但通常是反馈的等待时间长和响应慢有关。如果再加上毫无意义的反馈交流，那么代码审查对于所有开发者都将是噩梦般的存在。但团队可以轻松规避这些问题。</p>
<p>本文我主要向你介绍的是如何提出有价值的反馈。</p>
<h3 id="微软的代码审查研究"><a href="#微软的代码审查研究" class="headerlink" title="微软的代码审查研究"></a>微软的代码审查研究</h3><p>在微软，我进行了<a href="https://www.michaelagreiler.com/publications/" target="_blank" rel="noopener">一项研究</a>来了解代码审查。在这其中一项，我们分析了超过200万条代码审阅批注，以了解哪些反馈是有价值的，哪些是在浪费时间。但我们要先从代码审查应该看什么来介绍。</p>
<h3 id="代码审查时应该看些什么"><a href="#代码审查时应该看些什么" class="headerlink" title="代码审查时应该看些什么"></a>代码审查时应该看些什么</h3><p>我们假设你被要求来审查一些代码。代码的作者发给你了几个代码文件，并对代码修改的目的做了简单的描述。那么现在你要开始审查代码了，你应该关注什么？</p>
<ul>
<li>功能缺陷</li>
<li>逻辑问题</li>
<li>缺少验证（例如边界问题）</li>
<li>API的用法</li>
<li>设计模式</li>
<li>架构问题</li>
<li>可测性</li>
<li>可读性</li>
<li>安全问题</li>
<li>命名约定</li>
<li>团队编码规范</li>
<li>文档</li>
<li>使用最佳做法</li>
<li>特定语言的问题</li>
<li>使用过期方法的问题</li>
<li>性能（比如复杂度）</li>
<li>替代解决方案</li>
</ul>
<p>真多啊！为了系统的查找这些问题，最好使用代码审查清单，它可以帮助你快速检查这些问题，并确保不会遗漏。我会写一份完整的，更加详细的代码审查清单，记得订阅我，方便第一时间获取。</p>
<p>现在，你看了所有的问题，你一定会问自己：哪些是最有价值的问题？</p>
<h3 id="哪个反馈是最有价值的"><a href="#哪个反馈是最有价值的" class="headerlink" title="哪个反馈是最有价值的"></a>哪个反馈是最有价值的</h3><p>让我们来再次想象一下实际工作中你是如何开始一次代码审查的。</p>
<p>也许你打开审查之后，会先浏览所有文件，然后调整自己。哪里发生了变化？代码的哪部分受到影响？修改的中心在哪？</p>
<p>当你已经熟悉了这些修改以后，你就会注意一些问题了：注释和变量中的错别字，缺少注释，缩进等代码风格相关的问题，即使这些是要寻找的问题，也不要陷入这些问题中。实际上，这些问题是有价值的，但并不是我们最主要的目标。</p>
<p>那么，还要看哪些问题呢？</p>
<h3 id="有关缺陷、验证缺失和最佳实践的反馈是最有价值的"><a href="#有关缺陷、验证缺失和最佳实践的反馈是最有价值的" class="headerlink" title="有关缺陷、验证缺失和最佳实践的反馈是最有价值的"></a>有关缺陷、验证缺失和最佳实践的反馈是最有价值的</h3><p>最有价值的代码审查反馈都是关于代码中实际问题的。所有开发人员都将这种反馈视为最有用的类型。但我们发现，在研究中这种问题只占全部反馈的很小一部分。下图中，你可以看到代码审查过程中开发人员都在讨论哪些问题，以及对于作者而言他们认为哪些是有价值的。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1569508456/Blog/Other/code_review/code-review-feedback.jpg" alt="Types of code review feedback and its usefulness"></p>
<p>最有价值的代码审查批注解决了以下问题：</p>
<ul>
<li><strong>功能缺陷</strong>。这看起来是轻而易举的，评分最高的代码审查反馈是发现系统中的功能缺陷。但代码审查并不是发现功能缺陷的主要手段，事实上只有一小部分批注是关于功能缺陷的。但是，如果找到一个，那么代码审查带来的收益就是巨大的。</li>
<li><strong>验证缺失和极端案例</strong>。开发人员认为显示了被遗忘的方案、未涵盖的逻辑问题或极端情况的代码审查反馈是非常有价值的。这种反馈围绕寻找当前方案可能失败的情况和备用方案来展开。</li>
<li><strong>最佳实践和代码约定</strong>。代码审查对于维护一致的、可维护和可理解的代码库非常有用。所以，那些指出代码中包含不符合代码规范和最佳实践的反馈是很有价值的。</li>
<li><strong>API使用和设计模式</strong>。其他的有价值的反馈主要是关注API或第三方库使用是否正确，或者是缺少或错误的使用了设计模式。</li>
</ul>
<h3 id="代码审查反馈是一把双刃剑"><a href="#代码审查反馈是一把双刃剑" class="headerlink" title="代码审查反馈是一把双刃剑"></a>代码审查反馈是一把双刃剑</h3><p>我们讨论的一些问题并不像功能缺陷那样更容易显示价值。这些问题可能很有价值，但也有可能是在浪费所有人的时间。可能你已经猜到了，我们在讨论的是代码风格、代码规范和注释。这类问题通常被称为“挑剔问题”。</p>
<p><strong>文档、编码风格和编码规范</strong>。处理丢失或过时的文档，突出注释中的错别字，或指出不好的命名是你经常收到的代码审查反馈。但它们真的有价值吗？</p>
<p>有时代码审查者并不能马上看到反馈的价值。但是找出错别字也不是大的问题不是吗？这些批准真正的价值是随着时间流逝而带来的复合效应。快速解决此类问题可以保证代码库一直保持可维护性和可理解性。</p>
<p>尽管如此，它们还是会被看作是“挑剔”的行为，并且这个词已经具有负面含义了。所以团队必须保证所有人都能理解这类反馈的价值所在。</p>
<p>另一方面，避免对代码缩进和代码风格进行冗长而重复的讨论是非常重要的。这无疑会拖慢团队的生产效率。为了让团队保持生产力，让我们先制定一种代码风格，然后继续前进！</p>
<h3 id="超出代码审查范围的反馈是无用的"><a href="#超出代码审查范围的反馈是无用的" class="headerlink" title="超出代码审查范围的反馈是无用的"></a>超出代码审查范围的反馈是无用的</h3><p>多数被认为是有价值的反馈都是关注当前范围代码审查。但是，代码审查的范围并不是代码更改文件中可见的代码，也不会超出代码修改的目的。因此，提出实施范围之外的问题对于大多数开发人员来说是无用的。</p>
<ul>
<li><em>替代解决方案</em>。即使替代解决方案被认为是有价值的，但是对当前代码没有明显价值的实现并不能帮助你的团队提升生产效率。</li>
<li><em>现有技术债务和重构</em>。类似的，开始突显的旧的技术债务和潜在的重构机会超出了常规的代码审查范围。这些问题应该单独讨论。</li>
<li><em>计划和未来的工作</em>。另一个没有用的反馈类型就是批注过于关注未来的工作或者不在当前开发周期的工作。如果你看到这些问题，用backlogs或issue tracker这样的工具记录下来，这样做对你的团队是有价值的。之后，在合适的时间可以拿出来讨论。</li>
<li><em>提出问题只是为了了解实现</em>。即使代码审查是一种学习和分享知识的工具，但提出了解实现的问题并不是代码审查的目的。别忘了，代码审查是作者为了获得同意以便继续工作。</li>
</ul>
<h3 id="如果你不理解代码时应该做什么？"><a href="#如果你不理解代码时应该做什么？" class="headerlink" title="如果你不理解代码时应该做什么？"></a>如果你不理解代码时应该做什么？</h3><p>当你不理解代码时应该做什么呢？你怎么才能提出有价值的反馈？</p>
<p>这是一个好问题，实际上，研究和经验告诉我们，如果你不理解代码，你无法提供有价值的反馈，至少能提供的不多。</p>
<p>如果是这种情况，你最好先了解一些潜在问题。你为什么不能理解代码？因为你是团队的新成员？因为你缺乏经验？你以前没有使用过代码库？新编写的代码一团糟？</p>
<p>如果是最后一个原因，那么你所有的问题都是有效的，应该作为代码审查的一部分。但是可能你添加的不仅仅是问题，也许会加一些关于如何改进代码，为什么难以理解代码的反馈等等。</p>
<h3 id="如果你对代码不熟悉怎么办？"><a href="#如果你对代码不熟悉怎么办？" class="headerlink" title="如果你对代码不熟悉怎么办？"></a>如果你对代码不熟悉怎么办？</h3><p>如果你之前在工作中没有接触过代码库，你可能很难理解代码审查中的内容。一个好的方法是求助同事，请他/她为你解释一遍代码。这里重要的是不要在代码审查过程中随机询问有关代码库的问题。</p>
<p>没错，学习和传播知识是代码审查的两个重要的好处。不过，这些都是代码审查的附加价值，真正的关注点应该在于检查代码是否正确以及是否高质量。</p>
<p>除非明确告诉你通过这种方式来教你。否则你应该正常做代码审查，这比你只观察别人怎么做要好。慢慢的，你就能更好的理解代码，了解团队惯例和最佳实践，以及向代码审查添加有用的反馈。</p>
<h3 id="缺乏经验的开发人员提出有价值的反馈较少"><a href="#缺乏经验的开发人员提出有价值的反馈较少" class="headerlink" title="缺乏经验的开发人员提出有价值的反馈较少"></a>缺乏经验的开发人员提出有价值的反馈较少</h3><p>不只是你，也不是初级开发者的错。这只是一个事实。我们的研究表明经验丰富的开发人员更能提出有价值的反馈。刚开始在组织内部工作的经验较少的开发人员，在前三个月很少能提出有价值的反馈。之后我们可以看到他们提出反馈的价值在一年内如何增加和稳定。</p>
<h3 id="为了提出有价值的反馈，你必须熟悉代码"><a href="#为了提出有价值的反馈，你必须熟悉代码" class="headerlink" title="为了提出有价值的反馈，你必须熟悉代码"></a>为了提出有价值的反馈，你必须熟悉代码</h3><p>多项代码审查研究表明，有价值的反馈多数来自于曾经参与开发或审查对应代码的开发人员。好消息是，只要之前改过一次就足够了。也就是说在我们的研究中，一次修改代码的开发人员和修改了上百次代码的开发人员在审核时没有显著的区别。如下图所示。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1569515512/Blog/Other/code_review/useful-feedback-density.jpg" alt="Density of useful feedback vs. number of times a reviewer reviewed the file before"></p>
<h3 id="领域专家可以提高你的代码审查价值"><a href="#领域专家可以提高你的代码审查价值" class="headerlink" title="领域专家可以提高你的代码审查价值"></a>领域专家可以提高你的代码审查价值</h3><p>来自其他团队或者是跨团队的领域专家作为审阅者会对你的代码审查更有价值。你可以选择增加安全专家、大数据专家或可用性专家，即使他们并不像你的团队那样熟悉你们的代码。</p>
<p>这样做的好处是给代码审查带来了特别的经验和外部的视角。他们进行代码审查的目的也不同。他们可能不会去寻找最佳实践和团队规范，而是检查代码中你需要他们检查的真正存在的问题。</p>
<h3 id="像对待自己一样对待别人"><a href="#像对待自己一样对待别人" class="headerlink" title="像对待自己一样对待别人"></a>像对待自己一样对待别人</h3><p>代码审查是很社会化的活动，在致力于积极打造反馈文化的团队中，它被高度赞赏和高价值的工程实践。不幸的是，并不是任何地方都是这样。在一些团队中，代码审查被滥用为权利展示甚至权利争斗的工具。这样的代码审查没有任何帮助。</p>
<p>如果你想要从代码审查中受益，了解如何提出建设性反馈是非常明智的选择。指出一些代码的质量不够高。如果你批判同事的代码，请务必始终以尊重的方式进行，并一直提出改进建议。</p>
<p>另一方面，也不需要在代码审查过程中加入过多的赞美之词。在微软的代码审查研究中我们发现，作者不太在意对他们代码的称赞。</p>
<p>为什么会这样？我们要再次提到代码审查的目标。通常每个批注都是一个小的工作项。即使是赞美，有太多也不会增加价值。它只会加剧处理批注的工作量。</p>
<p>指出良好的工作对于团队合作精神是必不可少的，并且是一个很好的团队合作的动力。但是这最好是在其他场合提出，比如会议上或者是咖啡时间。</p>
<h3 id="外部情况影响反馈的价值"><a href="#外部情况影响反馈的价值" class="headerlink" title="外部情况影响反馈的价值"></a>外部情况影响反馈的价值</h3><p>还有几件事会影响你在代码审查过程中获得的价值。在研究中我们发现开发人员很难查看非代码的文件，比如配置文件或者编译文件。换句话说，开发人员会针对源码提供更有价值的反馈。</p>
<p>影响代码反馈质量的另一个因素是审查文件的数量。需要审查的文件数越多，你收到反馈的质量就越低。保持审核的小巧有很多好处，并且是最有价值的代码审查最佳实践之一。</p>
<p>总而言之，有价值的反馈是针对代码审查目标的反馈：检查当前代码更改是否正确以及是否高质量。不利于实现此目标的讨论应该在代码审查过程之外讨论。因为好的代码审查反馈也是及时提出的反馈，它会帮助作者更快通过审核。</p>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://www.michaelagreiler.com/great-code-review-feedback/" target="_blank" rel="noopener">https://www.michaelagreiler.com/great-code-review-feedback/</a></p>
]]></content>
      <tags>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>代码洁癖系列（三）：整洁的类和函数</title>
    <url>/2018/08/29/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%95%B4%E6%B4%81%E7%9A%84%E7%B1%BB%E5%92%8C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>前面我们讨论了什么样的命名更能够让你赏心悦目，今天来讨论一下面向对象编程过程中最重要的环节，编写类和函数。我们仍然用Java来演示，什么样的类和函数才算是整洁的。<a id="more"></a></p>
<p>首先讨论函数，函数定义好了，类也就容易了。</p>
<h4 id="短小"><a href="#短小" class="headerlink" title="短小"></a>短小</h4><p>相信大家在读代码的时候都会遇到过冗长的函数定义。没有的话可以私信我，我把原来写过的一段300+行的函数发给你，不过不要问我这个函数是做什么的，因为我也忘了，而且不想回顾。当然如果你足够耐心研究出来了，请教教我。</p>
<p>言归正传，为什么函数要短小呢，如何才能是自己的函数更加短小？第一个问题我也无法证明，只能告诉你短小的函数看起来更加清晰，更加容易理解。那怎么才能让函数变得更加短小呢？很简单，抽离方法。将一些代码抽离成另一个函数。什么样的长度才是合适的呢？我认为不必过于追求短。这里的长度我们可以以代码块的层来定义，对于下面这种代码相信任何人看了都会崩溃吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>() &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">while</span>() &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">if</span>() &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以每个函数中有一层或两层为最佳，每层代码块最好不超过3行。这是我认为最佳的函数长度，当然，这个也可以根据个人习惯稍作调整。</p>
<h4 id="只做一件事"><a href="#只做一件事" class="headerlink" title="只做一件事"></a>只做一件事</h4><p>如果说长度还可以根据个人习惯，那么“只做一件事”的要求应该是大家都应该遵守的公约了。如果一个函数中做了太多的事，那么代码阅读起来的难度将会成倍增加，而且文档书写难度同样增大。还有就是给其他代码调用造成不便。比如我定义了函数A做了1和2两件事，函数B想做2和3，怎么办？这时B只能再写一遍A中做2的代码。而这样就会有大量重复代码出现，不但增加工作量，对日后的维护工作也造成很大的负担。而把1和2分别定义为函数C和函数D的话，只需要在AB中分别调用就可以了。</p>
<h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p>这里不多解释，函数的命名需要具有描述意义，函数越短也就越容易描述。</p>
<h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><p>参数数量越少越好（这个我目前也没有做到），究其原因，首先是读代码时每次都要搞清楚每个参数的意义，所以自然越少越好。另一方面就是为测试的同事提供方便，如果有多个函数，测试的同学就需要考虑更多的测试用例对其进行覆盖。如果一个函数有3个以上的参数，那测试的同学可能想要打人了。</p>
<h4 id="使用异常代替返回错误码"><a href="#使用异常代替返回错误码" class="headerlink" title="使用异常代替返回错误码"></a>使用异常代替返回错误码</h4><p>这样就可以将Try/catch代码块抽离出来，因为Try/catch代码块影响了正常程序的流程，看起来很丑陋。</p>
<p>函数的主要规则就是这些，那么如何才能写出这样的函数呢？其实没有什么特别的技巧，就是记住这些规则，在每次写完代码之后再斟酌一番，对代码进行反复的打磨，修改不合适的命名，抽离冗长的函数。久而久之，你的代码一定会被人称赞的。</p>
<p>说完函数再来说一下如何写好一个类。</p>
<h4 id="还是短小"><a href="#还是短小" class="headerlink" title="还是短小"></a>还是短小</h4><p>没错，类也应该短小，不过这里短小的定义和函数短小的定义稍有不同，我们通常以“权责”来衡量。先看下面这个类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperDashboard</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">MetaDataUser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getLastFocusedComponent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastFocused</span><span class="params">(Component lastFocused)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMajorVersionNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinorVersionNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBuildNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这个类只提供了5个方法，应该不算长，但是我要说，它仍然不满足我们“短小”的条件，原因就是违反了单一权责原则。单一权责指的是一个类只描述一类事。上面这个类有对最后焦点组件的读写方法，还有获取版本号和序列号的方法。只要我们描述一个类时，用到了类似于“还有”这样的字眼时，那么这个类就违反了单一权责原则，就需要对其中的方法进行抽离。</p>
<h4 id="为了修改而组织"><a href="#为了修改而组织" class="headerlink" title="为了修改而组织"></a>为了修改而组织</h4><p>大多数系统都会进行持续的迭代，而这也意味着我们需要不断对代码进行修改。而修改代码往往伴随着风险。所以，我们需要做的就是，修改一个方法时，不对其他方法造成影响。当我们开始修改时，就要评估好影响，然后将方法进行抽象，拆分。力求做到每次修改都不影响其他类（即降低耦合）。</p>
<p>对于写好一个类，总结来说就是“高内聚，低耦合”。</p>
]]></content>
      <tags>
        <tag>整洁</tag>
      </tags>
  </entry>
  <entry>
    <title>代码洁癖系列（二）：命名的艺术</title>
    <url>/2018/08/27/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BD%E5%90%8D%E7%9A%84%E8%89%BA%E6%9C%AF/</url>
    <content><![CDATA[<p>不知道大家还记不记得《家有儿女》里有这么一段经典台词：“我叫夏雪”，“我叫夏雨”，“我叫夏冰雹”。</p>
<a id="more"></a>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535382734/Blog/clean/%E4%B8%8B%E5%86%B0%E9%9B%B9.png" alt="xiabingbao"></p>
<p>刘星自己给自己起的名字承包了我所有笑点。但仔细想想这名字取的竟然还挺不错，不但有意义，还和夏雨夏雪的名字相呼应。</p>
<p>回到主题，在我们的代码里，命名是随处可见的，比如给包命名，给类命名，方法名，参数名，变量名等等。那么什么样的命名才算是好的命名呢。这就是我们今天要讨论的。</p>
<h4 id="名副其实"><a href="#名副其实" class="headerlink" title="名副其实"></a>名副其实</h4><p>首先还是要强调这一点，我读过的糟糕的代码有一个共同的特点，那就是代码中存在大量随意的，无意义的命名。比如：表示消耗多少小时的变量命名为h，同作用域中还有一个想要表示“小时”相关的变量直接命名为h1，一个List类型的变量就命名为list。读这种代码不会令人开心，同时写这种代码的程序员的人身安全是无法保证的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getThem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        <span class="keyword">if</span> (theMap.get(key) == <span class="number">1</span>) &#123;</span><br><span class="line">            list.add(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>读一下上面这段代码，能看出有什么问题吗？或者说看完有人明白这段代码要做什么吗？</p>
<p>我先来说一下我的问题：</p>
<ol>
<li>getThem是get什么？</li>
<li>list里存的是什么</li>
<li>keys指的是什么，为什么遍历它</li>
<li>常量”1“的意义是什么</li>
</ol>
<p>这几个问题可能只有写这段代码的人才能解释（没错，就是我写的）。所以我来给大家解释一下，不过我不想一一回答上面的问题，我把代码重写一遍，看看还会不会有这样的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getPaidOrderIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; paidOrderIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String orderId : orderIds) &#123;</span><br><span class="line">        <span class="keyword">if</span> (orderStatus.get(orderId) == OrderConstatn.PAID) &#123;</span><br><span class="line">            paidOrderIds.add(orderId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paidOrderIds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>怎么样，上面的问题都清楚了吗，如果不清楚可以私下和我联系，我会给你推荐一个非常好的英语学习软件。</p>
<p>这就是名副其实的重要性。</p>
<h4 id="避免误导"><a href="#避免误导" class="headerlink" title="避免误导"></a>避免误导</h4><p>命名过程中要注意的第二点就是要避免名称对别人产生误导，例如上面代码中paidOrderIds这个变量，如果我们命名成paidOrderIdList呢，看起来似乎没什么问题，但是如果这个变量是Set类型或者其他类型呢？命名为xxxList还合适吗，别人读代码的时候会下意识的认为这是个List类型的变量（尽量避免名称中出现类型的名字）。</p>
<p>另一点容易产生误导的是数字和字母相像的情况，比如，我命名一个变量叫做O1，在编辑器里就很难分辨是O1还是01，如果我写一个这样的表达式 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">O0 = l1;</span><br></pre></td></tr></table></figure>
<p>估计别人会以为我发明了什么新的语言吧。</p>
<p>第三点是要避免区别较小的两个名称，比如XYZContinentController和XYZCentinentController这样的命名，对于读代码的人来说简直就是灾难，对于写代码的人来说也存在很大的风险。（为什么不是灾难？因为大部分人都是Ctrl+C/Ctrl+V的，这样就减小一些出错的几率。看来善用Ctrl+C/Ctrl+V还是很有必要的）</p>
<h4 id="做有意义的区分"><a href="#做有意义的区分" class="headerlink" title="做有意义的区分"></a>做有意义的区分</h4><p>编译器要求我们在同一个区域内不能重复命名。那么有的程序员就会写出a1,a2,a3……这样的命名，这看起来很烂，谁也不知道它们有什么区别。再举过来一个栗子，一个包中有两个类，Product和ProductInfo，这时让你查一下商品名称，你知道要去哪个类里找吗？事实证明，这样的命名与a1,a2,a3之流别无二致。</p>
<p>既然要做区分，为什么不做些有意义的区分呢，一个类叫做Product，表示商品信息，另一个叫做ProductStocks表示商品的库存信息。这样是不是更清晰一点呢，当然，我这里只是举个栗子，实际上可能不需要这样定义。</p>
<h4 id="别随意使用简写"><a href="#别随意使用简写" class="headerlink" title="别随意使用简写"></a>别随意使用简写</h4><p>不要随意使用简写，除非是大家都知道的简写。比如美国的命名写成US，大家都可以理解，而如果generateCode写成genCode就令人费解了。</p>
<h4 id="使用可以被搜索的名称"><a href="#使用可以被搜索的名称" class="headerlink" title="使用可以被搜索的名称"></a>使用可以被搜索的名称</h4><p>像我们在一开始的那段代码，为什么要把常量“1”写成OrderConstatn.PAID，不仅是为了可读，也是为了可搜索，试想，如果你要找这段代码，去搜索数字1，会有多少结果？搜索PAID呢？亲自试过之后相信你会回来点赞的。</p>
<h4 id="类名和方法名"><a href="#类名和方法名" class="headerlink" title="类名和方法名"></a>类名和方法名</h4><p>类名和方法名也要遵循上面的规范，除此之外，它们还有各自的规范：</p>
<ul>
<li>类名不应该是动词，避免使用Data、Info这样的词汇。</li>
<li>方法名应该是动词，比如，saveXXX、deleteXXX</li>
</ul>
<h4 id="要专一"><a href="#要专一" class="headerlink" title="要专一"></a>要专一</h4><p>假如你在不同的类中，分别定义了方法getXXX、fetchXXX和findXXX，我要调用的时候怎么知道某个类中应该使用哪种方法？所以，为什么不都用getXXX的形式呢？这样无论是对写代码的人还是对调用的人来说都是莫大的喜讯。</p>
<h4 id="适当添加语境"><a href="#适当添加语境" class="headerlink" title="适当添加语境"></a>适当添加语境</h4><p>当你一些变量：firstName、lastName、street、houseNumber、city、state、zipcode。我们可以很轻易的判断出，他们组合在一起表示一个地址。那么把state单独拿出来呢？你还能知道它是什么意思吗？这时，我们可以把变量命名为addrState、addrFirstName……这样即便单独看某个变量，也会理解它要表达什么。当然更好的方法是定义一个名为Address的类，把这些变量放到类中，事实上我们也都是这样做的。</p>
<p>当然，有时候也不能添加一些无意义的语境。我们要开发一个“画图”的应用，那在每个类名前加Drawing可不是什么好主意。</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>命名并不能算是什么技术，而是一种写代码的习惯，但这种习惯有可能会决定你作为一名程序员给人的第一印象。所以，养成一个好的命名习惯，也是对自己形象的维护。同时还能让自己的生命安全更有保障（避免被同事……</p>
]]></content>
      <tags>
        <tag>整洁</tag>
      </tags>
  </entry>
  <entry>
    <title>代码洁癖系列（七）：单元测试的地位</title>
    <url>/2018/09/04/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9C%B0%E4%BD%8D/</url>
    <content><![CDATA[<p>在许多程序员眼中，单元测试似乎是可有可无的，觉得这应该是测试人员的工作。实际上，测试代码和生成代码同样重要。我们不但需要测试代码，而且需要的是整洁的测试代码。<a id="more"></a></p>
<h4 id="测试为什么要整洁"><a href="#测试为什么要整洁" class="headerlink" title="测试为什么要整洁"></a>测试为什么要整洁</h4><p>我们对待测试代码需要像对待生产代码一样，写之前需要进行严谨的思考、详细的设计。这里分享一下我自己的学习编程的一些经历。</p>
<h5 id="没有单元测试"><a href="#没有单元测试" class="headerlink" title="没有单元测试"></a>没有单元测试</h5><p>刚毕业的时候，我的代码可以说是年少轻狂，总是对自己充满自信。根本就不写单元测试，写完之后自测也是随意的点两下就算自测通过了。代码提交测试后，恐怖的事情就出现了，铺天盖地的bug向我袭来。每天工作有一半以上的时间是在和测试同事沟通，其余的时间是在改bug。本来1天的工作可能需要3天才能完成。当我意识到这样做完全是费力不讨好的时候，我决心每次写完代码之后，要写一段单元测试，保证单元测试通过后再提交。</p>
<h5 id="随意的单元测试"><a href="#随意的单元测试" class="headerlink" title="随意的单元测试"></a>随意的单元测试</h5><p>在开始写单元测试之后，我的工作效率提高了很多，下班都比原来早了。感觉写单元测试是一个无比正确的决定。随着项目的进行，中间处理过几次紧急的bug fix，当时就没有顾上去写单元测试。然而，当我又一次完成一个新的feature的时候，像往常一样开始跑单元测试，结果是：Failed！就是因为之前的改动导致的。由于手里还有其他比较紧急的工作，单元测试又被放下了。就这样，我又回到了没有单元测试的工作状态。</p>
<p>现在的我已经不像当初那样盲目的自信了，没有单元测试的代码让我感到恐慌。</p>
<h5 id="决心重构单元测试"><a href="#决心重构单元测试" class="headerlink" title="决心重构单元测试"></a>决心重构单元测试</h5><p>曾经有一段可用的单元测试放在我面前，但我没有珍惜，直到失去才追悔莫及。这次我决心重建单元测试，不但要重建，还要写一段好的单元测试。吸取上次的教训，要使我的单元测试可扩展，可维护。把一些公共的方法抽取出来，将不同概念的测试进行拆分。做到“每个概念一个测试”，测试中需要使用断言判断是否成功，而不是人为查看日志。每个测试都要包含构造-操作-检验三个环节，这三个环节要定义清楚。</p>
<p>这样一来，我就有了一套整洁的单元测试，后来修改代码后，单元测试可以方便的进行扩展和复用，工作效率再次提升。</p>
<h4 id="整洁测试的规则"><a href="#整洁测试的规则" class="headerlink" title="整洁测试的规则"></a>整洁测试的规则</h4><p>整洁测试需要遵循F.I.R.S.T规则。什么是F.I.R.S.T规则呢？</p>
<h5 id="快速（Fast）"><a href="#快速（Fast）" class="headerlink" title="快速（Fast）"></a>快速（Fast）</h5><p>测试应该足够快，如果测试一次需要等待很长时间，没有人愿意频繁的运行测试，也就没办法快速发现问题。久而久之，我们又会失去测试……</p>
<h5 id="独立（Independent）"><a href="#独立（Independent）" class="headerlink" title="独立（Independent）"></a>独立（Independent）</h5><p>测试之间应该相互独立，一个测试的失败不应该影响其他的测试，否则就会导致每次测试出现一大堆问题，我们每次只能解决最上级的测试暴露出来的问题，下级测试需要再次测试才行。这就会大大降低工作效率。</p>
<h5 id="可重复（Repeatable）"><a href="#可重复（Repeatable）" class="headerlink" title="可重复（Repeatable）"></a>可重复（Repeatable）</h5><p>测试应该在各种环境中可以重复执行，不论是你的本地环境，测试环境还是生产环境。测试都应该能够跑通。这样才能保证线上的质量，测试也才有意义。</p>
<h5 id="自足验证（Self-Validating）"><a href="#自足验证（Self-Validating）" class="headerlink" title="自足验证（Self-Validating）"></a>自足验证（Self-Validating）</h5><p>测试应该有布尔值输出（最好使用断言），我们不应该通过查看日志来判断测试是否通过，更不应该通过人为比较两个文本是否相同来判断测试是否通过。这样不但失去了测试的准确性，也浪费了我们自己的时间。</p>
<h5 id="及时（Timely）"><a href="#及时（Timely）" class="headerlink" title="及时（Timely）"></a>及时（Timely）</h5><p>测试应该及时编写，在设计生产代码的同时就应该将测试一并设计好，不然的话，当你写好生产代码，也许会因为某些代码难以测试而放弃。</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>总结一下今天讨论的内容，我们需要整洁的单元测试，它的地位与生产代码一样，需要我们认真设计。设计测试的时候需要遵循F.I.R.S.T原则。</p>
]]></content>
      <tags>
        <tag>整洁</tag>
      </tags>
  </entry>
  <entry>
    <title>代码洁癖系列（八）：迭代的原则</title>
    <url>/2018/09/08/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E8%BF%AD%E4%BB%A3%E7%9A%84%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>我们都知道，一个软件的维护成本往往要高于其研发成本。在维护过程中，我们的代码需要不断的进行迭代。迭代的目的有两个：修复bug和增加新特性。但是迭代也会带来一系列新的问题，比如新的bug，或者是破坏代码的整洁性。这里我们从保持代码整洁性的角度来讨论一下迭代的几个原则。<a id="more"></a></p>
<h4 id="运行所有测试"><a href="#运行所有测试" class="headerlink" title="运行所有测试"></a>运行所有测试</h4><p>没错，首先的要说的还是测试，我们要在每次迭代代码之后，运行所有的测试，如有必要，也要编写新的测试。我们要编写尽量简单的测试，简单的测试会驱使我们降低类与类之间的耦合度。如果还不了解如何编写单元测试，可以参考一下旧文<a href="https://jackeyzhe.github.io/2018/09/04/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9C%B0%E4%BD%8D/">代码洁癖系列（七）：单元测试的地位</a>。良好的测试不但是代码质量的保证，同时也是良好设计的引导。</p>
<h4 id="不要重复“造轮子”"><a href="#不要重复“造轮子”" class="headerlink" title="不要重复“造轮子”"></a>不要重复“造轮子”</h4><p>记得我的leader曾经告诉过我：写每一行代码之前，要先思考一下有没有必要写这行代码。在实现一个功能之前，先确认一下这个功能是否已经被实现了。永远不要重复“造轮子”。但是，当我们进行一定的共性抽取时，可能已经违反了SRP原则（Single Responsibility Principle）。因此，抽取出的方法可能需要放在其他类中。</p>
<h4 id="可读"><a href="#可读" class="headerlink" title="可读"></a>可读</h4><p>代码是程序员之间的交流工具，要想获得其他程序员的尊重，必须使你的代码具备可读性。这也是我们要保持代码整洁的原因。如何保证代码的可读性呢？首先需要的就是有意义的命名，关于命名规则，可以参考<a href="https://jackeyzhe.github.io/2018/08/27/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BD%E5%90%8D%E7%9A%84%E8%89%BA%E6%9C%AF/">代码洁癖系列（二）：命名的艺术</a>这篇文章，其次就是通过测试用例让别人了解你的代码。</p>
<h4 id="尽可能少的类和方法"><a href="#尽可能少的类和方法" class="headerlink" title="尽可能少的类和方法"></a>尽可能少的类和方法</h4><p>在<a href="https://jackeyzhe.github.io/2018/08/29/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%95%B4%E6%B4%81%E7%9A%84%E7%B1%BB%E5%92%8C%E5%87%BD%E6%95%B0/">代码洁癖系列（三）：整洁的类和函数</a>一文中，我们说过类和函数都应该尽量短小。有人问了，为了类和函数都足够短小，我要把代码拆分成许多的类吗？这里需要说明一下，在这方面，我们并不需要追求极致。应该根据实际情况，合理的拆分。所以，也要尽量减少类和方法，这可能与“类和函数应该短小”这一原则相矛盾。这需要工程师自己去衡量了，首先要保证“类和函数应该短小”，其次才是尽可能减少类和方法。</p>
<h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>到这里，”代码洁癖系列“的文章要告一段落了，希望大家在写代码的时候可以多思考，保证自己代码的整洁性。文章有什么问题，或者我有哪些遗漏的地方，大家可以通过去我的微信公众号后台留言和我讨论。</p>
]]></content>
      <tags>
        <tag>整洁</tag>
      </tags>
  </entry>
  <entry>
    <title>代码洁癖系列（五）：外在的格式美</title>
    <url>/2018/08/31/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%A4%96%E5%9C%A8%E7%9A%84%E6%A0%BC%E5%BC%8F%E7%BE%8E/</url>
    <content><![CDATA[<p>我们在阅读一些优秀项目的源码时，一定会感叹他们代码的整洁和一致性。而作为第一印象，代码格式的整齐是让人能够继续阅读下去的动力。今天我们分别从垂直格式和横向格式两个方面来讨论代码的格式。修正格式的方法有：间隔、靠近和调整顺序。<a id="more"></a></p>
<h4 id="垂直格式"><a href="#垂直格式" class="headerlink" title="垂直格式"></a>垂直格式</h4><p>在垂直格式方面，我们要向报纸的排版学习。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1535725759/Blog/clean/timg.jpg" alt="newspaper"></p>
<p>首先有一个标题告诉你这栏新闻要讲什么，好让你知道是否要继续阅读下去。对应到代码中就是类的名字，我们要力求只通过名字就可以知道这个类要描述什么事情；然后，代码的第一段往往都交代了整个故事的概要，类似于代码中的接口，我们往往通过接口了解类中有哪些函数，每个函数都是干什么的。了解了这些之后，才会去读详细的内容。</p>
<table>
<thead>
<tr>
<th style="text-align:center">newspaper</th>
<th style="text-align:center">code</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">标题</td>
<td style="text-align:center">类名</td>
</tr>
<tr>
<td style="text-align:center">第一段</td>
<td style="text-align:center">接口</td>
</tr>
<tr>
<td style="text-align:center">内容</td>
<td style="text-align:center">方法体</td>
</tr>
</tbody>
</table>
<p>此外，还需要注意的就是报纸的排版、段落和段落之间用空行做间隔。写代码也可以用同样的方式，例如，我们习惯于在包声明、导入声明和每个函数之间用空白行来分隔。我们直接拿代码来解释。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thoughtworks.selenium;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.ITestContext;</span><br><span class="line"><span class="keyword">import</span> org.testng.ITestResult;</span><br><span class="line"><span class="keyword">import</span> org.testng.Reporter;</span><br><span class="line"><span class="keyword">import</span> org.testng.internal.IResultListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenshotListener</span> <span class="keyword">implements</span> <span class="title">IResultListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  File outputDirectory;</span><br><span class="line">  Selenium selenium;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ScreenshotListener</span><span class="params">(File outputDirectory, Selenium selenium)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.outputDirectory = outputDirectory;</span><br><span class="line">    <span class="keyword">this</span>.selenium = selenium;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTestFailure</span><span class="params">(ITestResult result)</span> </span>&#123;</span><br><span class="line">    Reporter.setCurrentTestResult(result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      outputDirectory.mkdirs();</span><br><span class="line">      File outFile = File.createTempFile(<span class="string">"TEST-"</span> + result.getName(), <span class="string">".png"</span>, outputDirectory);</span><br><span class="line">      outFile.delete();</span><br><span class="line">      selenium.captureScreenshot(outFile.getAbsolutePath());</span><br><span class="line">      Reporter.log(<span class="string">"&lt;a href='"</span> +</span><br><span class="line">          outFile.getName() +</span><br><span class="line">          <span class="string">"'&gt;screenshot&lt;/a&gt;"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      Reporter.log(<span class="string">"Couldn't create screenshot"</span>);</span><br><span class="line">      Reporter.log(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Reporter.setCurrentTestResult(<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thoughtworks.selenium;</span><br><span class="line"><span class="keyword">import</span> org.testng.ITestContext;</span><br><span class="line"><span class="keyword">import</span> org.testng.ITestResult;</span><br><span class="line"><span class="keyword">import</span> org.testng.Reporter;</span><br><span class="line"><span class="keyword">import</span> org.testng.internal.IResultListener;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenshotListener</span> <span class="keyword">implements</span> <span class="title">IResultListener</span> </span>&#123;</span><br><span class="line">  File outputDirectory;</span><br><span class="line">  Selenium selenium;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ScreenshotListener</span><span class="params">(File outputDirectory, Selenium selenium)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.outputDirectory = outputDirectory;</span><br><span class="line">    <span class="keyword">this</span>.selenium = selenium;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTestFailure</span><span class="params">(ITestResult result)</span> </span>&#123;</span><br><span class="line">    Reporter.setCurrentTestResult(result);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      outputDirectory.mkdirs();</span><br><span class="line">      File outFile = File.createTempFile(<span class="string">"TEST-"</span> + result.getName(), <span class="string">".png"</span>, outputDirectory);</span><br><span class="line">      outFile.delete();</span><br><span class="line">      selenium.captureScreenshot(outFile.getAbsolutePath());</span><br><span class="line">      Reporter.log(<span class="string">"&lt;a href='"</span> +</span><br><span class="line">          outFile.getName() +</span><br><span class="line">          <span class="string">"'&gt;screenshot&lt;/a&gt;"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      Reporter.log(<span class="string">"Couldn't create screenshot"</span>);</span><br><span class="line">      Reporter.log(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    Reporter.setCurrentTestResult(<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是不是适当增加空白行就提高了代码的可读性呢，这里说的是适当增加空白行，并不代表随意增加。事实上，如果增加一些无意义的空白行反而会使代码的可读性变差。</p>
<p>我们习惯于使有关联的代码彼此靠近，无明显关联的代码相互分隔。因此我们不但需要使用空白行间隔代码，还要调整代码位置，把有关联的代码放在一起，通常我们把被调用的函数放在调用函数的下面。这样别人在读我们的代码的时候再也不用经历来回“跳跃”的痛苦了。</p>
<p>最后，我们通常把实体变量定义在类的顶部，这个只是我们Java程序员的习惯操作，如果突然在类的中间位置出现一个变量声明会让人觉得很奇怪。如果你想说，定义在中间是不想让定义位置和调用位置离太远，那么只能说明你的类定义出现了问题。建议你看一下旧文<a href="https://jackeyzhe.github.io/2018/08/29/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%95%B4%E6%B4%81%E7%9A%84%E7%B1%BB%E5%92%8C%E5%87%BD%E6%95%B0/">代码洁癖系列（三）：整洁的类和函数</a>。</p>
<h4 id="横向格式"><a href="#横向格式" class="headerlink" title="横向格式"></a>横向格式</h4><p>介绍完垂直格式，紧接着自然要来介绍一下它的兄弟，横向格式。或许你会问为什么不叫水平格式，我的回答是：也可以叫水平格式，只要你喜欢。横向格式也是需要间隔和靠近的，这里的间隔主要是为了起到强调的效果。举个例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> lineSize = line.length();</span><br></pre></td></tr></table></figure>
<p>这里等号两边的空格分别是为了强调左右两边的元素。横向格式另一个比较重要的元素就是缩进，Java程序对缩进没有强制性要求，而Python程序对缩进的要求非常严格，稍有不慎，执行的结果就会不同。但是Java程序员也要注意缩进，因为我们的代码是层级关系，而缩进可以帮我们快速理清层级关系。</p>
<p>最后，横向代码格式对每行代码长度是有要求的，如果代码过长，那么在阅读的时候就需要左右滑动，而这个操作其实是不受人喜欢的。虽然现在代码编辑器可显示的长度变大了，但我们还是习惯每行代码最多100个字符。</p>
<h4 id="团队的规则"><a href="#团队的规则" class="headerlink" title="团队的规则"></a>团队的规则</h4><p>每一个优秀的团队都已一套属于自己的代码格式要求，有些是特定的，有些是使用公共的。我们team所用的代码规范就是Google的代码规范，阿里的代码规范也是比较被大家认可的。这里给大家一个小福利，在我的公众号后台回复【代码规范】，就可以获得一份阿里的Java开发手册。</p>
]]></content>
      <tags>
        <tag>整洁</tag>
      </tags>
  </entry>
  <entry>
    <title>代码洁癖系列（六）：处理错误</title>
    <url>/2018/09/03/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>程序运行过程中，有些错误是不可避免的，而如何使程序在出现错误时代码仍然正常工作就成了程序员的日常工作之一。那么处理错误和代码整洁有什么关系呢？<a id="more"></a></p>
<p>前面我们提到过，try-catch代码块会破坏代码的结构。但是，我们在处理错误时又不得不使用try-catch代码块，这样才能让我们的程序保持健壮。那么如何兼顾整洁和健壮呢，这就是我们今天要讨论的内容。</p>
<h4 id="不要使用返回码"><a href="#不要使用返回码" class="headerlink" title="不要使用返回码"></a>不要使用返回码</h4><p>在上古时期，很多语言还都不支持异常，程序员们只能约定好返回的错误码，通过不同的错误码对代码进行错误处理。这么做需要调用者在调用方法后马上判断返回值来决定是否需要处理错误。而这一步骤往往被遗忘，就会导致程序出现不可预估的问题。所以，现在我们有了throw和try-catch这样的“热武器”，就不要再用错误码这样的“冷兵器”了。不然很容易就会被别人给秒杀的。</p>
<p>try-catch-finally相信大家都很熟悉，不熟悉的话，可以前往本站达成合作的各大搜索引擎进行搜索，保证有答案。</p>
<h4 id="异常抛出的层级"><a href="#异常抛出的层级" class="headerlink" title="异常抛出的层级"></a>异常抛出的层级</h4><p>我们不希望程序中充满了try-catch代码块，这样会使程序的可读性变差。因此，我们要适当的使用throw语句，将异常抛出。交给上一层去处理。但是，如果只由最顶层的代码去处理异常，整个程序看上去是会整洁一些，但当我们需要修改某个底层代码抛出的异常时会发生什么呢？我们需要找到往上抛的每一个方法去修改它的签名，抛出新的异常，并重新发布。这会使我们的工作量增加好几倍。所以，我们的异常最好在本层进行统一处理，或者在抛出后的上一层就进行处理。</p>
<h4 id="说明发生异常的环境"><a href="#说明发生异常的环境" class="headerlink" title="说明发生异常的环境"></a>说明发生异常的环境</h4><p>在Java中，系统异常通常会给出调用栈，便于我们进行问题的定位和调试。对于我们自己抛出的异常，也应该给出异常发生的环境，例如列出调用栈，给出请求参数等等。</p>
<h4 id="远离null值"><a href="#远离null值" class="headerlink" title="远离null值"></a>远离null值</h4><p>我们在读、写代码时，一定有被好多层的空指针判断折磨的经历。一不小心漏掉一个判断，那么程序就会出现空指针异常，这个异常要么被上层的catch捕获，要么直接抛出。很明显，这两种结果都不是我们想要的。怎么远离空指针异常呢？</p>
<p>首先，代码的返回值不要返回null。可以选择直接抛出一个异常，或者返回一个特定的值，比如空对象等。</p>
<p>其次，代码调用时，参数不要传null，因为一旦传null，那么在方法体中就需要对这个参数进行非空判断。而目前还没有什么好的方法可以简单高效的处理参数外部传来的null，只能使用if判断。因此希望大家在调用别的方法时尽量不要传入null。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>本文的主要目的是使我们的代码兼顾整洁性和健壮性。这就需要我们将错误处理独立于主逻辑之外，使错误就可以被单独处理，不但能够增强可读性，还能增强可维护性。最后得到的就是我们希望看到的整洁而健壮的代码。</p>
]]></content>
      <tags>
        <tag>整洁</tag>
      </tags>
  </entry>
  <entry>
    <title>代码洁癖系列（四）：可忽略的注释</title>
    <url>/2018/08/30/%E4%BB%A3%E7%A0%81%E6%B4%81%E7%99%96%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%8F%AF%E5%BF%BD%E7%95%A5%E7%9A%84%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<p>刚开始学编程的时候，老师就告诉我们，注释很重要，但是一直到现在，也没有人真正告诉过我要怎么写注释。还有很多人甚至干脆不写注释。所以今天想聊一下到底如何写注释。<a id="more"></a></p>
<p>提到注释就让我想起一个段子：两个程序员去饭店吃饭，点菜的时候程序员甲说：我要吃宫保鸡丁，程序员乙就帮他记。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">宫保鸡丁</span><br></pre></td></tr></table></figure>
<p>然后程序员甲又说：我不想吃宫保鸡丁了，换成地三鲜吧。程序员乙就说好的，然后又帮他记上了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//宫保鸡丁</span></span><br><span class="line">地三鲜</span><br></pre></td></tr></table></figure>
<p>这个段子也从侧面反映了程序员们习惯性忽略注释的事实。段子讲完了，下面插播一些正文。</p>
<h4 id="注释不能拯救糟糕的代码"><a href="#注释不能拯救糟糕的代码" class="headerlink" title="注释不能拯救糟糕的代码"></a>注释不能拯救糟糕的代码</h4><p>首先，我想说的可能和大多数人的观点相左：尽量少用注释！没错，尽量少用。因为注释是会骗人的，而且时间越长的注释越容易骗人，因为大部分人在修改代码的时候都不会去修改注释。少写注释，尽量用代码去描述你要做什么。当你要写注释的时候，就要思考一下，别人为什么不能通过代码理解你想表达什么。这时你需要尝试修改代码，来达到上述目的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check to see if the employee is eligible for full benefits</span></span><br><span class="line"><span class="keyword">if</span> (employee.flags &amp; HOURLY_FLAG) &amp;&amp;</span><br><span class="line">    (employee.age &gt; <span class="number">65</span>)</span><br></pre></td></tr></table></figure>
<p>看一下这段代码，如果只看代码，可以理解它要表达什么吗？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (employee.isEligibleForFUllBenefits())</span><br></pre></td></tr></table></figure>
<p>花上点时间，把代码改成这样，是不是不用注释也可以读懂了？</p>
<p>我们这里说尽量少使用注释，并不是完全不用注释，在某些情况下，我们需要注释。那么什么样的注释才算是好的注释呢？</p>
<h4 id="法律信息"><a href="#法律信息" class="headerlink" title="法律信息"></a>法律信息</h4><p>有时，公司代码规范会要求注明版权和著作权。那么我们就应该将这些信息放到源文件的开头位置。</p>
<h4 id="提供信息的注释"><a href="#提供信息的注释" class="headerlink" title="提供信息的注释"></a>提供信息的注释</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Returns an instance of the Responder being tested.</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Responder <span class="title">responderInstance</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>这样的注释就是不错的注释，给读者提供了返回值的信息，不过，如果我们把函数命名为responderBeingTested，那么这个注释也就显得多余了。</p>
<h4 id="阐释"><a href="#阐释" class="headerlink" title="阐释"></a>阐释</h4><p>可以用注释把某些难以理解的参数或返回值翻译成可以理解的形式。当前，前提是如果这些代码你无法修改，比如参数或返回值是标准库的一部分。这时阐释就显得很有用。举过来一个栗子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">assertTrue(a.compareTo(a) == <span class="number">0</span>);  <span class="comment">// a == a</span></span><br><span class="line">assertTrue(a.compareTo(b) != <span class="number">0</span>);  <span class="comment">// a != b</span></span><br><span class="line">assertTrue(a.compareTo(b) == -<span class="number">1</span>); <span class="comment">// a &lt; b</span></span><br></pre></td></tr></table></figure>
<p>不过这样的阐释也有缺点，那就是它有可能是不正确的，我们需要小心确认其正确性。如果缺失正确性，那么这样的阐释只会起到负面作用。</p>
<h4 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a>TODO注释</h4><p>TODO注释是比较常用的注释，可以在代码里添加工作列表，例如，对一个空实现函数添加TODO注释，就可以解释这里为什么是空实现，以及以后要实现什么。</p>
<h4 id="公共API的Javadoc"><a href="#公共API的Javadoc" class="headerlink" title="公共API的Javadoc"></a>公共API的Javadoc</h4><p>这个也许最令人欣赏的注释习惯了。不过目前我们通常用swagger来代替注释。对swagger感兴趣的童鞋可以戳<a href="https://swagger.io/" target="_blank" rel="noopener">这里</a>。</p>
<p>所谓见贤思齐焉，见不贤而内自省也。看完了好的注释，就要想想怎么才能写出好的注释；接下来再来看看坏的注释，看的同时需要多反省自己，尽量避免写出坏的注释。</p>
<h4 id="自说自话"><a href="#自说自话" class="headerlink" title="自说自话"></a>自说自话</h4><p>写的东西只有自己能看懂，别人都不明白要表达什么。如果读代码时连注释都看不明白，还有人想看下去吗。</p>
<h4 id="日志式注释"><a href="#日志式注释" class="headerlink" title="日志式注释"></a>日志式注释</h4><p>几乎把代码的每次修改记录都写到注释里，也许在那个没有代码版本控制工具的远古时代，这么做还有一定的意义。但是现在我们拥有很多健壮的代码版本控制工具，这样的注释也就变得毫无意义。</p>
<p>在代码里加上自己的签名也是一样的道理，我们都可以通过代码版本控制工具查看具体的创建者和修改者，而不是只记住创建者。</p>
<p>注释掉代码也是一样，我们用版本控制工具可以轻松找回以前的代码，不需要的代码可以直接删掉，而不是留一个注释掉的代码放在那里。</p>
<h4 id="废话注释"><a href="#废话注释" class="headerlink" title="废话注释"></a>废话注释</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The day of the month. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> dayOfMonth;</span><br></pre></td></tr></table></figure>
<p>我不想多废话了……</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>也许文中的观点和大多数人的思维相左，可能我的有些观点是错的，欢迎大家关注我的微信公众号，和我讨论注释究竟是否必要。</p>
]]></content>
      <tags>
        <tag>整洁</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】教你用50种语言写Hello, World</title>
    <url>/2020/01/06/%E3%80%90%E8%AF%91%E3%80%91%E6%95%99%E4%BD%A0%E7%94%A850%E7%A7%8D%E8%AF%AD%E8%A8%80%E5%86%99Hello-World/</url>
    <content><![CDATA[<p>当我们学习一门新的语言时，“Hello, World!“通常是我们所写的第一个程序。相信作为一名程序员的你，职业生涯中至少完成了一个“Hello, World!“程序。程序员一般也都会使用多门语言，甚至有多数人都会使用十几种语言。<a id="more"></a></p>
<p>甚至有一个名为TTHW的指标来衡量一个程序员接触一门新的编程语言时，成功写出“Hello, World!“并运行所需要的时间。</p>
<p>然而，如果我问你，你会用多少种编程语言写“Hello, World!“？你的答案会是多少？</p>
<p>为了刷新你的记忆，我会带你经历一段计算机编程领域的时空之旅。为此，我将向你展示50种不同的编程语言的</p>
<p>“Hello, World!“程序的写法。你也会了解计算机语言随着时间的推进发生了哪些变化。</p>
<h3 id="1-汇编语言-1949"><a href="#1-汇编语言-1949" class="headerlink" title="1. 汇编语言 - 1949"></a>1. 汇编语言 - 1949</h3><p>汇编语言诞生于1949年。本文我向你展示的是适用于Intel 8080的8位处理器的，发布于1974年4月的汇编语言经典代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bdos    equ    0005H    ; BDOS entry point</span><br><span class="line">start:  mvi    c,9      ; BDOS function: output string</span><br><span class="line">        lxi    d,msg$   ; address of msg</span><br><span class="line">        call   bdos</span><br><span class="line">        ret             ; return to CCP</span><br><span class="line">  </span><br><span class="line">msg$:   db    &apos;Hello, world!$&apos;</span><br><span class="line">end     start</span><br></pre></td></tr></table></figure>
<h3 id="2-Fortran-1957"><a href="#2-Fortran-1957" class="headerlink" title="2. Fortran - 1957"></a>2. Fortran - 1957</h3><p>Fortran是Formula Translation的衍生物，这是一种通用的交互式编程语言，特别适合于数值和科学计算。Fortran创建于1957年，下面是它的第一个“Hello, World!”程序：</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">PROGRAM</span></span> Hello</span><br><span class="line"><span class="built_in">WRITE</span> (*,*) <span class="string">'Hello, World!'</span></span><br><span class="line"><span class="keyword">STOP</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<p>Fortran 90 或 95的写法有所不同：</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">PROGRAM</span></span> Hello</span><br><span class="line"><span class="built_in">WRITE</span> (*,*) <span class="string">'Hello, World!'</span></span><br><span class="line"><span class="keyword">END</span> <span class="function"><span class="keyword">PROGRAM</span></span> Hello</span><br></pre></td></tr></table></figure>
<h3 id="3-Lisp-1958"><a href="#3-Lisp-1958" class="headerlink" title="3. Lisp - 1958"></a>3. Lisp - 1958</h3><p>Lisp是最古老的编程语言系列，它既是交互式的又是函数式的。1958年，Lisp作为一种实用的演示程序模型被创建出来，但是直到1970和1980年代，Lisp才成为人工智能世界中非常流行的语言。</p>
<p>下面是Lisp的“Hello, World!”程序：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">(<span class="name">write-line</span> <span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="4-Cobol-1959"><a href="#4-Cobol-1959" class="headerlink" title="4. Cobol - 1959"></a>4. Cobol - 1959</h3><p>Cobol语言于1959年正式创立，并且在2019年刚刚庆祝过创立60周年。Cobol表示面向通用业务的语言（COmmon Business Oriented Language），目标是成为编程业务应用程序的通用语言。在2019年，Cobol仍被广泛应用于银行和保险的相关系统中。</p>
<p>下面是Cobol的“Hello, World!”程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IDENTIFICATION DIVISION.</span><br><span class="line">PROGRAM-ID. HELLO-WORLD.</span><br><span class="line">PROCEDURE DIVISION.</span><br><span class="line">    DISPLAY &quot;Hello, World!&quot;</span><br><span class="line">    STOP RUN.</span><br></pre></td></tr></table></figure>
<h3 id="5-BASIC-1964"><a href="#5-BASIC-1964" class="headerlink" title="5. BASIC - 1964"></a>5. BASIC - 1964</h3><p>BASIC是Beginner’s All-purpose Symbolic Instruction Code（初学者通用符号说明代码）的缩写。它是一门高级编程语言，其主要目标在于易用。它的“Hello, World!”程序如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PRINT "Hello, World!"</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<h3 id="6-Logo-1968"><a href="#6-Logo-1968" class="headerlink" title="6. Logo - 1968"></a>6. Logo - 1968</h3><p>Logo旨在成为易用的Lisp，通常被称为“Lisp without brackets”，Logs并不是面向对象编程语言，但它可以帮助你入门计算机编程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print [Hello World !]</span><br></pre></td></tr></table></figure>
<h3 id="7-B-1969"><a href="#7-B-1969" class="headerlink" title="7. B - 1969"></a>7. B - 1969</h3><p>B语言创建于1969年，它现在已经过时了，但它的计算机编程语言的发展史上发挥着重要的作用。因为正是B语言启发了现在广泛应用的C语言。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">  putstr(&quot;Hello world!*n&quot;);</span><br><span class="line">  return(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是不是语法层面就非常像C语言了。</p>
<h3 id="8-Pascal-1970"><a href="#8-Pascal-1970" class="headerlink" title="8. Pascal - 1970"></a>8. Pascal - 1970</h3><p>Pascal是一种交互式编程语言，它创建于1970年。它被设计出来主要出于教学目的，因为这个语言的特点是清晰，且严格的语法有助于良好的程序结构。</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">  writeln(<span class="string">'Hello, World!'</span>)</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
<p>Turbo Pascal是Pascal语言的集成开发环境，在1983年被创建，并在1980年代和1990年代取得了巨大的成功。</p>
<p>Turbo Pascal的“Hello, World!“程序如下：</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">program</span> HelloWorld(output);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  writeln(<span class="string">'Hello, World!'</span>);</span><br><span class="line">  readln;</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
<h3 id="9-Forth-1970"><a href="#9-Forth-1970" class="headerlink" title="9. Forth - 1970"></a>9. Forth - 1970</h3><p>Forth是一门基于栈的交互式编程语言，由Charles H. Moore在1960年代发明。但它的第一个大版本是在1970年发布的。它于1994年被ANSI标准化，并于1997年被ISO采纳。2014年的Forth2012为语言的发展又焕发了生机。</p>
<p>下面是1970年版本Forth语言的“Hello, World!” 程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">: HELLO  ( -- )  .&quot; Hello, World!&quot; CR ;</span><br><span class="line">  HELLO</span><br></pre></td></tr></table></figure>
<h3 id="10-C-1972"><a href="#10-C-1972" class="headerlink" title="10. C - 1972"></a>10. C - 1972</h3><p>1972年的贝尔实验室中，Dennis Ritchie和Ken Thompson两位大佬为了开发UNIX发明了C语言。Ken Thompson曾开发过B语言，Dennis Ritchie决定通过对B语言添加类型来创造C语言。所以说B语言为C语言提供了灵感。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="11-Smalltalk-1972"><a href="#11-Smalltalk-1972" class="headerlink" title="11. Smalltalk - 1972"></a>11. Smalltalk - 1972</h3><p>Smalltalk受到Lisp的启发，它是一门面向对象的，动态类型的编程语言，它被发明于1972年。Smalltalk是最早具有集成开发环境的编程语言之一。</p>
<figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line"><span class="type">Transcript</span> show: <span class="string">'Hello, world!'</span>; cr.</span><br></pre></td></tr></table></figure>
<h3 id="12-Prolog-1972"><a href="#12-Prolog-1972" class="headerlink" title="12. Prolog - 1972"></a>12. Prolog - 1972</h3><p>Prolog是与人工智能和计算语言学相关的逻辑编程语言，被创建于1972年。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:- write(&apos;Hello, World!&apos;),nl.</span><br></pre></td></tr></table></figure>
<h3 id="13-ML-1973"><a href="#13-ML-1973" class="headerlink" title="13. ML - 1973"></a>13. ML - 1973</h3><p>ML是Meta Language的简称，是一种以Lisp为基础的函数型编程语言。ML通常以Lisp为特征，具有类型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print &quot;Hello, World!\n&quot;;</span><br></pre></td></tr></table></figure>
<h3 id="14-Scheme-1975"><a href="#14-Scheme-1975" class="headerlink" title="14. Scheme - 1975"></a>14. Scheme - 1975</h3><p>Scheme创建于1975年，是一种多范式编程语言，支持函数式和交互式编程。它是Lisp三种重要的变种之一，由Common Lisp和Clojure共同开发。</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">display</span></span> <span class="string">"Hello, World!"</span>) (<span class="name"><span class="builtin-name">newline</span></span>)</span><br></pre></td></tr></table></figure>
<h3 id="15-SQL-1978"><a href="#15-SQL-1978" class="headerlink" title="15. SQL - 1978"></a>15. SQL - 1978</h3><p>SQL即结构化查询语言，是用于操作关系数据库的标准计算机编程语言。虽然在设计时不能创建简单的“Hello, World!“程序，但我想写出来应该是一个有趣的程序，如果你想学习SQL，这里有一些<a href="https://hackernoon.com/top-5-sql-and-database-courses-to-learn-online-48424533ac61?source=user_profile---------3------------------" target="_blank" rel="noopener">推荐课程</a>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> message (<span class="built_in">text</span> <span class="built_in">char</span>(<span class="number">15</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> message (<span class="built_in">text</span>) <span class="keyword">VALUES</span> (<span class="string">'Hello, World!'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">text</span> <span class="keyword">FROM</span> message;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> message;</span><br></pre></td></tr></table></figure>
<h3 id="16-C-1980"><a href="#16-C-1980" class="headerlink" title="16. C++ - 1980"></a>16. C++ - 1980</h3><p>C++是由Bjarne Stroustrup在1980年创建，他为C语言增加了类，在1983年得名C++。现在C++已经通过了ISO标准化，并广泛应用于工业和其他领域。如果你想要学习C++，这里有一些<a href="https://hackernoon.com/top-5-free-c-courses-to-learn-programming-in-2019-d27352277da0" target="_blank" rel="noopener">推荐课程</a>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="17-Ada-1983"><a href="#17-Ada-1983" class="headerlink" title="17. Ada - 1983"></a>17. Ada - 1983</h3><p>Ada是一种面向对象编程语言，其开发始于1980年初，并在1983年完成发布。之所以叫做Ada是为了纪念Ada Lovelace，这可能是历史上第一位女性计算机科学家。</p>
<p>Ada通常用于需要很高可靠性和安全性的实时系统和嵌入式系统中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with Ada.Text_IO;</span><br><span class="line">procedure Hello is</span><br><span class="line">begin</span><br><span class="line">   Ada.Text_IO.Put_Line (&quot;Hello, World!&quot;);</span><br><span class="line">end Hello;</span><br></pre></td></tr></table></figure>
<h3 id="18-Common-Lisp-1984"><a href="#18-Common-Lisp-1984" class="headerlink" title="18. Common Lisp - 1984"></a>18. Common Lisp - 1984</h3><p>Common Lisp，通常缩写为CL，是ANSI标准化的Lisp语言规范。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(princ &quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="19-MATLAB-1984"><a href="#19-MATLAB-1984" class="headerlink" title="19. MATLAB - 1984"></a>19. MATLAB - 1984</h3><p>MATLAB是一种用于数值计算的脚本语言，被用于“Matrix Laboratory”。MATLAB是由同名的开发环境模拟的。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">disp</span>(<span class="string">'Hello, World!'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="20-Eiffel-1985"><a href="#20-Eiffel-1985" class="headerlink" title="20. Eiffel - 1985"></a>20. Eiffel - 1985</h3><p>Eiffel是一种围绕设计方法设计的面向对象编程语言，它具有当下非常流行的概念，例如“按约定编程”或复用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class</span><br><span class="line">    HELLO_WORLD</span><br><span class="line">create</span><br><span class="line">    make</span><br><span class="line">feature</span><br><span class="line">    make</span><br><span class="line">        do</span><br><span class="line">            print (&quot;Hello, world!%N&quot;)</span><br><span class="line">        end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="21-Objective-C-1986"><a href="#21-Objective-C-1986" class="headerlink" title="21. Objective-C - 1986"></a>21. Objective-C - 1986</h3><p>Objective-C是一种面向对象编程语言，它像C++一样，是C语言的扩展，而与C++的区别在于它的动态消息分发或动态加载。</p>
<p>现在，它主要用于Apple操作系统：macOS以及iOS的衍生品。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"> </span><br><span class="line">int main() &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        NSLog(@&quot;Hello, World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="22-Erlang-1986"><a href="#22-Erlang-1986" class="headerlink" title="22. Erlang - 1986"></a>22. Erlang - 1986</h3><p>Erlang是一种支持多种范式的编程语言：并发、实时、分布式。它基于Actor Model，具有容错能力以及代码热更新能力，所以Erlang开发的应用可用性通常很高。</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">io:format(<span class="string">"Hello world!~n"</span>).</span><br></pre></td></tr></table></figure>
<h3 id="23-Perl-1987"><a href="#23-Perl-1987" class="headerlink" title="23. Perl - 1987"></a>23. Perl - 1987</h3><p>Perl是由Larry Wall在1987年创建的编程语言，它可以轻松处理基于文本的消息。Perl是一种解释型语言，它受C语言的控制和打印结构以及shell脚本的启发。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"Hello, World!\n"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="24-Caml-1987"><a href="#24-Caml-1987" class="headerlink" title="24. Caml - 1987"></a>24. Caml - 1987</h3><p>Caml代表Categorical Abstract Machine Language（分类抽象机器语言），是一种通用的编程语言，旨在提高程序的安全性和可靠性。Caml是一种致力于函数式、交互式和面向对象风格，这也是一种非常独特的语言。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print_string &quot;Hello, World!\n&quot;;;</span><br></pre></td></tr></table></figure>
<h3 id="25-Tcl-1988"><a href="#25-Tcl-1988" class="headerlink" title="25. Tcl - 1988"></a>25. Tcl - 1988</h3><p>Tool Command Language（工具命令行语言），是John Ousterhout在1988年开发的一种脚本语言。它是一种动态类型语言，具有跨平台、可扩展、易学习等特点。并且可以轻松和C语言进行交互。</p>
<p>在1990年， John Ousterhout又开发了Tcl的扩展——Tk，这是一个可移植的用于创建图形界面的库。我们今天所讨论的Tcl，多数情况是指Tcl和Tk的组合。</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">puts</span> <span class="string">"Hello, World!"</span></span><br></pre></td></tr></table></figure>
<h3 id="26-Haskell-1990"><a href="#26-Haskell-1990" class="headerlink" title="26. Haskell - 1990"></a>26. Haskell - 1990</h3><p>Haskell是一种基于lambda计算和组合逻辑的函数式编程语言。</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">main</span> = putStrLn <span class="string">"Hello, World!"</span></span><br></pre></td></tr></table></figure>
<h3 id="27-Python-1991"><a href="#27-Python-1991" class="headerlink" title="27. Python - 1991"></a>27. Python - 1991</h3><p>相信大家对Python都比较熟悉，即使没有过，基本上也都听说过。它是一门解释型语言，可以跨平台。Python支持结构体，函数和面向对象的交互式编程。随着AI的发展，近几年Python的热度也是持续上涨。</p>
<p>如果你想学Python，可以参考这份<a href="https://medium.com/better-programming/top-5-courses-to-learn-python-in-2018-best-of-lot-26644a99e7ec" target="_blank" rel="noopener">课程推荐</a>。</p>
<p>下面是Python3.0以后版本“Hello, World“程序的写法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="28-Visual-Basic-1991"><a href="#28-Visual-Basic-1991" class="headerlink" title="28. Visual Basic - 1991"></a>28. Visual Basic - 1991</h3><p>Visual Basic，通常简称为VB，是第三代事件编程语言。微软也为其创建了集成开发环境。</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> Main()</span><br><span class="line">    Debug.Print <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>
<h3 id="29-Lua-1993"><a href="#29-Lua-1993" class="headerlink" title="29. Lua - 1993"></a>29. Lua - 1993</h3><p>Lua创建于1993年，是交互式编程语言。它专注于嵌入其他应用程序以对其进行扩展。</p>
<p>译者注：我们之前介绍过Lua在Redis中的应用，不知道你是否还记得。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="30-Ruby-1995"><a href="#30-Ruby-1995" class="headerlink" title="30. Ruby - 1995"></a>30. Ruby - 1995</h3><p>由于对Smalltalk和Lisp的开发感到沮丧，Yukihiro Matsumoto从1993年起开始在Emacs上设计Ruby语言，并于1995年发布了第一版。Ruby是解释型、面向对象、多范式的编程语言。如果你感兴趣，可以看一下这些<a href="https://www.java67.com/2018/02/5-free-ruby-and-rails-courses-to-learn-online.html" target="_blank" rel="noopener">课程</a>。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">puts <span class="string">'Hello, World!'</span></span><br></pre></td></tr></table></figure>
<h3 id="31-Java-1995"><a href="#31-Java-1995" class="headerlink" title="31. Java - 1995"></a>31. Java - 1995</h3><p>Java是James Gosling（我们常说的高司令）在1995年时创建的一门面向对象编程语言，到目前为止，Java仍然是业界最流行、使用最广泛的语言。使用Java可以开发从客户端到服务端到各种应用，Google选择Java作为Android开发语言这件事使得Java得到了更进一步的发展。想要学习Java的话可以关注这几门<a href="https://medium.com/javarevisited/10-free-courses-to-learn-java-in-2019-22d1f33a3915" target="_blank" rel="noopener">课程</a>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello, World!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="32-JavaScript-1995"><a href="#32-JavaScript-1995" class="headerlink" title="32. JavaScript - 1995"></a>32. JavaScript - 1995</h3><p>JavaScript是一门主要用于开发Web页面的脚本语言，但现在也可以用作服务端开发，如Nodejs。JS是一门面向过程的语言，推荐课程<a href="https://www.java67.com/2018/04/top-5-free-javascript-courses-to-learn.html" target="_blank" rel="noopener">在这里</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">'Hello, World!'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="33-PHP-1995"><a href="#33-PHP-1995" class="headerlink" title="33. PHP - 1995"></a>33. PHP - 1995</h3><p>1995年对于编程语言而言绝对是非常重要的一年，在Java和JavaScript之后，PHP也于同年诞生。PHP是一门解释型的面向对象编程语言。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> <span class="keyword">echo</span> <span class="string">"Hello, World!"</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="34-Rebol-1997"><a href="#34-Rebol-1997" class="headerlink" title="34. Rebol - 1997"></a>34. Rebol - 1997</h3><p>Rebol是一种高级脚本语言，自称“消息传递语言”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print &quot;Hello, World!&quot;</span><br></pre></td></tr></table></figure>
<h3 id="35-ActionScript-—-1998"><a href="#35-ActionScript-—-1998" class="headerlink" title="35. ActionScript — 1998"></a>35. ActionScript — 1998</h3><p>ActionScript可以用于开发客户端应用程序，如Adobe Flash和Adobe Flex；也可以用于服务端开发（Flash media server, JRun, Macromedia Generator）。现在，ActionScript在Unity图形引擎中被当作脚本语言使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package &#123;</span><br><span class="line">  public class HelloWorld &#123;</span><br><span class="line">    public function HelloWorld() &#123;</span><br><span class="line">      trace(&quot;Hello World !&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="36-D-1999"><a href="#36-D-1999" class="headerlink" title="36. D - 1999"></a>36. D - 1999</h3><p>D语言是一门面向对象编程语言，它的设计借鉴于许多语言，包括C++、Java和Eiffel。D语言是一门优秀的语言，但是一直都没有像它的创造者期望的那样获得成功。</p>
<figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> std.stdio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main () &#123;</span><br><span class="line">  writefln(<span class="string">"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="37-C-2000"><a href="#37-C-2000" class="headerlink" title="37. C# - 2000"></a>37. C# - 2000</h3><p>2000年，微软就Java语言与Sun公司发生争议，随后便创造了C#，C#是一种被设计为在Microsoft.NET平台上开发的面向对象的编程语言，它是由C++和Java派生而来，使用了许多它们的通用特性和概念。C#也可以用来在ASP.NET平台上开发Web应用。<a href="https://www.java67.com/2019/03/5-free-c-net-courses-to-learn-online.html" target="_blank" rel="noopener">C#课程</a>自取。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">internal static class HelloWorld &#123;</span><br><span class="line">  private static void Main() &#123;</span><br><span class="line">    Console.WriteLine(&quot;Hello, World!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="38-Groovy-2003"><a href="#38-Groovy-2003" class="headerlink" title="38. Groovy - 2003"></a>38. Groovy - 2003</h3><p>Groovy是运行在Java虚拟机上的一门面向对象编程语言，它是Java的超集，其设计受到了Python、Ruby和Smalltalk的启发。这里有一些<a href="https://medium.com/javarevisited/70-years-of-hello-world-with-50-programming-languages-2400de893a97" target="_blank" rel="noopener">学习书籍</a>可以参考。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">println <span class="string">"Hello, World!"</span></span><br></pre></td></tr></table></figure>
<h3 id="39-Scala-2003"><a href="#39-Scala-2003" class="headerlink" title="39. Scala - 2003"></a>39. Scala - 2003</h3><p>Scala是一种多范式编程语言，旨在以简洁、优雅的形式表达常见的编程模型。Scala通过静态类型集成了面向对象和函数式编程的范例。<a href="https://javarevisited.blogspot.com/2019/01/5-free-scala-programming-courses-for-java-programmers-learn-online.html" target="_blank" rel="noopener">Scala课程</a>。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="40-F-2005"><a href="#40-F-2005" class="headerlink" title="40. F# - 2005"></a>40. F# - 2005</h3><p>F#是一门在.NET平台上开发的函数式、面向对象编程语言。F#源自与它高度兼容的OCaml，它们都属于ML语言这一系列的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printfn &quot;Hello, World!&quot;</span><br></pre></td></tr></table></figure>
<h3 id="41-Windows-PowerShell-2006"><a href="#41-Windows-PowerShell-2006" class="headerlink" title="41. Windows PowerShell - 2006"></a>41. Windows PowerShell - 2006</h3><p>Windows PowerShell是Microsoft开发的软件套件，包括命令行界面，称为PowerShell的脚本语言和开发套件。 从Windows 7开始，PowerShell已作为标准配置提供。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">echo <span class="string">"Hello, World!"</span></span><br></pre></td></tr></table></figure>
<h3 id="42-Clojure-2007"><a href="#42-Clojure-2007" class="headerlink" title="42. Clojure - 2007"></a>42. Clojure - 2007</h3><p>Clojure是编译型、跨平台的函数式编程语言，它可以安全、简单的开发分布式系统。Clojure是Lisp的三种主要方言之一。Clojure可以编译成Java字节码，JavaScript代码或者是.NET字节码，因此它可以运行在JVM、CLR和浏览器上。</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">(<span class="name">println</span> <span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="43-Go-2009"><a href="#43-Go-2009" class="headerlink" title="43. Go - 2009"></a>43. Go - 2009</h3><p>Go是一种编译型的支持并发的编程语言，它的设计受到了C和Pascal的启发，该语言由Google从Robert Griesemer，Rob Pike和Ken Thompson的最初概念开发而来。没错，这个Ken Thompson就是在1969年设计B语言的人！</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="44-Rust-2010"><a href="#44-Rust-2010" class="headerlink" title="44. Rust - 2010"></a>44. Rust - 2010</h3><p>Rust是由Mozilla设计并开发的一门多范式的编译型编程语言。Rust被设计为“安全、并发、实用的语言”，在某些方面支持函数式编程风格，面向对象编程。Rust被认为有望替代C++。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    println(<span class="string">"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="45-Dart-2011"><a href="#45-Dart-2011" class="headerlink" title="45. Dart - 2011"></a>45. Dart - 2011</h3><p>Dart是由Google开发的用于web应用的编程语言，它最初的目标是替代JavaScript。目前，Dart的目标还没有实现，开发人员的首要任务是可以将Dart转换成与所有现代浏览器兼容的JavaScript代码。Dart也可以用于服务端的开发。</p>
<p>Dart最近的势头很猛，主要是因为它是手机端流行框架Flutter的开发语言。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Hello, World!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="46-Kotlin-—-2011"><a href="#46-Kotlin-—-2011" class="headerlink" title="46. Kotlin — 2011"></a>46. Kotlin — 2011</h3><p>Kotlin是一门面向对象编程语言，支持静态类型，可以被编译成字节码运行在Java虚拟机上。也可以编译成JavaScript语言，或者在其他多个平台运行的语言。（感谢LLVM）2017年，Google使Kotlin成为继Java之后Android正式支持的第二种语言。如果你想学Kotlin，可以参考这些<a href="https://javarevisited.blogspot.com/2018/02/5-courses-to-learn-kotlin-programming-java-android.html" target="_blank" rel="noopener">课程</a>。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="47-Ceylon-2011"><a href="#47-Ceylon-2011" class="headerlink" title="47. Ceylon - 2011"></a>47. Ceylon - 2011</h3><p>Ceylon是由“红帽”创建的开源的强类型和静态类型的高级编程语言，它的语法类似于Java。可以将其编译成Java字节码和JavaScript。</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> hello() &#123;</span><br><span class="line">    print(<span class="string">"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="48-TypeScript-2012"><a href="#48-TypeScript-2012" class="headerlink" title="48. TypeScript - 2012"></a>48. TypeScript - 2012</h3><p>TypeScript是由微软开发的免费、开源的编程语言。用于改善和保护JavaScript代码的生产。TypeScript是JavaScript的超集，可以转换为JavaScript，以便由任何Web浏览器或JavaScript引擎解释。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello, World!"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="49-Julia-2012"><a href="#49-Julia-2012" class="headerlink" title="49. Julia - 2012"></a>49. Julia - 2012</h3><p>Julia是用于科学计算的高级、强大、动态的编程语言，使用的是其他类似开发环境（例如MATLAB、R或Python）的用户熟悉的语法。</p>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">println(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="50-Swift-2014"><a href="#50-Swift-2014" class="headerlink" title="50. Swift - 2014"></a>50. Swift - 2014</h3><p>Swift是一门编译型、多范式的编程语言，它简单、高效、安全。它由苹果开发并开源。使其成为与Objective-C一样开发iOS移动应用的解决方案。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>我们的旅行到此就要告一段落了，我想你介绍了50种语言的“Hello, World!“程序的写法。本文所提供的编程语言列表远非详尽。希望你能和我分享你喜欢的语言的“Hello, World!“程序。</p>
<h3 id="译者注"><a href="#译者注" class="headerlink" title="译者注"></a>译者注</h3><p>50种语言的发展来看，大多数语言的设计思想都是互相借鉴的。语言的发展也是逐渐演进的，但不是越强大的语言就越流行。一门语言想要变得流行也是需要一定的机遇的（例如Python），或者是需要有个优质的大腿（例如Java和Dart）。</p>
<p>我们把时间粒度再放粗一点，编程语言的发展趋势是逐渐趋近于自然语言的，这也说明<strong>编程首先是给人看的，然后才是指导计算机应该做什么操作。</strong>所以，请尽力写出整洁的代码。避免同事骂人。</p>
<p>为了响应作者，我先来一个，最近刚刚创造出来的文言文编程的“Hello, World!“程序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">吾有一言。曰「「問天地好在。」」。書之。</span><br></pre></td></tr></table></figure>
<h3 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h3><p><a href="https://medium.com/javarevisited/70-years-of-hello-world-with-50-programming-languages-2400de893a97" target="_blank" rel="noopener">https://medium.com/javarevisited/70-years-of-hello-world-with-50-programming-languages-2400de893a97</a></p>
]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ModelMapper的一次踩坑经历</title>
    <url>/2018/09/11/%E4%BD%BF%E7%94%A8ModelMapper%E7%9A%84%E4%B8%80%E6%AC%A1%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<p>在实际项目中，我们常常需要把两个相似的对象相互转换，其目的是在对外提供数据时需要将一部分敏感数据（例如：密码、加密token等）隐藏起来。最普通的方法是，新建一个对象，将需要的值逐个set进去。如果有多组需要这样转换的对象，那么就需要做很多只是get/set这样无意义的工作。<a id="more"></a></p>
<p>在这样的背景下，ModelMapper诞生了，它是一个简单、高效、智能的对象映射工具。它的使用非常简单，首先添加maven依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.modelmapper&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;modelmapper&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>然后就可以直接new出一个ModelMapper对象，并且调用其map方法将指定对象的值映射到另一个对象上了。</p>
<p>使用方法今天不做过多介绍，大家可以自行Google，找到ModelMapper的相关文档进行学习。今天要分享的时前几天无意间踩到的一个坑。我有两个类，PostDO和PostVO（这里只截取了部分字段，因此两个类的含义也不做解释了）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostDO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String commentId;</span><br><span class="line">    <span class="keyword">private</span> Long postId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> likeNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostVO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> like;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> likeNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在一个方法中，我试图将PostDO的一个对象映射到PostVO，因此我进行如下操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ModelMapper modelMapper = <span class="keyword">new</span> ModelMapper();</span><br><span class="line">        PostDO postDO = PostDO.builder().id(<span class="number">3L</span>).likeNum(<span class="number">0</span>).build();</span><br><span class="line">        PostVO postVO = modelMapper.map(postDO, PostVO<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(postVO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PostVO(id=<span class="number">3</span>, like=<span class="keyword">false</span>, likeNum=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>无异常，项目中likeNum字段的值是随着项目的进行递增的。当likeNum增加到2时，异常出现了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> org.modelmapper.MappingException: ModelMapper mapping errors:</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) Converter org.modelmapper.internal.converter.BooleanConverter@<span class="number">497470</span>ed failed to convert <span class="keyword">int</span> to <span class="keyword">boolean</span>.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> error</span><br><span class="line">	at org.modelmapper.internal.Errors.throwMappingExceptionIfErrorsExist(Errors.java:<span class="number">380</span>)</span><br><span class="line">	at org.modelmapper.internal.MappingEngineImpl.map(MappingEngineImpl.java:<span class="number">79</span>)</span><br><span class="line">	at org.modelmapper.ModelMapper.mapInternal(ModelMapper.java:<span class="number">554</span>)</span><br><span class="line">	at org.modelmapper.ModelMapper.map(ModelMapper.java:<span class="number">387</span>)</span><br><span class="line">	at Application.main(Application.java:<span class="number">7</span>)</span><br><span class="line">Caused by: org.modelmapper.MappingException: ModelMapper mapping errors:</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) Error mapping <span class="number">2</span> to <span class="keyword">boolean</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> error</span><br><span class="line">	at org.modelmapper.internal.Errors.toMappingException(Errors.java:<span class="number">258</span>)</span><br><span class="line">	at org.modelmapper.internal.converter.BooleanConverter.convert(BooleanConverter.java:<span class="number">49</span>)</span><br><span class="line">	at org.modelmapper.internal.converter.BooleanConverter.convert(BooleanConverter.java:<span class="number">27</span>)</span><br><span class="line">	at org.modelmapper.internal.MappingEngineImpl.convert(MappingEngineImpl.java:<span class="number">298</span>)</span><br><span class="line">	at org.modelmapper.internal.MappingEngineImpl.map(MappingEngineImpl.java:<span class="number">108</span>)</span><br><span class="line">	at org.modelmapper.internal.MappingEngineImpl.setDestinationValue(MappingEngineImpl.java:<span class="number">238</span>)</span><br><span class="line">	at org.modelmapper.internal.MappingEngineImpl.propertyMap(MappingEngineImpl.java:<span class="number">184</span>)</span><br><span class="line">	at org.modelmapper.internal.MappingEngineImpl.typeMap(MappingEngineImpl.java:<span class="number">148</span>)</span><br><span class="line">	at org.modelmapper.internal.MappingEngineImpl.map(MappingEngineImpl.java:<span class="number">113</span>)</span><br><span class="line">	at org.modelmapper.internal.MappingEngineImpl.map(MappingEngineImpl.java:<span class="number">70</span>)</span><br><span class="line">	... <span class="number">3</span> more</span><br></pre></td></tr></table></figure>
<p>提示int类型不能转换成boolean型，很明显。ModelMapper是将like字段映射到likeNum了。那么ModelMapper究竟是怎样进行映射的呢，我们一起来看一下ModelMapper的源码。</p>
<p>ModelMapper利用反射机制，获取到目标类的字段，并生成期望匹配的键值对，类似于这样。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1536677296/Blog/ModelMapper/ModelMapper1.png" alt="键值对"></p>
<p>接着对这些键值对进行遍历，逐个寻找源类中可以匹配的字段。首先会根据目标字段判断是否存在对应的映射，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mapping existingMapping = <span class="keyword">this</span>.typeMap.mappingFor(destPath);</span><br><span class="line"><span class="keyword">if</span> (existingMapping == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.matchSource(<span class="keyword">this</span>.sourceTypeInfo, mutator);</span><br><span class="line">    <span class="keyword">this</span>.propertyNameInfo.clearSource();</span><br><span class="line">    <span class="keyword">this</span>.sourceTypes.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果不存在，就调用matchSource方法，在源类中根据匹配规则寻找可以匹配的字段。匹配过程中，首先会判断目标字段的类型是否在类型列表中存在，如果存在，则可以根据名称，加入匹配的mappings中。如果不存在，则需要判断converterStore中是否存在能够应用于该字段的转换器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.destinationTypes.contains(destinationMutator.getType())) &#123;</span><br><span class="line">    <span class="keyword">this</span>.mappings.add(<span class="keyword">new</span> PropertyMappingImpl(<span class="keyword">this</span>.propertyNameInfo.getSourceProperties(), <span class="keyword">this</span>.propertyNameInfo.getDestinationProperties(), <span class="keyword">true</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    TypeMap&lt;?, ?&gt; propertyTypeMap = <span class="keyword">this</span>.typeMapStore.get(accessor.getType(), destinationMutator.getType(), (String)<span class="keyword">null</span>);</span><br><span class="line">    PropertyMappingImpl mapping = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (propertyTypeMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Converter&lt;?, ?&gt; propertyConverter = propertyTypeMap.getConverter();</span><br><span class="line">        <span class="keyword">if</span> (propertyConverter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mergeMappings(propertyTypeMap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.mappings.add(<span class="keyword">new</span> PropertyMappingImpl(<span class="keyword">this</span>.propertyNameInfo.getSourceProperties(), <span class="keyword">this</span>.propertyNameInfo.getDestinationProperties(), propertyTypeMap.getProvider(), propertyConverter));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        doneMatching = <span class="keyword">this</span>.matchingStrategy.isExact();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Iterator var9 = <span class="keyword">this</span>.converterStore.getConverters().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var9.hasNext()) &#123;</span><br><span class="line">            ConditionalConverter&lt;?, ?&gt; converter = (ConditionalConverter)var9.next();</span><br><span class="line">            MatchResult matchResult = converter.match(accessor.getType(), destinationMutator.getType());</span><br><span class="line">            <span class="keyword">if</span> (!MatchResult.NONE.equals(matchResult)) &#123;</span><br><span class="line">                mapping = <span class="keyword">new</span> PropertyMappingImpl(<span class="keyword">this</span>.propertyNameInfo.getSourceProperties(), <span class="keyword">this</span>.propertyNameInfo.getDestinationProperties(), <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">if</span> (MatchResult.FULL.equals(matchResult)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.mappings.add(mapping);</span><br><span class="line">                    doneMatching = <span class="keyword">this</span>.matchingStrategy.isExact();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.configuration.isFullTypeMatchingRequired()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.partiallyMatchedMappings.add(mapping);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mapping == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.intermediateMappings.put(accessor, <span class="keyword">new</span> PropertyMappingImpl(<span class="keyword">this</span>.propertyNameInfo.getSourceProperties(), <span class="keyword">this</span>.propertyNameInfo.getDestinationProperties(), <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认的转换器有11中：</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1536678691/Blog/ModelMapper/ModelMapper2.png" alt="转换器"></p>
<p>找到对应的converter后，converter的map方法返回一个MatchResult，MatchResult有三种结果：FULL、PARTIAL和NONE（即全部匹配，部分匹配和不匹配）。注意，这里有一个部分匹配，也就是我所踩到的坑，在对like进行匹配是，likeNum就被定义为部分匹配。因此，当likeNum大于2时，就不能被转换成boolean类型。</p>
<p>这里解决方法有两种，一种是在设置中，规定必须字段名完全匹配；另一种就是将匹配策略定义为严格。</p>
<p>设置方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">modelMapper.getConfiguration().setFullTypeMatchingRequired(<span class="keyword">true</span>);</span><br><span class="line">modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);</span><br></pre></td></tr></table></figure>
<p>到这里，ModelMapper会选出较为合适的源字段，但是如果匹配要求不高的话，ModelMapper可能会筛选出多个符合条件的字段，因此，还需要进一步过滤。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PropertyMappingImpl mapping;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.mappings.size() == <span class="number">1</span>) &#123;</span><br><span class="line">    mapping = (PropertyMappingImpl)<span class="keyword">this</span>.mappings.get(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mapping = <span class="keyword">this</span>.disambiguateMappings();</span><br><span class="line">    <span class="keyword">if</span> (mapping == <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.configuration.isAmbiguityIgnored()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.errors.ambiguousDestination(<span class="keyword">this</span>.mappings);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们看到，如果匹配到的结果只有1个，那么就返回这个结果；如果有多个，则会调用disambiguateMappings方法，去掉有歧义的结果。我们来看一下这个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PropertyMappingImpl <span class="title">disambiguateMappings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;ImplicitMappingBuilder.WeightPropertyMappingImpl&gt; weightMappings = <span class="keyword">new</span> ArrayList(<span class="keyword">this</span>.mappings.size());</span><br><span class="line">    Iterator var2 = <span class="keyword">this</span>.mappings.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">        PropertyMappingImpl mapping = (PropertyMappingImpl)var2.next();</span><br><span class="line">        ImplicitMappingBuilder.SourceTokensMatcher matcher = <span class="keyword">this</span>.createSourceTokensMatcher(mapping);</span><br><span class="line">        ImplicitMappingBuilder.DestTokenIterator destTokenIterator = <span class="keyword">new</span> ImplicitMappingBuilder.DestTokenIterator(mapping);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(destTokenIterator.hasNext()) &#123;</span><br><span class="line">            matcher.match(destTokenIterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> matchRatio = (<span class="keyword">double</span>)matcher.matches() / ((<span class="keyword">double</span>)matcher.total() + (<span class="keyword">double</span>)destTokenIterator.total());</span><br><span class="line">        weightMappings.add(<span class="keyword">new</span> ImplicitMappingBuilder.WeightPropertyMappingImpl(mapping, matchRatio));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collections.sort(weightMappings);</span><br><span class="line">    <span class="keyword">if</span> (((ImplicitMappingBuilder.WeightPropertyMappingImpl)weightMappings.get(<span class="number">0</span>)).ratio == ((ImplicitMappingBuilder.WeightPropertyMappingImpl)weightMappings.get(<span class="number">1</span>)).ratio) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((ImplicitMappingBuilder.WeightPropertyMappingImpl)weightMappings.get(<span class="number">0</span>)).mapping;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ModelMapper定义了一个权重，来判断源字段是否有歧义，这里根据驼峰式的规则（也可以设置为下划线），将源和目标字段名称进行拆分，根据 匹配数量/源token数+目标token数，得到一个匹配的比率，比率越大，说明匹配度越高。最终取得匹配权重最大的那个字段。其他字段被认为是有歧义的。</p>
<p>截至目前，默认的ModelMapper的map方法的工作原理已经介绍完了，中间可能有些遗漏的细节，或者哪里有说的不明白的地方，欢迎大家和我一起讨论。大家在用到ModelMapper时一定要注意字段名，如果有相近的字段名，必须认真核对匹配是否正确，必要时就采用严格匹配策略。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>吐血推荐珍藏的IDEA插件</title>
    <url>/2020/02/10/%E5%90%90%E8%A1%80%E6%8E%A8%E8%8D%90%E7%8F%8D%E8%97%8F%E7%9A%84IDEA%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>之前给大家推荐了一些我自己常用的VS Code插件，很多同学表示很受用，并私信我说要再推荐一些IDEA插件。作为一名职业Java程序员/业余js开发者，我平时还是用IDEA比较多，所以也确实珍藏了一些IDEA插件。今天就一并分享给大家。<a id="more"></a></p>
<p>在最开始，我还是想先介绍一下IDEA中如何安装插件，首先打开Preferences（菜单栏打开或者使用快捷键Command+,）在Windows版本中应该是Settings。然后选择Plugins一栏，就可以从右侧的MarketPlace中选择自己需要的插件进行安装了。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1581059914/Blog/Other/idea_plugins/idea.png" alt="idea插件"></p>
<h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><p>首先向我们走来的是Lombok。作为Java程序员，你还在为不断的写Getter/Setter方法而苦恼吗？你还在为每个Model类都要写类似的构造方法而感到烦恼吗？赶快试试Lombok吧，它可以有效帮助你解决这些问题，只需要一个注解，构造方法和Getter/Setter方法全部搞定，再也不用把时间浪费在无用功上了。</p>
<p>如果你还不是很了解Lombok的话，可以自己动手，到<a href="https://projectlombok.org/" target="_blank" rel="noopener">Lombok官网</a>学习一番，学完记得回来点赞。</p>
<p>最后展示一个简单的例子供大家参考。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1581059921/Blog/Other/idea_plugins/idea1.png" alt="lombok"></p>
<h3 id="String-Manipulation"><a href="#String-Manipulation" class="headerlink" title="String Manipulation"></a>String Manipulation</h3><p>String Manipulation插件是一款非常强大的插件，它可以对代码进行很多操作，如排序、去除空行、字符串格式转换、Encode/Decode。其中我最常用的是字符串格式转换。你可以通过点击右键选择String Manipulation或者使用快捷键Option + M来选择相应的功能。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1581061347/Blog/Other/idea_plugins/idea2.gif" alt="String Manipulation"></p>
<h3 id="stackoverflow"><a href="#stackoverflow" class="headerlink" title="stackoverflow"></a>stackoverflow</h3><p>作为一名高级CtrlCV工程师，我写代码有两大利器，一个是Google，另一个就是stackoverflow。两者相辅相成，帮我在编码的道路上越走越远。相信有不少同学跟我一样离不开stackoverflow，那么这款插件就会给你带来极大的方便，遇到问题怎么办？右键一下，点击「search stackoverflow」，大部分问题都可以轻松搞定。</p>
<h3 id="Rainbow-Brackets"><a href="#Rainbow-Brackets" class="headerlink" title="Rainbow Brackets"></a>Rainbow Brackets</h3><p>在推荐VS Code的插件时我们就介绍过一款叫做Bracket Pair Colorizer的插件，它可以把括号变成不同的颜色，我觉得这样分辨括号非常方便，看起来也比较美观。所以在IDEA中也使用了相同效果的插件，就是Rainbow Brackets。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1581062247/Blog/Other/idea_plugins/idea3.png" alt="Rainbow Brackets"></p>
<h3 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a>GsonFormat</h3><p>我们在接外部接口时，别人给了一串JSON串，我们在代码中需要将JSON中的字段封装到一个类中，一个一个输入挺麻烦的，这时GsonFormat就可以派上用场了。它可以帮助我们根据JSON中的key快速生成我们需要的类。</p>
<p>它的使用快捷键是Option + S</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1581066692/Blog/Other/idea_plugins/idea4.gif" alt="GsonFormat"></p>
<h3 id="Maven-Helper"><a href="#Maven-Helper" class="headerlink" title="Maven Helper"></a>Maven Helper</h3><p>如果你的项目使用的构建工具是Maven的话，这个插件就能帮你避免各种依赖冲突，安装好插件之后，打开pom文件，可以看到最下方有一个叫Dependency Analyzer的Tab，这里就可以看到你的哪些依赖是有冲突的，然后在右侧Exclude掉不需要的依赖。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1581063616/Blog/Other/idea_plugins/idea5.png" alt="Maven Helper"></p>
<h3 id="RestfulToolkit"><a href="#RestfulToolkit" class="headerlink" title="RestfulToolkit"></a>RestfulToolkit</h3><p>RestfulToolkit是一套辅助开发Restful服务的工具集，对于这个插件，我最常用的功能就是快速查找指定的url对应的方法。快捷键是Command + \</p>
<p>关于其他的一些功能，大家有兴趣的话可以直接访问该插件的<a href="https://plugins.jetbrains.com/plugin/10292-restfultoolkit" target="_blank" rel="noopener">homepage</a>。</p>
<p>以上这些就是我常用的IDEA插件了，没有太多花里胡哨的东西，大家如果有什么好用的插件也欢迎分享出来。</p>
]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>吐血推荐珍藏的Visual Studio Code插件</title>
    <url>/2019/11/11/%E5%90%90%E8%A1%80%E6%8E%A8%E8%8D%90%E7%8F%8D%E8%97%8F%E7%9A%84Visual-Studio-Code%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>作为一名Java工程师，由于工作需要，最近一个月一直在写NodeJS，这种经历可以说是一部辛酸史了。好在有神器Visual Studio Code陪伴，让我的这段经历没有更加困难。眼看这段经历要告一段落了，今天就来给大家分享一下我常用的一些VSC的插件。<a id="more"></a></p>
<p>VSC的插件安装方法很简单，只需要点击左侧最下方的插件栏选项，然后就可以搜索你想要的插件了。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573309990/Blog/js/vsc/vs3.gif" alt="extends install"></p>
<p>下面我们进入正题</p>
<h3 id="Material-Theme"><a href="#Material-Theme" class="headerlink" title="Material Theme"></a>Material Theme</h3><p>第一个是Material Theme，这个插件可以帮助我们修改主题色，帮助你摆脱只有黑色和白色的世界。当然你也可以通过修改setting文件来自定义主题颜色。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573310011/Blog/js/vsc/vs4.jpg" alt="Material Theme"></p>
<h3 id="Auto-Import"><a href="#Auto-Import" class="headerlink" title="Auto Import"></a>Auto Import</h3><p>在写Java时，通常我是直接在代码中写出类名，然后使用IDEA自动导入相应的包的，但是使用VSC时没有这个功能，这个问题就让我很困扰，这意味着作为高级crtlCV工程师，粘贴过来的代码无法直接使用，你还要去查一些引用是属于哪个包的，怎么导入。</p>
<p>而Auto Import帮我解决了这个大问题，它可以自动识别，解析和增加一些对应的包。有了它，我就可以继续做ctrlCV工程师了。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573310651/Blog/js/vsc/vs5.gif" alt="Auto Import"></p>
<h3 id="Import-Cost"><a href="#Import-Cost" class="headerlink" title="Import Cost"></a>Import Cost</h3><p>写过NodeJS的同学可能都会有一个体会，自己可能只写了几行代码，但是要安装的包竟然达到几个G，可能有些夸张，但是大量的node_modules真的很令人崩溃。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573311007/Blog/js/vsc/nj.jpg" alt="node_modules"></p>
<p>这时你需要的是Import Cost来帮你控制一下你导入包的大小。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573311163/Blog/js/vsc/vs6.gif" alt="Import Cost"></p>
<p>当你写了一个导入语句时，它会提醒你这个包的大小，如果你发现某个包太大时，就需要考虑一下你是否真的需要引入整个包了。</p>
<h3 id="Indent-Rainbow"><a href="#Indent-Rainbow" class="headerlink" title="Indent-Rainbow"></a>Indent-Rainbow</h3><p>这个插件是帮助你提升读代码的体验的，对于刚开始接触NodeJS的同学来说，读代码的时间往往比写代码的时间要多。如果项目过大时，新同学往往会迷失在很多的代码块中，分辨代码块只能靠行前缩紧数量。但是有时缩紧数量又无法一眼看出。而Indent-Rainbow就是用来帮你快速分辨代码的。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573312918/Blog/js/vsc/vs7.png" alt="Indent-Rainbow"></p>
<h3 id="Prettier-—-Code-Formatter"><a href="#Prettier-—-Code-Formatter" class="headerlink" title="Prettier — Code Formatter"></a>Prettier — Code Formatter</h3><p>Prettier插件是用来格式化代码的。</p>
<p>符合代码规范的代码可以说是一个工程师的脸面，而Prettier可以说是专门帮你维护脸面的插件。有了它，你在写代码时就可以肆无忌惮了，只需要在写完以后按一下对应的快捷键。你的代码就会马上变漂亮。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573313646/Blog/js/vsc/vs10.png" alt="Prettier"></p>
<h3 id="Sublime-Text-Keymap-and-Settings-Importer"><a href="#Sublime-Text-Keymap-and-Settings-Importer" class="headerlink" title="Sublime Text Keymap and Settings Importer"></a>Sublime Text Keymap and Settings Importer</h3><p>不知道有多少同学和我一样比较喜欢用Sublime Text。虽然ST3也非常强大，可以用来写JS代码，但是我觉得它还是比不上专业的IDE，所以我更喜欢把ST3当作「记事本」来用，如果你已经比较习惯了ST3的快捷键，并且不想因为使用VSC而改变这个习惯，那么就可以使用这个插件，它会在VSC中模仿ST3的快捷键设置。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573314683/Blog/js/vsc/vs12.png" alt="ST3"></p>
<p>你可以使用command+P来唤起命令窗口，然后输入<code>&gt;</code>开始像在ST3中那样操作。</p>
<h3 id="npm-Intellisense"><a href="#npm-Intellisense" class="headerlink" title="npm Intellisense"></a>npm Intellisense</h3><p>npm Intellisense插件可以帮助你将你想要的node modules补充完整。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573315069/Blog/js/vsc/vs14.gif" alt="npm Intellisense"></p>
<h3 id="File-Utils"><a href="#File-Utils" class="headerlink" title="File Utils"></a>File Utils</h3><p>File Utils在我看来是一个非常方（zhuang）便（bi）的插件，它可以帮助你不使用鼠标就可以创建、移动、删除文件。看起来是不是很酷。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573315346/Blog/js/vsc/vs19.gif" alt="File Utils"></p>
<h3 id="Bracket-Pair-Colorizer"><a href="#Bracket-Pair-Colorizer" class="headerlink" title="Bracket Pair Colorizer"></a>Bracket Pair Colorizer</h3><p>前面我们提到了缩紧的识别，这里还有一个括号颜色标识的插件。它可以把括号标为不同的颜色，方便识别括号匹配。这种插件我在IDEA中也会用，可以极大的提高读代码的效率。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573315991/Blog/js/vsc/vs20.png" alt="Bracket Pair Colorizer"></p>
<h3 id="Trailing-Spaces"><a href="#Trailing-Spaces" class="headerlink" title="Trailing Spaces"></a>Trailing Spaces</h3><p>这个插件会帮我们标出一些无用的尾部空格，如果发现，请立即删除它们。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573316228/Blog/js/vsc/vs25.png" alt="Trailing Spaces"></p>
<h3 id="WakaTime"><a href="#WakaTime" class="headerlink" title="WakaTime"></a>WakaTime</h3><p>这个插件很有意思，它会统计你编码的一些数据，例如各种语言的占比，日平均编码时间等。你可以用它来统计一下你每天大概的有效工作时间是多少，如果数据比较漂亮，可以不经意间让领导看到一下，哈哈哈。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573316810/Blog/js/vsc/vs27.png" alt="WakaTime"></p>
<h3 id="Vscode-icons"><a href="#Vscode-icons" class="headerlink" title="Vscode-icons"></a>Vscode-icons</h3><p>你是否对VSC的默认icon感到厌烦呢？你想直接通过图标看出某个文件的文件格式吗？Vscode-icons插件来帮你实现。</p>
<p>它会让文件的icon更加友好，也可以下载一些你喜欢的icon。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1573317020/Blog/js/vsc/vs32.gif" alt="Vscode-icons"></p>
<p>以上就是我常用的一些VSCode的插件。喜欢的同学可以直接去市场下载体验。这些插件可能大部分都是用于提升读代码，因为我最近也是读代码比较多。如果其他同学有好用的插件也可以分享出来。</p>
<p>后面我也会考虑分享一些IDEA的插件，做Java的同学可以期待一波。</p>
]]></content>
      <tags>
        <tag>技术杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>实用的工具，有趣的人</title>
    <url>/2018/09/07/%E5%AE%9E%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%EF%BC%8C%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%BA/</url>
    <content><![CDATA[<p>1998年的9月4日，拉里·佩奇和谢尔盖·布林将Google带到这个世界。就在前几天，Google刚刚过了20岁生日。经过20年的发展，Google早已不是当初的小作坊了，而是发展成为被大家公认的全球最大的搜索引擎公司。20年间，Google不仅在搜索技术上表现颇为出色，在大数据、云计算、AI等各个方面都有着巨大的贡献。<a id="more"></a></p>
<p>我们都知道，如今世界已经从互联网时代走向大数据时代。数据几乎已经成为各个互联网公司的命脉，数据分析师这一职位也应运而生（虽然我本人不是数据分析师），但是我对数据分析很感兴趣。刚刚过完20岁生日的Google这次可以算是给数据分析师和数据分析爱好者们送上了一份大礼（果然是大公司，自己过生日还给我们送礼）——一款叫做Google Dataset Search的搜索引擎。它是一款专门用来搜索数据集的搜索引擎，搜索结果中包括了数据集的创建者，发布时间，数据集的收集方式，数据集的使用条款以及对数据集的描述。</p>
<p>还记得我当初自学大数据知识的时候，每每到了想要亲自动手试一试的时候，总是为找不到合适的数据集而苦恼。最后，我决定自学Python爬虫，想要什么数据都自己动手爬。然而，这种工作还是挺繁琐的，也许对我这种自学的爱好者无所谓，反而还多掌握一门技术。但对于专门从事数据科学工作的人来说可能会觉得很痛苦。</p>
<p>随着Google Dataset Search的诞生，这种“巧妇难为无米之炊”的尴尬终于一去不复返了。现在你想要什么数据集都可以直接搜索，简直不要太方便。</p>
<p>这个网站的地址是：</p>
<p><a href="https://toolbox.google.com/datasetsearch" target="_blank" rel="noopener">https://toolbox.google.com/datasetsearch</a></p>
<p>可以访问的同学可以上去体验一下，目前还是Beta版，没办法访问的同学，看看这个界面先过过瘾吧。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1536333511/Blog/datasetSearch/dataset.png" alt="datasetSearch"></p>
<p>以上就是今天要介绍的实用的工具。下面再来介绍一个有趣的人，同样是和DataSet Search有关。</p>
<p>要介绍的这个人呢，作为程序员一定很熟悉，就是Linux之父Linus Torvalds。怀着对大神的崇敬之情，我今天用Dataset Search搜索了一下Linus。结果果然没有令我失望，先来展示一下搜素结果。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1536333521/Blog/datasetSearch/linus.png" alt="linus"></p>
<p>第一条是Linus Torvalds Rants，可以理解为Linus的粗话（这是什么鬼？黑人问号脸）。</p>
<p>我们注意到数据集的描述为Linus2012年到2015年邮件的粗话合集。到这里有些怀疑这个数据集的真实性，不过对大神崇敬之情驱动着我点了进去，看看大神是怎么骂人的，</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1536333529/Blog/datasetSearch/rants.png" alt="rants"></p>
<p>这是数据集的部分截图，链接也都是可以直接访问的。</p>
<p>总之，Linus大神说话还是挺文明的，这种做法也非常有Linus的风格。（这里顺便提一下，Linus曾经在Linux内核代码中记录了女儿的生日）怎么样，是不是今天才发现原来Linus是如此有趣的人？</p>
<p>最后，国内某公司CEO说要“再”次击败Google，我觉得他们首先还是要多做些像这样有意义的事吧。</p>
]]></content>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈Redis通信协议</title>
    <url>/2019/06/23/%E6%B5%85%E8%B0%88Redis%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>Redis客户端和服务器端使用的通信协议叫做RESP（Redis Serialization Protocol）。它是特意为Redis设计的，同时也可以用于其他软件工程。<a id="more"></a></p>
<p>RESP在以下事项之间进行妥协：</p>
<ul>
<li>实现简单</li>
<li>快速解析</li>
<li>可读性强</li>
</ul>
<p>RESP可以序列化多种不同的数据类型，比如：整型、字符串、数组。错误是一种特定的类型。Redis客户端把参数用数组来表示。回复的是一种特殊的数据格式。</p>
<p>RESP是二进制安全的，它不需要处理从一个进程到另一个进程的批量数据，因为采用的是前缀长度来传输批量数据。</p>
<p><em>注意：这里的协议只适用用与客户端-服务器通信。Redis集群使用的是不同的协议</em></p>
<p>一般情况下，RESP是一种简单的请求-响应式协议。二般情况是：</p>
<ul>
<li>Redis支持管道，所以有可能一次发送多个命令，然后一起响应</li>
<li>如果Redis客户端订阅了Pub/Sub频道，那么协议就会变成一种推送协议，当服务器接收到新的数据时会自动推送给客户端</li>
</ul>
<p>RESP协议支持的数据类型有：Simple Strings，Errors，Integers，Bulk Strings和Arrays。它的使用方法有：</p>
<ul>
<li>客户端以Bulk Strings数组的形式发送命令</li>
<li>服务器端返回的结果是协议支持的类型之一</li>
</ul>
<p>RESP协议中，上述类型是通过首个字节区分的：</p>
<ul>
<li><code>+</code>代表简单字符串（Simple Strings）</li>
<li><code>-</code>代表错误类型（Errors）</li>
<li><code>:</code>代表整型（Integers）</li>
<li><code>$</code>代表多行字符串（Bulk Strings）</li>
<li><code>*</code>代表数组（Arrays）</li>
</ul>
<p>此外，每一部分结束时，Redis统一使用“\r\n”表示结束。</p>
<p>看到这里你是否有疑问呢？为什么没有表示null的方法呢？别着急我们一会就会解释。</p>
<h5 id="RESP简单字符串"><a href="#RESP简单字符串" class="headerlink" title="RESP简单字符串"></a>RESP简单字符串</h5><p>简单字符串中不允许出现<code>\r</code>或<code>\n</code>，只能有一行。它用于以最小开销传输非二进制安全字符串，例如回复的OK</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"+OK\r\n"</span></span><br></pre></td></tr></table></figure>
<p>如果要发送二进制安全的字符串，应该使用多行字符串。</p>
<h5 id="RESP错误"><a href="#RESP错误" class="headerlink" title="RESP错误"></a>RESP错误</h5><p>RESP有特定的错误类型，它与简单字符串类似，只不过是把开头的<code>+</code>换成了<code>-</code>，而两者之间真正的区别是客户端将错误视为异常，而错误中的字符串只是表示错误信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"-Error message\r\n"</span></span><br></pre></td></tr></table></figure>
<p>当客户端收到错误信息时，通常会抛出一个异常。我们来看一些例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-ERR unknown <span class="built_in">command</span> <span class="string">'foobar'</span></span><br><span class="line">-WRONGTYPE Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure>
<p>从第一个字符“-”之后，到第一个空格或新的一行，这之间的字符串表示错误类型。这只是Redis的一种约定，并不是RESP的错误格式。</p>
<p>例如ERR是普通错误，而WRONGTYPE表示客户端试图对错误的数据类型执行操作。</p>
<h5 id="RESP整型"><a href="#RESP整型" class="headerlink" title="RESP整型"></a>RESP整型</h5><p>整型只是以<code>\r\n</code>结尾，以<code>:</code>开头的纯整数的字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:1000\r\n</span><br></pre></td></tr></table></figure>
<p>很多Redis命令都会返回整型，例如INCR、LLEN和LASTSAVE。</p>
<p>返回的整数需要在64位有符号整数范围内，同时也可以用于表示真或假。</p>
<h5 id="RESP多行字符串"><a href="#RESP多行字符串" class="headerlink" title="RESP多行字符串"></a>RESP多行字符串</h5><p>多行字符串是二进制安全的，最大长度是512MB。</p>
<p>多行字符串的编码方式如下：</p>
<ul>
<li>以<code>$</code>+数字开头，以<code>\r\n</code>结束</li>
<li>数据都是字符串</li>
<li>结尾是<code>\r\n</code></li>
</ul>
<p>所以“foobar”应该编码为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"<span class="variable">$6</span>\r\nfoobar\r\n"</span></span><br></pre></td></tr></table></figure>
<p>空字符串表示为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"<span class="variable">$0</span>\r\n\r\n"</span></span><br></pre></td></tr></table></figure>
<p>多行字符串也可以用来null</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"$-1\r\n"</span></span><br></pre></td></tr></table></figure>
<p>当服务器返回Null多行字符串时，正常客户端是不应该返回空字符串的，而是应该返回nil对象。</p>
<h5 id="RESP数组"><a href="#RESP数组" class="headerlink" title="RESP数组"></a>RESP数组</h5><p>客户端向服务器端发送命令时使用的就是RESP数组。类似的，某些命令返回的元素集合也是RESP数组的类型。</p>
<p>RESP数组遵循以下规则：</p>
<ul>
<li>第一个字符是<code>*</code>，后面跟的十进制数字是数组元素的数量，然后跟着<code>\r\n</code>。</li>
<li>每个元素都是RESP类型的</li>
</ul>
<p>空数组表示为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"*0\r\n"</span></span><br></pre></td></tr></table></figure>
<p>数组中的元素可以是不同类型的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*5\r\n</span><br><span class="line">:1\r\n</span><br><span class="line">:2\r\n</span><br><span class="line">:3\r\n</span><br><span class="line">:4\r\n</span><br><span class="line"><span class="variable">$6</span>\r\n</span><br><span class="line">foobar\r\n</span><br></pre></td></tr></table></figure>
<p>第一行的<code>*5\r\n</code>表示数组有5个元素，后面每行是一个元素。</p>
<p>RESP也有NULL数组的表示方法，这是NULL的另一种表示方法，通常用多行字符串的NULL来表示，不过由于历史原因，就保留了两种形式。</p>
<p>当BLPOP命令超时时，就会返回NULL数组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"*-1\r\n"</span></span><br></pre></td></tr></table></figure>
<p>当服务器返回NULL数组时，客户端应该返回null对象而不是空数组。</p>
<h5 id="数组中的NULL"><a href="#数组中的NULL" class="headerlink" title="数组中的NULL"></a>数组中的NULL</h5><p>数组中的元素可以是NULL，通常表示数组中某个元素缺失，而不是空字符串：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*3\r\n</span><br><span class="line"><span class="variable">$3</span>\r\n</span><br><span class="line">foo\r\n</span><br><span class="line">$-1\r\n</span><br><span class="line"><span class="variable">$3</span>\r\n</span><br><span class="line">bar\r\n</span><br></pre></td></tr></table></figure>
<p>其中第二个元素时NULL，客户端的返回结果应该是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">"foo"</span>,nil,<span class="string">"bar"</span>]</span><br></pre></td></tr></table></figure>
<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>到此我们已经了解了RESP协议，RESP中虽然有大量的冗余<code>\r\n</code>，但是仍然有很多开源项目使用。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>敲开通往架构师的门</title>
    <url>/2019/11/14/%E6%95%B2%E5%BC%80%E9%80%9A%E5%BE%80%E6%9E%B6%E6%9E%84%E5%B8%88%E7%9A%84%E9%97%A8/</url>
    <content><![CDATA[<p>最近学习了一些关于架构设计的知识想分享给大家。俗话说得好，不想当架构师的程序员不是好厨子。那么如何成为一名架构师呢？接下来就聊一聊我的一些想法。<a id="more"></a></p>
<h3 id="什么是架构师"><a href="#什么是架构师" class="headerlink" title="什么是架构师"></a>什么是架构师</h3><p>之前有同学问我，做了几年技术，应该转管理还是转架构师？对于这位同学，我给他的答案是，你要先踏踏实实做好现在的工作。因为就他提的问题来看，应该是刚入行不久或者是在校学生。</p>
<p>专心做技术的，都想做架构师。但架构师并不是说技术做时间长了可以转的。随着你的知识深度和广度的增加，在工作中会扮演更重要的角色，承担更大的责任，最终自然而然就会接触到架构设计的工作。</p>
<p>而架构师的主要工作，其实是利用架构设计知识以及丰富的工作经验，在设计架构时，结合实际情况，在不同的选项中做出取舍。</p>
<h3 id="架构设计的真正目的？"><a href="#架构设计的真正目的？" class="headerlink" title="架构设计的真正目的？"></a>架构设计的真正目的？</h3><p>为什么要进行架构设计？因为架构设计很重要？可是为什么重要呢？似乎说不清楚。</p>
<p>因为可以提升开发效率吗？也不一定，因为只有简单的设计才会使开发效率更高。而架构设计出于多方面考虑，不得已会引入一些复杂度，因此架构设计并不一定能提升开发效率。</p>
<p>是为了大多数口中的“高可用”、“高性能”、“可扩展”吗？其实也不是。我们的系统可能并不一定需要这些。</p>
<p>那架构设计的真正目的是什么呢？我认为架构设计的真正目的是与系统复杂度做斗争。</p>
<p>系统复杂度的来源有：<strong>高性能、高可用、可扩展性、低成本、安全、规模</strong>。</p>
<p>前面我们聊到有些系统可能不需要高可用、高性能。有些同学可能不理解，这些难道不是软件开发最基本的要求吗？这样的说法是存在一定偏差的。我们举一个简单的例子说明一下。</p>
<p>如果让你为一所学校设计一个学生信息管理系统。针对上述几个复杂度的来源，你会做出怎样的取舍？我们来逐条分析一下。</p>
<p>首先是高性能，学校的学生最多也就几万人，而且平时也不可能几万人同时用系统。因此我们并不需要考虑高性能。数据的CRUD直接用关系型数据库就足够了。</p>
<p>然后是高可用，对于学生系统而言，即使宕机几个小时，影响也不会太大。不过数据的可靠性还是要保证的，如果大量数据丢失而又没有备份的话，数据修复将会是一项繁重的工作。所以这里需要做一些数据高可靠的设计。</p>
<p>接下来是可扩展性，学生管理系统一般比较稳定，不会出现需要扩展的情况。因此我们也不太需要考虑可扩展性。</p>
<p>至此，我们在设计系统时习惯考虑的高可用、高性能和可扩展，在这个系统中都不需要过多关注了。我们再来看看剩下的几个复杂度来源。</p>
<p>关于低成本，由于我们并不需要高可用和高性能的设计，所以几台服务器的成本对于学校来说也不足为虑。</p>
<p>安全性而言，学生信息需要一定的安全保证，但也不必做到金融级安全。所以只需要做好数据库权限管理，登录密码管理就足够了。</p>
<p>最后是系统规模，学生管理系统往往不会很复杂。也不会迭代出许多功能。因此规模是比较固定且比较小的，不会带来很多的复杂度。</p>
<p>从我们的分析中可以看出，学生管理系统是一个并不复杂的系统，我们真正需要着重考虑的就只有数据高可靠和数据安全两方面。面对复杂的系统，我们也应该按照这个步骤来思考并设计出合理的架构。在合理的情况下，尽量减少系统的复杂度。</p>
<h3 id="架构设计原则"><a href="#架构设计原则" class="headerlink" title="架构设计原则"></a>架构设计原则</h3><p>前面我们提到，架构师的工作其实就是在多种选项中做出合理的取舍，取舍没有对错之分，只有是否合适一说。为了更好的做出选择，架构设计应该遵循三个原则：<strong>合适原则、简单原则、演化原则</strong>。下面我来一一介绍这三个原则。</p>
<h4 id="合适原则"><a href="#合适原则" class="headerlink" title="合适原则"></a>合适原则</h4><p>我们一直在说，架构设计中架构师要做出取舍，选择合适的架构。之所以一直强调合适，是因为我们在架构设计过程中需要结合实际情况来考虑。</p>
<p>那么脱离实际情况的设计通常是怎样发生的呢？不知道大家在开发时有没有遇到过这样的需求：“我们决定做一个电商网站，就按照淘宝做一个一模一样的吧。“这时作为开发的你一定是黑人问号脸，心里也会万马奔腾。</p>
<p>在架构设计时也是一样，最忌讳的就是不顾实际情况，盲目的使用业界最优的架构设计。有同学可能不太理解，使用最优设计有什么错呢？</p>
<p>这里我们所说的实际情况就是你的业务。试想如果你的业务刚刚起步，QPS刚过百，这时，你设计的架构是能支持1000QPS还是3000QPS对于系统来说没什么区别。但对于开发成本来说就提升了不止3倍。而对于这样的业务体量来说，开发团队一般只有十几人或几十人这样的规模。要让这样的团队来开发的话，大概率是无法完成的。</p>
<h4 id="演化原则"><a href="#演化原则" class="headerlink" title="演化原则"></a>演化原则</h4><p>聊完了合适原则，我们再来聊一聊演化原则。就像北京的城市规划一样，它一定是先有二环，慢慢向外扩建，才逐渐有了三四五六环。而我们现在所使用的大多数软件，也都是经过了许多版本的迭代才有了现在的功能。</p>
<p>对于一名合格的架构师来说，我们首先要遵循合适原则，然后再逐步演化。切不可想着一步到位，从而引起过度设计。当业务发展到一定阶段时，我们不可避免的会需要对架构进行扩展、重构甚至重写。在这一过程中，我们应该保留下好的设计，对不好的设计进行完善。就像淘宝的架构一样，它是经历了多次“双十一”之后，才有了现在这样能支撑每天上千亿成交额的架构。</p>
<p>因此，我们在设计架构时要遵循的第二个原则就是循序渐进的演化原则，而不是追求一步到位。</p>
<h4 id="简单原则"><a href="#简单原则" class="headerlink" title="简单原则"></a>简单原则</h4><p>最后再来说简单原则。前面我们也说了，架构设计其实是在和系统的复杂度做斗争。为什么要有简单原则？我认为原因主要有两点。</p>
<p>第一，复杂的架构开发成本更高。在开发资源有限的情况下，如果我们的架构设计很复杂，势必会提升开发成本。而对于当今飞速发展的市场来说，时间就是生命。如果你设计的架构开发周期非常长，那么公司也许就会放弃这个项目，那么架构也就没有存在的意义了。</p>
<p>第二，复杂的架构往往会带来更多的故障。举个栗子，电动牙刷和普通牙刷相比，坏的概率一定会高一点，电动牙刷可能出现刷头磨损，电路问题，充电故障等等，而普通牙刷只会出现刷头磨损的情况。也就是说，系统的组件越多，系统出现故障的概率也就越大。在此基础上还有一个问题就是，一旦出了故障，定位问题的速度而言，简单系统相较于复杂系统也有着很大的优势。</p>
<p>至此，架构设计的三个原则我们都已经聊完了。细心的同学可能注意到了，我在详细介绍时的顺序和最开始提到的顺序并不一致。这不是我不注意细节。而是我在详细介绍时，对这三个原则的重要程度排了一个顺序。这也是作为架构师的一种取舍，当三种原则无法同时满足时，应该以哪个为重？这里我的答案是<strong>合适&gt;演化&gt;简单</strong>。</p>
<p>关于架构设计，我已经有了一个大体的认识，不知道在读完本文以后你是否也有同样的感觉。如果有任何困惑，欢迎和我一起讨论交流。</p>
<p>最后，架构师是需要有很深的技术积累的，而我在这方面做得还不够。所以后面还是要以技术积累为主，同时也会尝试将架构设计的知识引入到日常工作中。后续有什么新的体会我会继续和大家分享。</p>
]]></content>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Redis的scan命令</title>
    <url>/2018/09/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Redis%E7%9A%84scan%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>熟悉Redis的人都知道，它是单线程的。因此在使用一些时间复杂度为O(N)的命令时要非常谨慎。可能一不小心就会阻塞进程，导致Redis出现卡顿。<a id="more"></a></p>
<p>有时，我们需要针对符合条件的一部分命令进行操作，比如删除以test_开头的key。那么怎么获取到这些key呢？在Redis2.8版本之前，我们可以使用keys命令按照正则匹配得到我们需要的key。但是这个命令有两个缺点：</p>
<ol>
<li>没有limit，我们只能一次性获取所有符合条件的key，如果结果有上百万条，那么等待你的就是“无穷无尽”的字符串输出。</li>
<li>keys命令是遍历算法，时间复杂度是O(N)。如我们刚才所说，这个命令非常容易导致Redis服务卡顿。因此，我们要尽量避免在生产环境使用该命令。</li>
</ol>
<p>在满足需求和存在造成Redis卡顿之间究竟要如何选择呢？面对这个两难的抉择，Redis在2.8版本给我们提供了解决办法——scan命令。</p>
<p>相比于keys命令，scan命令有两个比较明显的优势：</p>
<ol>
<li>scan命令的时间复杂度虽然也是O(N)，但它是分次进行的，不会阻塞线程。</li>
<li>scan命令提供了limit参数，可以控制每次返回结果的最大条数。</li>
</ol>
<p>这两个优势就帮助我们解决了上面的难题，不过scan命令也并不是完美的，它返回的结果有可能重复，因此需要客户端去重。至于为什么会重复，相信你看完本文之后就会有答案了。</p>
<p>关于scan命令的基本用法，可以参看<a href="https://jackeyzhe.github.io/2018/09/22/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AKeys/">Redis命令详解：Keys</a>一文中关于SCAN命令的介绍。</p>
<p>今天我们主要从底层的结构和源码的角度来讨论scan是如何工作的。</p>
<h4 id="Redis的结构"><a href="#Redis的结构" class="headerlink" title="Redis的结构"></a>Redis的结构</h4><p>Redis使用了Hash表作为底层实现，原因不外乎高效且实现简单。说到Hash表，很多Java程序员第一反应就是HashMap。没错，Redis底层key的存储结构就是类似于HashMap那样数组+链表的结构。其中第一维的数组大小为2<sup>n</sup>(n&gt;=0)。每次扩容数组长度扩大一倍。</p>
<p>scan命令就是对这个一维数组进行遍历。每次返回的游标值也都是这个数组的索引。limit参数表示遍历多少个数组的元素，将这些元素下挂接的符合条件的结果都返回。因为每个元素下挂接的链表大小不同，所以每次返回的结果数量也就不同。</p>
<h4 id="SCAN的遍历顺序"><a href="#SCAN的遍历顺序" class="headerlink" title="SCAN的遍历顺序"></a>SCAN的遍历顺序</h4><p>关于scan命令的遍历顺序，我们可以用一个小栗子来具体看一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"db_number"</span></span><br><span class="line">2) <span class="string">"key1"</span></span><br><span class="line">3) <span class="string">"myKey"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 0 MATCH * COUNT 1</span><br><span class="line">1) <span class="string">"2"</span></span><br><span class="line">2) 1) <span class="string">"db_number"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 2 MATCH * COUNT 1</span><br><span class="line">1) <span class="string">"1"</span></span><br><span class="line">2) 1) <span class="string">"myKey"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 1 MATCH * COUNT 1</span><br><span class="line">1) <span class="string">"3"</span></span><br><span class="line">2) 1) <span class="string">"key1"</span></span><br><span class="line">127.0.0.1:6379&gt; scan 3 MATCH * COUNT 1</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) (empty list or <span class="built_in">set</span>)</span><br></pre></td></tr></table></figure>
<p>我们的Redis中有3个key，我们每次只遍历一个一维数组中的元素。如上所示，SCAN命令的遍历顺序是</p>
<p>0-&gt;2-&gt;1-&gt;3</p>
<p>这个顺序看起来有些奇怪。我们把它转换成二进制就好理解一些了。</p>
<p>00-&gt;10-&gt;01-&gt;11</p>
<p>我们发现每次这个序列是高位加1的。普通二进制的加法，是从右往左相加、进位。而这个序列是从左往右相加、进位的。这一点我们在redis的源码中也得到印证。</p>
<p>在dict.c文件的dictScan函数中对游标进行了如下处理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v = rev(v);</span><br><span class="line">v++;</span><br><span class="line">v = rev(v);</span><br></pre></td></tr></table></figure>
<p>意思是，将游标倒置，加一后，再倒置，也就是我们所说的“高位加1”的操作。</p>
<p>这里大家可能会有疑问了，为什么要使用这样的顺序进行遍历，而不是用正常的0、1、2……这样的顺序呢，这是因为需要考虑遍历时发生字典扩容与缩容的情况（不得不佩服开发者考虑问题的全面性）。</p>
<p>我们来看一下在SCAN遍历过程中，发生扩容时，遍历会如何进行。加入我们原始的数组有4个元素，也就是索引有两位，这时需要把它扩充成3位，并进行rehash。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1538756520/Blog/Redis/rehash.png" alt="rehash"></p>
<p>原来挂接在xx下的所有元素被分配到0xx和1xx下。在上图中，当我们即将遍历10时，dict进行了rehash，这时，scan命令会从010开始遍历，而000和100（原00下挂接的元素）不会再被重复遍历。</p>
<p>再来看看缩容的情况。假设dict从3位缩容到2位，当即将遍历110时，dict发生了缩容，这时scan会遍历10。这时010下挂接的元素会被重复遍历，但010之前的元素都不会被重复遍历了。所以，缩容时还是可能会有些重复元素出现的。</p>
<h4 id="Redis的rehash"><a href="#Redis的rehash" class="headerlink" title="Redis的rehash"></a>Redis的rehash</h4><p>rehash是一个比较复杂的过程，为了不阻塞Redis的进程，它采用了一种渐进式的rehash的机制。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 字典 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    <span class="comment">// 类型特定函数</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="comment">// 私有数据</span></span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line">    <span class="comment">// 哈希表</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// rehash 索引</span></span><br><span class="line">    <span class="comment">// 当 rehash 不在进行时，值为 -1</span></span><br><span class="line">    <span class="keyword">int</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line">    <span class="comment">// 目前正在运行的安全迭代器的数量</span></span><br><span class="line">    <span class="keyword">int</span> iterators; <span class="comment">/* number of iterators currently running */</span></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure>
<p>在Redis的字典结构中，有两个hash表，一个新表，一个旧表。在rehash的过程中，redis将旧表中的元素逐步迁移到新表中，接下来我们看一下dict的rehash操作的源码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Performs N steps of incremental rehashing. Returns 1 if there are still</span></span><br><span class="line"><span class="comment"> * keys to move from the old to the new hash table, otherwise 0 is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that a rehashing step consists in moving a bucket (that may have more</span></span><br><span class="line"><span class="comment"> * than one key as we use chaining) from the old to the new hash table, however</span></span><br><span class="line"><span class="comment"> * since part of the hash table may be composed of empty spaces, it is not</span></span><br><span class="line"><span class="comment"> * guaranteed that this function will rehash even a single bucket, since it</span></span><br><span class="line"><span class="comment"> * will visit at max N*10 empty buckets in total, otherwise the amount of</span></span><br><span class="line"><span class="comment"> * work it does would be unbound and the function may block for a long time. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dictRehash</span><span class="params">(dict *d, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> empty_visits = n*<span class="number">10</span>; <span class="comment">/* Max number of empty buckets to visit. */</span></span><br><span class="line">    <span class="keyword">if</span> (!dictIsRehashing(d)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n-- &amp;&amp; d-&gt;ht[<span class="number">0</span>].used != <span class="number">0</span>) &#123;</span><br><span class="line">        dictEntry *de, *nextde;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Note that rehashidx can't overflow as we are sure there are more</span></span><br><span class="line"><span class="comment">         * elements because ht[0].used != 0 */</span></span><br><span class="line">        assert(d-&gt;ht[<span class="number">0</span>].size &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>)d-&gt;rehashidx);</span><br><span class="line">        <span class="keyword">while</span>(d-&gt;ht[<span class="number">0</span>].table[d-&gt;rehashidx] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            d-&gt;rehashidx++;</span><br><span class="line">            <span class="keyword">if</span> (--empty_visits == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        de = d-&gt;ht[<span class="number">0</span>].table[d-&gt;rehashidx];</span><br><span class="line">        <span class="comment">/* Move all the keys in this bucket from the old to the new hash HT */</span></span><br><span class="line">        <span class="keyword">while</span>(de) &#123;</span><br><span class="line">            <span class="keyword">uint64_t</span> h;</span><br><span class="line"></span><br><span class="line">            nextde = de-&gt;next;</span><br><span class="line">            <span class="comment">/* Get the index in the new hash table */</span></span><br><span class="line">            h = dictHashKey(d, de-&gt;key) &amp; d-&gt;ht[<span class="number">1</span>].sizemask;</span><br><span class="line">            de-&gt;next = d-&gt;ht[<span class="number">1</span>].table[h];</span><br><span class="line">            d-&gt;ht[<span class="number">1</span>].table[h] = de;</span><br><span class="line">            d-&gt;ht[<span class="number">0</span>].used--;</span><br><span class="line">            d-&gt;ht[<span class="number">1</span>].used++;</span><br><span class="line">            de = nextde;</span><br><span class="line">        &#125;</span><br><span class="line">        d-&gt;ht[<span class="number">0</span>].table[d-&gt;rehashidx] = <span class="literal">NULL</span>;</span><br><span class="line">        d-&gt;rehashidx++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if we already rehashed the whole table... */</span></span><br><span class="line">    <span class="keyword">if</span> (d-&gt;ht[<span class="number">0</span>].used == <span class="number">0</span>) &#123;</span><br><span class="line">        zfree(d-&gt;ht[<span class="number">0</span>].table);</span><br><span class="line">        d-&gt;ht[<span class="number">0</span>] = d-&gt;ht[<span class="number">1</span>];</span><br><span class="line">        _dictReset(&amp;d-&gt;ht[<span class="number">1</span>]);</span><br><span class="line">        d-&gt;rehashidx = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* More to rehash... */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过注释我们就能了解到，rehash的过程是以bucket为基本单位进行迁移的。所谓的bucket其实就是我们前面所提到的一维数组的元素。每次迁移一个列表。下面来解释一下这段代码。</p>
<ul>
<li>首先判断一下是否在进行rehash，如果是，则继续进行；否则直接返回。</li>
<li>接着就是分n步开始进行渐进式rehash。同时还判断是否还有剩余元素，以保证安全性。</li>
<li>在进行rehash之前，首先判断要迁移的bucket是否越界。</li>
<li>然后跳过空的bucket，这里有一个empty_visits变量，表示最大可访问的空bucket的数量，这一变量主要是为了保证不过多的阻塞Redis。</li>
<li>接下来就是元素的迁移，将当前bucket的全部元素进行rehash，并且更新两张表中元素的数量。</li>
<li>每次迁移完一个bucket，需要将旧表中的bucket指向NULL。</li>
<li>最后判断一下是否全部迁移完成，如果是，则收回空间，重置rehash索引，否则告诉调用方，仍有数据未迁移。</li>
</ul>
<p>由于Redis使用的是渐进式rehash机制，因此，scan命令在需要同时扫描新表和旧表，将结果返回客户端。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>走近源码：Redis命令执行过程（客户端）</title>
    <url>/2019/01/12/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/</url>
    <content><![CDATA[<p>前面我们了解过了当Redis执行一个命令时，服务端做了哪些事情，不了解的同学可以看一下这篇文章<a href="https://jackeyzhe.github.io/2019/01/05/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/">走近源码：Redis如何执行命令</a>。今天就一起来看看Redis的命令执行过程中客户端都做了什么事情。<a id="more"></a></p>
<h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><p>首先看redis-cli.c文件的main函数，也就是我们输入redis-cli命令时所要执行的函数。main函数主要是给config变量的各个属性设置默认值。比如：</p>
<ul>
<li>hostip：要连接的服务端的IP，默认为127.0.0.1</li>
<li>hostport：要连接的服务端的端口，默认为6379</li>
<li>interactive：是否是交互模式，默认为0（非交互模式）</li>
<li>一些模式的设置，例如：cluster_mode、slave_mode、getrdb_mode、scan_mode等</li>
<li>cluster相关的参数</li>
</ul>
<p>……</p>
<p>接着调用parseOptions()函数来处理参数，例如-p、-c、–verbose等一些用来指定config属性的（可以输入redis-cli –help查看）或是指定启动模式的。</p>
<p>处理完这些参数后，需要把它们从参数列表中去除，剩下用于在非交互模式中执行的命令。</p>
<p>parseEnv()用来判断是否需要验证权限，紧接着就是根据刚才的参数判断需要进入哪种模式，是cluster还是slave又或者是RDB……如果没有进入这些模式，并且没有需要执行的命令，那么就进入交互模式，否则会进入非交互模式。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Start interactive mode when no command is provided */</span></span><br><span class="line"><span class="keyword">if</span> (argc == <span class="number">0</span> &amp;&amp; !config.eval) &#123;</span><br><span class="line">    <span class="comment">/* Ignore SIGPIPE in interactive mode to force a reconnect */</span></span><br><span class="line">    signal(SIGPIPE, SIG_IGN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Note that in repl mode we don't abort on connection error.</span></span><br><span class="line"><span class="comment">     * A new attempt will be performed for every command send. */</span></span><br><span class="line">    cliConnect(<span class="number">0</span>);</span><br><span class="line">    repl();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Otherwise, we have some arguments to execute */</span></span><br><span class="line"><span class="keyword">if</span> (cliConnect(<span class="number">0</span>) != REDIS_OK) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (config.eval) &#123;</span><br><span class="line">    <span class="keyword">return</span> evalMode(argc,argv);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> noninteractive(argc,convertToSds(argc,argv));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h4><p>cliConnect()函数用于连接服务器，它的参数是一个标志位，如果是CC_FORCE（0）表示强制重连，如果是CC_QUIET（2）表示不打印错误日志。</p>
<p>如果建立了socket，那么就连接这个socket，否则就去连接指定的IP和端口。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (config.hostsocket == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    context = redisConnect(config.hostip,config.hostport);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    context = redisConnectUnix(config.hostsocket);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="redisConnect"><a href="#redisConnect" class="headerlink" title="redisConnect"></a>redisConnect</h5><p>redisConnect()（在deps/hiredis/hiredis.c文件中）函数用于连接指定的IP和端口的redis实例。它的返回值是redisContext类型的。这个结构封装了一些客户端与服务端之间的连接状态，obuf是用来存放返回结果的缓冲区，同时还有客户端与服务端的协议。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hiredis.h</span></span><br><span class="line"><span class="comment">/* Context for a connection to Redis */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisContext</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> err; <span class="comment">/* Error flags, 0 when there is no error */</span></span><br><span class="line">    <span class="keyword">char</span> errstr[<span class="number">128</span>]; <span class="comment">/* String representation of error when applicable */</span></span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> flags;</span><br><span class="line">    <span class="keyword">char</span> *obuf; <span class="comment">/* Write buffer */</span></span><br><span class="line">    redisReader *reader; <span class="comment">/* Protocol reader */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> redisConnectionType connection_type;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> *<span class="title">timeout</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> *host;</span><br><span class="line">        <span class="keyword">char</span> *source_addr;</span><br><span class="line">        <span class="keyword">int</span> port;</span><br><span class="line">    &#125; tcp;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="keyword">char</span> *path;</span><br><span class="line">    &#125; unix_sock;</span><br><span class="line"></span><br><span class="line">&#125; redisContext;</span><br></pre></td></tr></table></figure>
<p>redisConnect的实现比较简单，首先初始化一个redisContext变量，然后把客户端的flags字段设置为阻塞状态，接着调用redisContextConnectTcp命令。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">redisContext *<span class="title">redisConnect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *ip, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">    redisContext *c;</span><br><span class="line"></span><br><span class="line">    c = redisContextInit();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    c-&gt;flags |= REDIS_BLOCK;</span><br><span class="line">    redisContextConnectTcp(c,ip,port,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="redisContextConnectTcp"><a href="#redisContextConnectTcp" class="headerlink" title="redisContextConnectTcp"></a>redisContextConnectTcp</h5><p>redisContextConnectTcp()函数在net.c文件中，它调用的是_redisContextConnectTcp()这个函数，所以我们主要关注这个函数。它用来与服务端创建TCP连接，首先调整了tcp的host和timeout字段，然后getaddrinfo获取要连接的服务信息，这里兼容了IPv6和IPv4。然后尝试连接服务端。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (connect(s,p-&gt;ai_addr,p-&gt;ai_addrlen) == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (errno == EHOSTUNREACH) &#123;</span><br><span class="line">        redisContextCloseFd(c);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EINPROGRESS &amp;&amp; !blocking) &#123;</span><br><span class="line">        <span class="comment">/* This is ok. */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EADDRNOTAVAIL &amp;&amp; reuseaddr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (++reuses &gt;= REDIS_CONNECT_RETRIES) &#123;</span><br><span class="line">            <span class="keyword">goto</span> error;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            redisContextCloseFd(c);</span><br><span class="line">            <span class="keyword">goto</span> addrretry;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (redisContextWaitReady(c,timeout_msec) != REDIS_OK)</span><br><span class="line">            <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>connect()函数用于去连接服务器，连接上之后，服务器端会调用accept函数。如果连接失败，也会根据情况决定是否要关闭redisContext文件描述符。</p>
<h4 id="发送命令并接收返回"><a href="#发送命令并接收返回" class="headerlink" title="发送命令并接收返回"></a>发送命令并接收返回</h4><p>当客户端和服务端建立连接之后，客户端向服务器端发送命令并接收返回值了。</p>
<h5 id="repl"><a href="#repl" class="headerlink" title="repl"></a>repl</h5><p>我们回到redis-cli.c文件中的repl()函数，这个函数就是用来向服务器端发送命令并且接收到的结果返回。</p>
<p>这里首先调用了cliInitHelp()和cliIntegrateHelp()这两个函数，初始化了一些帮助信息，然后设置了一些回调的方法。如果是终端模式，则会从rc文件中加载历史命令。然后调用linenoise()函数读取用户输入的命令，并以空格分隔参数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">nread = read(l.ifd,&amp;c,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>接下来是判断是否需要过滤掉重复的参数。</p>
<h5 id="issueCommandRepeat"><a href="#issueCommandRepeat" class="headerlink" title="issueCommandRepeat"></a>issueCommandRepeat</h5><p>生成好命令后，就调用issueCommandRepeat()函数开始执行命令。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">issueCommandRepeat</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">long</span> repeat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        config.cluster_reissue_command = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (cliSendCommand(argc,argv,repeat) != REDIS_OK) &#123;</span><br><span class="line">            cliConnect(CC_FORCE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* If we still cannot send the command print error.</span></span><br><span class="line"><span class="comment">             * We'll try to reconnect the next time. */</span></span><br><span class="line">            <span class="keyword">if</span> (cliSendCommand(argc,argv,repeat) != REDIS_OK) &#123;</span><br><span class="line">                cliPrintContextError();</span><br><span class="line">                <span class="keyword">return</span> REDIS_ERR;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">/* Issue the command again if we got redirected in cluster mode */</span></span><br><span class="line">         <span class="keyword">if</span> (config.cluster_mode &amp;&amp; config.cluster_reissue_command) &#123;</span><br><span class="line">            cliConnect(CC_FORCE);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数会调用cliSendCommand()函数，将命令发送给服务器端，如果发送失败，会强制重连一次，然后再次发送命令。</p>
<h5 id="redisAppendCommandArgv"><a href="#redisAppendCommandArgv" class="headerlink" title="redisAppendCommandArgv"></a>redisAppendCommandArgv</h5><p>cliSendCommand()函数又会调用redisAppendCommandArgv()函数（在hiredis.c文件中）这个函数是按照<a href="https://redis.io/topics/protocol" target="_blank" rel="noopener">Redis协议</a>将命令进行编码。</p>
<h5 id="cliReadReply"><a href="#cliReadReply" class="headerlink" title="cliReadReply"></a>cliReadReply</h5><p>然后调用cliReadReply()函数，接收服务器端返回的结果，调用cliFormatReplyRaw()函数将结果进行编码并返回。</p>
<h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><p>我们以GET命令为例，具体描述一下，从客户端到服务端，程序是如何运行的。</p>
<p>我们用gdb调试redis-server，将断点设置到readQueryFromClient函数这里。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb src/redis-server </span><br><span class="line">GNU gdb (Ubuntu 8.1-0ubuntu3) 8.1.0.20180409-git</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</span><br><span class="line">Reading symbols from src/redis-server...done.</span><br><span class="line">(gdb) b readQueryFromClient</span><br><span class="line">Breakpoint 1 at 0x43c520: file networking.c, line 1379.</span><br><span class="line">(gdb) run redis.conf</span><br></pre></td></tr></table></figure>
<p>然后再调试redis-cli，断点设置cliReadReply函数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb src/redis-cli </span><br><span class="line">GNU gdb (Ubuntu 8.1-0ubuntu3) 8.1.0.20180409-git</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</span><br><span class="line">Reading symbols from src/redis-cli...done.</span><br><span class="line">(gdb) b cliReadReply</span><br><span class="line">Breakpoint 1 at 0x40ffa0: file redis-cli.c, line 845.</span><br><span class="line">(gdb) run</span><br></pre></td></tr></table></figure>
<p>在客户端输入get命令，发现程序在断点处停止。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get jackey</span><br><span class="line"></span><br><span class="line">Breakpoint 1, cliReadReply (output_raw_strings=output_raw_strings@entry=0)</span><br><span class="line">    at redis-cli.c:845</span><br><span class="line">845	static int cliReadReply(int output_raw_strings) &#123;</span><br></pre></td></tr></table></figure>
<p>我们可以看到这时Redis已经准备好将命令发送给服务端了，先来查看一下要发送的内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) p context-&gt;obuf</span><br><span class="line"><span class="variable">$1</span> = 0x684963 <span class="string">"*2\r\n<span class="variable">$3</span>\r\nget\r\n<span class="variable">$6</span>\r\njackey\r\n"</span></span><br></pre></td></tr></table></figure>
<p>把\r\n替换成换行符看的后是这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*2</span><br><span class="line"><span class="variable">$3</span></span><br><span class="line">get</span><br><span class="line"><span class="variable">$6</span></span><br><span class="line">jackey</span><br></pre></td></tr></table></figure>
<p>*2表示命令参数的总数，包括命令的名字，也就是告诉服务端应该处理两个参数。</p>
<p>$3表示第一个参数的长度。</p>
<p>get是命令名，也就是第一个参数。</p>
<p>$6表示第二个参数的长度。</p>
<p>jackey是第二个参数。</p>
<p>当程序运行到redisGetReply时就会把命令发送给服务端了，这时我们再来看服务端的运行情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Thread 1 <span class="string">"redis-server"</span> hit Breakpoint 1, readQueryFromClient (</span><br><span class="line">    el=0x7ffff6a41050, fd=7, privdata=0x7ffff6b1e340, mask=1)</span><br><span class="line">    at networking.c:1379</span><br><span class="line">1379	void readQueryFromClient(aeEventLoop *el, int fd, void *privdata, int mask) &#123;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<p>程序调整到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sdsIncrLen(c-&gt;querybuf,nread);</span><br></pre></td></tr></table></figure>
<p>这时nread的内容会被加到c-&gt;querybuf中，我们来看一下是不是我们发送过来的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) p c-&gt;querybuf</span><br><span class="line"><span class="variable">$1</span> = (sds) 0x7ffff6a75cc5 <span class="string">"*2\r\n<span class="variable">$3</span>\r\nget\r\n<span class="variable">$6</span>\r\njackey\r\n"</span></span><br></pre></td></tr></table></figure>
<p>到这里，Redis的服务端已经接受到请求了。接下来就是处理命令的过程，前文我们提到Redis是在processCommand()函数中处理的。</p>
<p>processCommand()函数会调用lookupCommand()函数，从redisCommandTable表中查询出要执行的函数。然后调用c-&gt;cmd-&gt;proc(c)执行这个函数，这里我们get命令对应的是getCommand函数，getCommand里只是调用了getGenericCommand()函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//t_string.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getGenericCommand</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    robj *o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((o = lookupKeyReadOrReply(c,c-&gt;argv[<span class="number">1</span>],shared.null[c-&gt;resp])) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (o-&gt;type != OBJ_STRING) &#123;</span><br><span class="line">        addReply(c,shared.wrongtypeerr);</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        addReplyBulk(c,o);</span><br><span class="line">        <span class="keyword">return</span> C_OK;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>lookupKeyReadOrReply()用来查找指定key存储的内容。并返回一个Redis对象，它的实现在db.c文件中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">robj *<span class="title">lookupKeyReadOrReply</span><span class="params">(client *c, robj *key, robj *reply)</span> </span>&#123;</span><br><span class="line">    robj *o = lookupKeyRead(c-&gt;db, key);</span><br><span class="line">    <span class="keyword">if</span> (!o) addReply(c,reply);</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在lookupKeyReadWithFlags函数中，会先判断这个key是否过期，如果没有过期，则会继续调用lookupKey()函数进行查找。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">robj *<span class="title">lookupKey</span><span class="params">(redisDb *db, robj *key, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    dictEntry *de = dictFind(db-&gt;dict,key-&gt;ptr);</span><br><span class="line">    <span class="keyword">if</span> (de) &#123;</span><br><span class="line">        robj *val = dictGetVal(de);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Update the access time for the ageing algorithm.</span></span><br><span class="line"><span class="comment">         * Don't do it if we have a saving child, as this will trigger</span></span><br><span class="line"><span class="comment">         * a copy on write madness. */</span></span><br><span class="line">        <span class="keyword">if</span> (server.rdb_child_pid == <span class="number">-1</span> &amp;&amp;</span><br><span class="line">            server.aof_child_pid == <span class="number">-1</span> &amp;&amp;</span><br><span class="line">            !(flags &amp; LOOKUP_NOTOUCH))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (server.maxmemory_policy &amp; MAXMEMORY_FLAG_LFU) &#123;</span><br><span class="line">                updateLFU(val);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                val-&gt;lru = LRU_CLOCK();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个函数中，先调用了dictFind函数，找到key对应的entry，然后再从entry中取出val。</p>
<p>找到val后，我们回到getGenericCommand函数中，它会调用addReplyBulk函数，将返回值添加到client结构的buf字段。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) p c-&gt;buf</span><br><span class="line"><span class="variable">$18</span> = <span class="string">"<span class="variable">$3</span>\r\nzhe\r\n\n<span class="variable">$8</span>\r\nflushall\r\n:-1\r\n"</span>, <span class="string">'\000'</span> &lt;repeats 16354 <span class="built_in">times</span>&gt;</span><br></pre></td></tr></table></figure>
<p>到这里，get命令的处理过程已经完结了，剩下的事情就是将结果返回给客户端，并且等待下次命令。</p>
<p>客户端收到返回值后，如果是控制台输出，则会调用cliFormatReplyTTY对结果进行解析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) n</span><br><span class="line">912	                out = cliFormatReplyTTY(reply,<span class="string">""</span>);</span><br><span class="line">(gdb) n</span><br><span class="line">918	        fwrite(out,sdslen(out),1,stdout);</span><br><span class="line">(gdb) p out</span><br><span class="line"><span class="variable">$5</span> = (sds) 0x6949b3 <span class="string">"\"zhe\"\n"</span></span><br></pre></td></tr></table></figure>
<p>最后将结果输出。</p>
<h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><p><a href="https://jackeyzhe.github.io/2019/01/05/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/#more">走近源码：Redis如何执行命令</a></p>
<p><a href="https://pauladamsmith.com/blog/2011/03/redis_get_set.html" target="_blank" rel="noopener">More Redis internals: Tracing a GET &amp; SET</a></p>
<p><a href="https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf" target="_blank" rel="noopener">GDB cheatsheet </a></p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Redis集群之Sentinel</title>
    <url>/2018/11/04/%E7%8E%A9%E8%BD%ACRedis%E9%9B%86%E7%BE%A4%E4%B9%8BSentinel/</url>
    <content><![CDATA[<p>Redis作为内存数据库，需要具备高可用的特点，不然如果服务器宕机，还在内存里的数据就会丢失。我们最常用的高可用方法就是搭建集群，master机器挂了，可以让slave机器顶上，继续提供服务。但是Redis集群是不会自动进行主从切换的，也就是说，如果主节点非常不争气的在凌晨3点挂了，那么运维同学就要马上起床，把从节点改成主节点，这样的操作是非常繁琐低效的。为此，Redis官方提供了一种解决方案：Redis Sentinel<a id="more"></a></p>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Redis Sentinel集群通常由3到5个节点组成，如果个别节点挂了，集群还可以正常运作。它负责监控Redis集群的健康情况。如果主节点挂掉，Sentinel集群会通过投票选择一个新的主节点。当原来的主节点恢复时，它会被当做新的主节点的从节点重新加入Redis集群。</p>
<h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>Sentinel集群通过指定的配置文件发现master，对其进行监控，并且会发送info指令获取master的从节点信息。Sentinel集群中的节点通过向其监控的主从节点发送hello信息（包含Sentinel本身的ip、端口和id等内容）来向其他Sentinel宣告自己的存在。</p>
<p>Sentinel集群通过订阅连接来接收其他Sentinel的hello信息。</p>
<p>Sentinel集群通过ping命令来检查监控的实例状态，如果在指定时间内没有返回，则认为该实例下线。</p>
<p>Sentinel触发failover主从切换后，并不会马上进行，只有指定(quorum)Sentinel授权后，master节点被标记为ODOWN状态。这时才真正开始投票选择新的master。</p>
<p>Sentinel选择新的master的原则是：首先判断优先级，选择优先级较小的；如果优先级相同，查看复制下标，选择复制数据较多的；如果复制下标也相同，就选择进程ID较小的。</p>
<p>Sentinel被授权后，它将会获得宕掉的master的一份最新配置版本号(config-epoch)，当failover执行结束以后，这个版本号将会被用于最新的配置，通过广播形式通知其它Sentinel，其它的Sentinel则更新对应master的配置。</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>我们以Python为例，简单说明一下在客户端如何使用Sentinel</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redis.sentinel <span class="keyword">import</span> Sentinel</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sentinel = Sentinel([<span class="string">'localhost'</span>, <span class="number">26379</span>], socket_timeout=<span class="number">0.1</span>)</span><br><span class="line">    print(sentinel.discover_master(<span class="string">'mymaster'</span>))</span><br><span class="line">    print(sentinel.discover_slaves(<span class="string">'mymaster'</span>))</span><br><span class="line">    master = sentinel.master_for(<span class="string">'mymaster'</span>, socket_timeout=<span class="number">0.1</span>)</span><br><span class="line">    slave = sentinel.slave_for(<span class="string">'mymaster'</span>, socket_timeout=<span class="number">0.1</span>)</span><br><span class="line">    master.set(<span class="string">'follow'</span>, <span class="string">'Jackeyzhe2018'</span>)</span><br><span class="line">    follow = slave.get(<span class="string">'follow'</span>)</span><br><span class="line">    print(follow)</span><br></pre></td></tr></table></figure>
<p>master_for和slave_for方法会从连接池中拿出一个连接来使用，如果从地址有多个，则会采用轮询的方法。</p>
<p>当redis发生了主从切换时，客户端如何知道地址已经变更了呢？我们从redis-py的源码里找一找答案。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1541434700/Blog/Redis/redis-py.png" alt="redis-py"></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1541434964/Blog/Redis/redis-py2.png" alt="get_master_address"></p>
<p>可以看到，redis在创建一个新的连接时，会调用get_master_address方法来获取主节点地址。get_master_address方法中，客户端先查询主节点地址，然后与内存中的地址进行比较。如果不一致，则会断开连接，然后使用新的地址重新进行连接。</p>
<p>如果主节点没有挂，而Sentinel主动进行了主从切换，对于这种情况redis-py也做了处理。就是捕获一个ReadOnlyError的异常，然后断开连接，后续指令都需要重新进行连接了。当然，如果没有修改性指令，那么连接就不会切换，不过数据也不会被破坏，所以影响不大。</p>
<h4 id="动手搭建"><a href="#动手搭建" class="headerlink" title="动手搭建"></a>动手搭建</h4><p>关于Sentinel的工作原理和使用方法我们已经有了大概的认识，为了加深理解，我们来自己动手搭建一套Sentinel集群。</p>
<p>首先搭建我们我需要的redis集群环境</p>
<p>安装好redis后，将redis目录下的配置文件redis.conf复制3份。分别命名为redis6379.conf，redis6380.conf，redis6381.conf。</p>
<p>在redis6381.conf文件中修改以下几项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line">port 6381</span><br><span class="line">logfile <span class="string">"6381.log"</span></span><br><span class="line">dbfilename <span class="string">"dump-6381.rdb"</span></span><br></pre></td></tr></table></figure>
<p>在redis6379.conf中修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">logfile <span class="string">"6379.log"</span></span><br><span class="line">dbfilename <span class="string">"dump-6379.rdb"</span></span><br><span class="line">slaveof 127.0.0.1 6381</span><br></pre></td></tr></table></figure>
<p>redis6380.conf的修改参照redis6379.conf。修改完成后，分别启动三个实例。就搭建好了我们想要的redis主从环境了。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1541481896/Blog/Redis/redis-group.png" alt="master-slave"></p>
<p>我们连接上master节点，可以看到它的主从配置信息</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1541481909/Blog/Redis/redis-master.png" alt="master"></p>
<p>接着，我们来配置Sentinel集群。这里我们同样配置三个实例。复制3份sentinel.conf文件，分别命名为sentinel-26379.conf，sentinel-26380.conf和sentinel-26381.conf。</p>
<p>sentinel-26379.conf文件中编辑以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 26379  </span><br><span class="line">daemonize yes  </span><br><span class="line">logfile <span class="string">"26379.log"</span>  </span><br><span class="line">dir /home/xxx/redis/data  </span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6381 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000  </span><br><span class="line">sentinel parallel-syncs mymaster 1  </span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br></pre></td></tr></table></figure>
<p>sentinel-26380.conf和sentinel-26381.conf的内容与上述类似。配置好后，我们使用命令redis-sentinel来启动3个sentinel实例。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1541481923/Blog/Redis/redis-sentinel.png" alt="redis-sentinel"></p>
<p>此时，我们用redis-cli命令连接26379的实例，查看sentinel的信息。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1541481877/Blog/Redis/info-sentinel.png" alt="sentinel-info"></p>
<p>发现它已经开始监控我们的3个redis节点了。这时我们的整个集群就部署好了，接下来测试一下。</p>
<p>kill掉master节点，查看sentinel的日志，会发现sentinel已经按照我们前面说的步骤选择了新的master。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1541481931/Blog/Redis/sentinel-log.png" alt="sentinel-log"></p>
<p>此时再来看sentinel信息。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1541481866/Blog/Redis/after-vote.png" alt="new-master"></p>
<p>此时，6380已经成了新的master。</p>
<p>恭喜你，以后都不需要在凌晨起床切换Redis主从实例了。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>走近源码：Redis如何执行命令</title>
    <url>/2019/01/05/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><a href="https://jackeyzhe.github.io/2019/01/04/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/">前文</a>我们了解了Redis的启动过程。在initServer()函数中创建了一些循环事件来监听TCP端口和Unix的Sockets，从而使Redis服务器可以接收新的连接。今天我们再一起来看一下Redis究竟是如何处理命令并返回结果的。<a id="more"></a></p>
<h5 id="处理新连接"><a href="#处理新连接" class="headerlink" title="处理新连接"></a>处理新连接</h5><p>Redis在initServer()函数中创建循环事件调用了acceptTcpHandler和acceptUnixHandler函数（都在networking.c文件中）来处理接收到的TCP连接和Unix的Sockets连接。这两个函数又调用了acceptCommonHandler()函数，在这个函数中调用了createClient()函数创建一个新的client对象，用来表示一个新的客户端连接。</p>
<p>createClient()函数具体做了哪些事情呢？</p>
<p>首先为变量c分配了内存，接着将Socket连接置为非阻塞状态，并且设置了TCP无延迟。然后创建了File循环事件（aeCreateFileEvent）来调用readQueryFromClient函数。新建的客户端默认连接的是服务器的第一个数据库（编码为0），最后需要设置好客户端的各种属性和状态。</p>
<h5 id="读一个客户端的命令"><a href="#读一个客户端的命令" class="headerlink" title="读一个客户端的命令"></a>读一个客户端的命令</h5><p>刚刚我们提到了readQueryFromClient函数，从名称上就能看出来这个函数是用来从客户端读取命令的。下面来看看函数的具体实现。</p>
<p>Redis会先将命令读入缓冲区，一次最多读取的大小是PROTO_IOBUF_LEN（1024*16）bit。然后调用processInputBufferAndReplicate()函数，来处理缓冲区中的数据，如果客户端是master（主从同步过程），那么Redis会计算处理前后缓冲区的不同部分，以确定从节点接收了多少数据。processInputBufferAndReplicate()函数会处理客户端向服务器发送命令和主节点向从节点发送命令这两种情况，不过最后都需要调用processInputBuffer()函数。</p>
<p>processInputBuffer()函数会先判断客户端是否正常，如果出现连接中断或者客户端阻塞等情况，就会立即停止处理命令，不做无用功。然后根据读取的请求生成相应的Redis可以执行的命令（包括参数）。不同的请求类型分别调用processInlineBuffer()和processMultibulkBuffer()函数。生成好命令之后，交给processCommand()（server.c文件中）函数执行，如果返回C_OK则重置客户端，等待下一个命令。如果返回的是C_ERR，则客户端会被销毁（比如执行QUIT命令）。</p>
<p>processCommand()函数会从Redis启动时加载的命令表中查找命令，然后检查命令的执行权限。</p>
<p>如果是cluster，这时会判断key是否属于当前的master，不属于需要返回重定向信息。</p>
<p>如果内存不够用，这里也需要判断一下是否有可以释放的内存，如果没有，就不能执行命令，返回错误信息。</p>
<p>接下来会判断一些不能接收写命令的情况：</p>
<ul>
<li>服务器不能进行持久化</li>
<li>作为master，没有足够的可用的slave</li>
<li>此服务器为只读的slave，只有它的master可以接收写命令</li>
</ul>
<p>在订阅模式中，只能接收指定的命令：(P)SUBSCRIBE / (P)UNSUBSCRIBE / PING / QUIT。</p>
<p>当slave和master失联时，只能接收有flag “t”的命令，例如，INFO，SLAVEOF等。</p>
<p>如果命令没有CMD_LOADING标志，并且当前服务器正在加载数据，则不能接收此命令。</p>
<p>对lua脚本的长度进行限制。</p>
<p>进行完上面的各种条件判断之后，才可以真正开始调用call()函数执行命令。</p>
<h5 id="执行命令并返回"><a href="#执行命令并返回" class="headerlink" title="执行命令并返回"></a>执行命令并返回</h5><p>call()函数的参数是client类型的，取出cmd成员进行执行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Call the command. */</span></span><br><span class="line">dirty = server.dirty;</span><br><span class="line">start = ustime();</span><br><span class="line">c-&gt;cmd-&gt;proc(c);</span><br><span class="line">duration = ustime()-start;</span><br><span class="line">dirty = server.dirty-dirty;</span><br><span class="line"><span class="keyword">if</span> (dirty &lt; <span class="number">0</span>) dirty = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>如果是写命令，就会使服务器变“脏”，也就是服务器需要标记一下内存中的某些页有了改变。这对于Redis的持久化来说非常重要，它可以知道这个命令影响了多少个key。命令执行完之后并没有结束，call函数还会做一些其他操作。例如记录日志，写AOF文件，向从节点同步命令等。</p>
<p>至于返回值，每个命令有各自的处理方法，我们后面在介绍。</p>
<p>到这里，Redis处理命令的过程也就完成了。</p>
<p>后面我们会再通过具体的命令来对这个过程做一个更清晰的介绍。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Redis集群之Codis</title>
    <url>/2018/11/14/%E7%8E%A9%E8%BD%ACRedis%E9%9B%86%E7%BE%A4%E4%B9%8BCodis/</url>
    <content><![CDATA[<p>近几年，随着互联网的飞速发展，作为程序员，我们需要处理的数据规模也在不断扩大。如果你使用Redis作为数据库时，面临大数据高并发的场景时，单个Redis实例就会显得力不从心。这时Redis的集群方案应运而生，他将众多Redis实例综合起来，共同应对大数据高并发的场景。<a id="more"></a></p>
<p>Codis是Redis集群方案的一种。它是由豌豆荚的中间件团队开发的，所以，它有一套详细的中文版README，方便大家学习。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1542815602/Blog/Redis/architecture.png" alt="Codis架构"></p>
<p>它的架构如上图所示，由codis-proxy对外提供Redis的服务。ZooKeeper用来存储数据路由表和codis-proxy节点的元信息。codis-proxy会监听所有的redis集群，当Redis集群处理能力达到上限时，可以动态增加Redis实例来实现扩容的需求。</p>
<h4 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h4><ul>
<li>Codis Proxy：像刚才所说的，它对外提供Redis服务，除了一些不支持的命令外（<a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/unsupported_cmds.md" target="_blank" rel="noopener">不支持的命令列表</a>），表现的和原生的Redis没有区别。由于它是无状态的，所以我们可以部署多个节点，从而保证了可用性。</li>
<li>Codis Dashboard：集群管理工具，支持Codis Proxy的添加删除以及数据迁移等操作。对于一个Codis集群，Dashboard最多部署一个</li>
<li>Codis Admin：集群管理的命令行工具</li>
<li>Codis FE：集群管理界面，多个Codis集群可以共用一个Codis FE，通过配置文件管理后端的codis-dashboard</li>
<li>Storage：为集群提供外部存储，目前支持ZooKeeper、Etcd、Fs三种。</li>
<li>Codis Server：基于3.2.8分支开发，增加额外的数据结构，用来支持slot有关的操作及数据迁移指令。</li>
</ul>
<h4 id="Codis分片原理"><a href="#Codis分片原理" class="headerlink" title="Codis分片原理"></a>Codis分片原理</h4><p>现在我们已经知道了Codis会将指定key的Redis命令转发给下层的Redis。那么Codis如何知道某个key在哪个Redis上呢。</p>
<p>Codis采用Pre-sharding的技术来实现数据分片，默认分为1024个slot（0-1023）。Codis在接收到命令时，先对key进行<a href="https://baike.baidu.com/item/CRC32/7460858?fr=aladdin" target="_blank" rel="noopener">crc32</a>运算，然后再对1024取余，得到的结果就是对应的slot。然后就可以将命令转发给slot对应的Redis实例进行处理了。</p>
<h4 id="扩容操作"><a href="#扩容操作" class="headerlink" title="扩容操作"></a>扩容操作</h4><p>Codis的动态扩容/缩容能力是它的一大亮点之一。它可以对Redis客户端透明。在扩容时，Codis提供了SLOTSSCAN指令，这个指令可以扫描指定的slot上的所有key，然后对每个key进行迁移。在扩容过程中，如果有新的key需要转发到正在迁移的slot上，那么codis会判断这个key是否需要迁移，如果需要，则对指定的key进行强制迁移，迁移完成后，再将命令转发到新的Redis上。</p>
<p>看了上面的介绍是不是觉得扩容是一件很麻烦的事情，Codis已经为我们考虑到这点了，它提供了自动均衡的功能，只需要在界面上点一下”Auto Rebalance”按钮，就可以自动实现slot迁移（可以说非常贴心了）。缩容也比较简单，只需要将需要下线的实例的slot迁移到其他实例上，然后删除group就可以了。</p>
<h4 id="Codis的缺点"><a href="#Codis的缺点" class="headerlink" title="Codis的缺点"></a>Codis的缺点</h4><p>当Redis Group的master挂掉时，codis不会自动将某个slave升为master，codis提供了一个叫做codis-ha的工具，这个工具通过dashboard提供RESTful API来实现自动主从切换。但是，当codis将某个slave升为master时，其他的slave并不会改变状态，仍然会从旧的master上同步数据，这就导致了主从数据不一致。因此，当出现主从切换时，需要管理员手动创建新的sync action来完成数据同步。</p>
<p>此外，Codis还面临一个比较尴尬的情况就是，由于它不是Redis“亲生”的，因此，当Redis发布了new feature时，它总会慢一步，因此，它需要在Redis发布new feature后迅速赶上，以保持竞争力。</p>
<h4 id="搭建Codis"><a href="#搭建Codis" class="headerlink" title="搭建Codis"></a>搭建Codis</h4><ol>
<li>安装Go运行环境</li>
</ol>
<p>Mac用户可以<a href="https://blog.helloarron.com/2015/08/29/go/mac-install-go/" target="_blank" rel="noopener">参考这个</a>，其他系统的用户也可以看这个<a href="http://www.runoob.com/go/go-environment.html" target="_blank" rel="noopener">教程</a>。</p>
<p>安装好以后，验证一下是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.11.2 darwin/amd64</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>下载Codis源码</li>
</ol>
<p>需要下载到指定目录：$GOPATH/src/github.com/CodisLabs/codis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$GOPATH</span>/src/github.com/CodisLabs</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$_</span> &amp;&amp; git <span class="built_in">clone</span> https://github.com/CodisLabs/codis.git -b release3.2</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编译源码</li>
</ol>
<p>进入源码的codis目录，直接执行make命令即可。编译完成后，bin目录下的结构应该是这样的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ll bin </span><br><span class="line">total 178584</span><br><span class="line">drwxr-xr-x  8 jackey  staff   256B 11 13 10:57 assets</span><br><span class="line">-rwxr-xr-x  1 jackey  staff    17M 11 13 10:57 codis-admin</span><br><span class="line">-rwxr-xr-x  1 jackey  staff    18M 11 13 10:56 codis-dashboard</span><br><span class="line">-rw-r--r--  1 jackey  staff     5B 11 21 18:06 codis-dashboard.pid</span><br><span class="line">-rwxr-xr-x  1 jackey  staff    16M 11 13 10:57 codis-fe</span><br><span class="line">-rw-r--r--  1 jackey  staff     5B 11 21 18:24 codis-fe.pid</span><br><span class="line">-rwxr-xr-x  1 jackey  staff    15M 11 13 10:57 codis-ha</span><br><span class="line">-rwxr-xr-x  1 jackey  staff    19M 11 13 10:57 codis-proxy</span><br><span class="line">-rw-r--r--  1 jackey  staff     5B 11 21 18:08 codis-proxy.pid</span><br><span class="line">-rwxr-xr-x  1 jackey  staff   1.1M 11 13 10:56 codis-server</span><br><span class="line">-rwxr-xr-x  1 jackey  staff    98K 11 13 10:56 redis-benchmark</span><br><span class="line">-rwxr-xr-x  1 jackey  staff   161K 11 13 10:56 redis-cli</span><br><span class="line">-rwxr-xr-x  1 jackey  staff   1.1M 11 13 10:56 redis-sentinel</span><br><span class="line">-rw-r--r--  1 jackey  staff   170B 11 13 10:56 version</span><br></pre></td></tr></table></figure>
<p>到这里为止，我们的准备工作已经完成了。接下来我们来看一下如何在单机环境启动测试集群。</p>
<ol start="4">
<li>启动codis-dashboard</li>
</ol>
<p>进入admin目录，执行codis-dashboard-admin.sh脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./codis-dashboard-admin.sh start</span><br><span class="line">/Users/jackey/Documents/go_workspace/src/github.com/CodisLabs/codis/admin/../config/dashboard.toml</span><br><span class="line">starting codis-dashboard ...</span><br></pre></td></tr></table></figure>
<p>然后查看日志，观察是否启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tail -100 ../<span class="built_in">log</span>/codis-dashboard.log.2018-11-21</span><br><span class="line">2018/11/21 18:06:57 main.go:155: [WARN] option --pidfile = /Users/jackey/Documents/go_workspace/src/github.com/CodisLabs/codis/bin/codis-dashboard.pid</span><br><span class="line">2018/11/21 18:06:57 topom.go:429: [WARN] admin start service on [::]:18080</span><br><span class="line">2018/11/21 18:06:57 fsclient.go:195: [INFO] fsclient - create /codis3/codis-demo/topom OK</span><br><span class="line">2018/11/21 18:06:58 topom_sentinel.go:169: [WARN] rewatch sentinels = []</span><br><span class="line">2018/11/21 18:06:58 main.go:179: [WARN] [0xc000374120] dashboard is working ...</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>启动codes-proxy</li>
</ol>
<p>执行codis-proxy-admin.sh脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./codis-proxy-admin.sh start                   </span><br><span class="line">/Users/jackey/Documents/go_workspace/src/github.com/CodisLabs/codis/admin/../config/proxy.toml</span><br><span class="line">starting codis-proxy ...</span><br></pre></td></tr></table></figure>
<p>查看是否启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tail -100 ../<span class="built_in">log</span>/codis-proxy.log.2018-11-21</span><br><span class="line">2018/11/21 18:08:34 proxy_api.go:44: [WARN] [0xc0003262c0] API call /api/proxy/start/212d13827c84455d487036d4bb07ce15 from 10.1.201.43:58800 []</span><br><span class="line">2018/11/21 18:08:34 proxy_api.go:44: [WARN] [0xc0003262c0] API call /api/proxy/sentinels/212d13827c84455d487036d4bb07ce15 from 10.1.201.43:58800 []</span><br><span class="line">2018/11/21 18:08:34 proxy.go:293: [WARN] [0xc0003262c0] <span class="built_in">set</span> sentinels = []</span><br><span class="line">2018/11/21 18:08:34 main.go:343: [WARN] rpc online proxy seems OK</span><br><span class="line">2018/11/21 18:08:35 main.go:233: [WARN] [0xc0003262c0] proxy is working ...</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>启动codis-server</li>
</ol>
<p>执行codis-server-admin.sh脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./codis-server-admin.sh start</span><br><span class="line">/Users/jackey/Documents/go_workspace/src/github.com/CodisLabs/codis/admin/../config/redis.conf</span><br><span class="line">starting codis-server ...</span><br></pre></td></tr></table></figure>
<p>查看是否启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tail -100 /tmp/redis_6379.log</span><br><span class="line">12854:M 21 Nov 18:09:29.172 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 256).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ <span class="string">''</span>-._                                             </span><br><span class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 3.2.11 (de1ad026/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._                                   </span><br><span class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|'</span>` _.-<span class="string">'|     Port: 6379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-'</span>    |     PID: 12854</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |           http://redis.io        </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |                                  </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line">      `-._    `-.__.-<span class="string">'    _.-'</span>                                       </span><br><span class="line">          `-._        _.-<span class="string">'                                           </span></span><br><span class="line"><span class="string">              `-.__.-'</span>                                               </span><br><span class="line"></span><br><span class="line">12854:M 21 Nov 18:09:29.187 <span class="comment"># Server started, Redis version 3.2.11</span></span><br><span class="line">12854:M 21 Nov 18:09:29.187 * The server is now ready to accept connections on port 6379</span><br></pre></td></tr></table></figure>
<p>如果执行报错，请先确认使用的用户是否有/tmp/redis_6379.log文件的读写权限。</p>
<p>这里我为了测试Codis的Auto Rebalance功能，所以启动了两个实例。方法很简单，只需要分别将admin/codis-server-admin.sh和config/redis.conf这两个文件复制一份，修改文件中的端口等信息，然后再以同样的方法执行一下新的脚本。</p>
<ol start="7">
<li>启动codis-fe</li>
</ol>
<p>执行codis-fe-admin.sh脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./codis-fe-admin.sh start</span><br><span class="line"></span><br><span class="line">starting codis-fe ...</span><br></pre></td></tr></table></figure>
<p>查看是否执行成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tail -100 ../<span class="built_in">log</span>/codis-fe.log.2018-11-21 </span><br><span class="line">2018/11/21 18:24:33 main.go:101: [WARN] <span class="built_in">set</span> ncpu = 4</span><br><span class="line">2018/11/21 18:24:33 main.go:104: [WARN] <span class="built_in">set</span> listen = 0.0.0.0:9090</span><br><span class="line">2018/11/21 18:24:33 main.go:120: [WARN] <span class="built_in">set</span> assets = /Users/jackey/Documents/go_workspace/src/github.com/CodisLabs/codis/bin/assets</span><br><span class="line">2018/11/21 18:24:33 main.go:162: [WARN] <span class="built_in">set</span> --filesystem = /tmp/codis</span><br><span class="line">2018/11/21 18:24:33 main.go:216: [WARN] option --pidfile = /Users/jackey/Documents/go_workspace/src/github.com/CodisLabs/codis/bin/codis-fe.pid</span><br></pre></td></tr></table></figure>
<p>全部启动成功之后，就可以访问<a href="http://127.0.0.1:9090，开始设置集群了。" target="_blank" rel="noopener">http://127.0.0.1:9090，开始设置集群了。</a></p>
<ol start="8">
<li>添加group</li>
</ol>
<p>刚刚我们启动了两个codis-server，因此，我们可以new两个group，然后分别将codis-server加入到两个group中</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1542888435/Blog/Redis/codis-group.png" alt="codis-group"></p>
<ol start="9">
<li>初始化slot</li>
</ol>
<p>一开始所有的slot都是offline状态。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1542801256/Blog/Redis/codis-slot-init.png" alt="codis-slot-init"></p>
<p>点击下方的Rebalance All Slots按钮，codis会自动把1024个slot分配给两个group（每个分512个）。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1542801268/Blog/Redis/codis-slot.png" alt="codis-slot"></p>
<p>当然，也可以手动分配slot，比如，我们将group-1的10个slot分配给group-2，只需要点击Migrate Some按钮即可。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1542888791/Blog/Redis/codis-slot-manual.png" alt="codis-slot-manual"></p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Codis的动态扩容能力简直好用到爆 ，不过目前也存在一些问题（前面我们也介绍过了）。所以你的集群是否要使用Codis还需要看具体的需求。最后还是要为Codis的开发团队点赞，另外他们还开发出了一套分布式数据库——<a href="https://github.com/pingcap/tidb" target="_blank" rel="noopener">TiDB</a>。有兴趣的同学可以学习一下。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Redis集群之Cluster</title>
    <url>/2018/11/27/%E7%8E%A9%E8%BD%ACRedis%E9%9B%86%E7%BE%A4%E4%B9%8BCluster/</url>
    <content><![CDATA[<p>前面我们介绍了国人自己开发的Redis集群方案——Codis，Codis友好的管理界面以及强大的自动平衡槽位的功能深受广大开发者的喜爱。今天我们一起来聊一聊Redis作者自己提供的集群方案——Cluster。希望读完这篇文章，你能够充分了解Codis和Cluster各自的优缺点，面对不同的应用场景可以从容的做出选择。<a id="more"></a></p>
<p>Redis Cluster是去中心化的，这点与Codis有着本质的不同，Redis Cluster划分了16384个slots，每个节点负责其中的一部分数据。slot的信息存储在每个节点中，节点会将slot信息持久化到配置文件中，因此需要保证配置文件是可写的。当客户端连接时，会获得一份slot的信息。这样当客户端需要访问某个key时，就可以直接根据缓存在本地的slot信息来定位节点。这样就会存在客户端缓存的slot信息和服务器的slot信息不一致的问题，这个问题具体怎么解决呢？这里先卖个关子，后面会做解释。</p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>首先我们来看下官方对Redis Cluster的介绍。</p>
<ul>
<li>High performance and linear scalability up to 1000 nodes. There are no proxies, asynchronous replication is used, and no merge operations are performed on values.</li>
<li>Acceptable degree of write safety: the system tries (in a best-effort way) to retain all the writes originating from clients connected with the majority of the master nodes. Usually there are small windows where acknowledged writes can be lost. Windows to lose acknowledged writes are larger when clients are in a minority partition.</li>
<li>Availability: Redis Cluster is able to survive partitions where the majority of the master nodes are reachable and there is at least one reachable slave for every master node that is no longer reachable. Moreover using <em>replicas migration</em>, masters no longer replicated by any slave will receive one from a master which is covered by multiple slaves.</li>
</ul>
<p>是不是不(kan)想(bu)看(dong)？没关系，我来给你掰开了揉碎了解释一下。</p>
<h5 id="写安全"><a href="#写安全" class="headerlink" title="写安全"></a>写安全</h5><p>Redis Cluster使用异步的主从同步方式，只能保证最终一致性。所以会引起一些写入数据丢失的问题，在继续阅读之前，可以先自己思考一下在什么情况下写入的数据会丢失。</p>
<p>先来看一种比较常见的写丢失的情况：</p>
<p>client向一个master发送一个写请求，master写成功并通知client。在同步到slave之前，这个master挂了，它的slave代替它成为了新的master。这时前面写入的数据就丢失了。</p>
<p>此外，还有一种情况。</p>
<p>master节点与大多数节点无法通信，一段时间后，这个master被认为已经下线，并且被它的slave顶替，又过了一段时间，原来的master节点重写恢复了连接。这时如果一个client存有过期的路由表，它就会把写请求发送的这个旧的master节点（已经变成slave了）上，从而导致写数据丢失。</p>
<p>不过，这种情况一般不会发生，因为当一个master失去连接足够长时间而被认为已经下线时，就会开始拒绝写请求。当它恢复之后，仍然会有一小段时间是拒绝写请求的，这段时间是为了让其他节点更新自己的路由表中的配置信息。</p>
<p>为了尽可能保证写安全性，Redis Cluster在发生分区时，会尽量使客户端连接到多数节点的那一部分，因为如果连接到少数部分，当master被替换时，会因为多数master不可达而拒绝所有的写请求，这样损失的数据要增大很多。</p>
<p>Redis Cluster维护了一个NODE_TIMEOUT变量，如果上述情况中，master在NODE_TIMEOUT时间内恢复连接，就不会有数据丢失。</p>
<h5 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h5><p>如果集群的大部分master可达，并且每个不可达的master至少有一个slave，在NODE_TIMEOUT时间后，就会开始进行故障转移（一般1到2秒），故障转移完成后的集群仍然可用。</p>
<p>如果集群中得N个master节点都有1个slave，当有一个节点挂掉时，集群一定是可用的，如果有2个节点挂掉，那么就会有1/(N*2-1)的概率导致集群不可用。</p>
<p>Redis Cluster为了提高可用性，新增了一个新的feature，叫做replicas migration（副本迁移，ps：我自己翻译的），这个feature其实就是在每次故障之后，重新布局集群的slave，给没有slave的master配备上slave，以此来更好的应对下次故障。</p>
<h5 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h5><p>Redis Cluster不提供代理，而是让client直接重定向到正确的节点。</p>
<p>client中会保存一份集群状态的副本，一般情况下就会直接连接到正确的节点。</p>
<p>由于Redis Cluster是异步备份的，所以节点不需要等待其他节点确认写成功就可以直接返回，除非显式的使用了WAIT命令。</p>
<p>对于操作多个key的命令，所操作的key必须是在同一节点上的，因为数据是不会移动的。（除非是resharding）</p>
<p>Redis Cluster设计的主要目标是提高性能和扩展性，只提供弱的数据安全性和可用性（但是要合理）。</p>
<h4 id="Key分配模型"><a href="#Key分配模型" class="headerlink" title="Key分配模型"></a>Key分配模型</h4><p>Redis Cluster共划分为16384个槽位。这也意味着一个集群最多可以有16384个master，不过官方建议master的最大数量是1000个。</p>
<p>如果Cluster不处于重新配置过程，那么就会达到一种稳定状态。在稳定状态下，一个槽位只由一个master提供服务，不过一个master节点会有一个或多个slave，这些slave可以提供缓解master的读请求的压力。</p>
<p>Redis Cluster会对key使用<a href="https://www.cnblogs.com/94cool/p/3559585.html" target="_blank" rel="noopener">CRC16</a>算法进行hash，然后对16384取模来确定key所属的槽位（hash tag会打破这种规则）。</p>
<h4 id="Keys-hash-tags"><a href="#Keys-hash-tags" class="headerlink" title="Keys hash tags"></a>Keys hash tags</h4><p>标签是破坏上述计算规则的实现，Hash tag是一种保证多个键被分配到同一个槽位的方法。</p>
<p>hash tag的计算规则是：取一对大括号{}之间的字符进行计算，如果key存在多对大括号，那么就取第一个左括号和第一个右括号之间的字符。如果大括号之前没有字符，则会对整个字符串进行计算。</p>
<p>说了这个多，可能你还是一头雾水。别急，我们来吃几个栗子。</p>
<ol>
<li>{Jackeyzhe}.following和{Jackeyzhe}.follower这两个key都是计算Jackey的hash值</li>
<li>foo这个key就会对{bar进行hash计算</li>
<li>follow{}{Jackey}会对整个字符串进行计算</li>
</ol>
<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>前面聊性能的时候我们提到过，Redis Cluster为了提高性能，不会提供代理，而是使用重定向的方式让client连接到正确的节点。下面我们来详细说明一下Redis Cluster是如何进行重定向的。</p>
<h5 id="MOVED重定向"><a href="#MOVED重定向" class="headerlink" title="MOVED重定向"></a>MOVED重定向</h5><p>Redis客户端可以向集群的任意一个节点发送查询请求，节点接收到请求后会对其进行解析，如果是操作单个key的命令或者是包含多个在相同槽位key的命令，那么该节点就会去查找这个key是属于哪个槽位的。</p>
<p>如果key所属的槽位由该节点提供服务，那么就直接返回结果。否则就会返回一个MOVED错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET x</span><br><span class="line">-MOVED 3999 127.0.0.1:6381</span><br></pre></td></tr></table></figure>
<p>这个错误包括了对应的key属于哪个槽位（3999）以及该槽位所在的节点的IP地址和端口号。client收到这个错误信息后，就将这些信息存储起来以便可以更准确的找到正确的节点。</p>
<p>当客户端收到MOVED错误后，可以使用CLUSTER NODES或CLUSTER SLOTS命令来更新整个集群的信息，因为当重定向发生时，很少会是单个槽位的变更，一般都会是多个槽位一起更新。因此，在收到MOVED错误时，客户端应该尽早更新集群的分布信息。当集群达到稳定状态时，客户端保存的槽位和节点的对应信息都是正确的，cluster的性能也会达到非常高效的状态。</p>
<p>除了MOVED重定向之外，一个完整的集群还应该支持ASK重定向。</p>
<h5 id="ASK重定向"><a href="#ASK重定向" class="headerlink" title="ASK重定向"></a>ASK重定向</h5><p>对于Redis Cluster来讲，MOVED重定向意味着请求的slot永远由另一个node提供服务，而ASK重定向仅代表下一个请求需要发送到指定的节点。在Redis Cluster迁移的时候会用到ASK重定向，那Redis Cluster迁移的过程究竟是怎样的呢？</p>
<p>Redis Cluster的迁移是以槽位单位的，迁移过程总共分3步（类似于把大象装进冰箱），我们来举个栗子，看一下一个槽位从节点A迁移到节点B需要经过哪些步骤：</p>
<ol>
<li>首先打开冰箱门，也就是从A节点获得槽位所有的key列表，再挨个key进行迁移，在这之前，A节点的该槽位被设置为migrating状态，B节点被设置为importing的槽位（都是用CLUSTER SETSLOT命令）。</li>
<li>第二步，就是要把大象装进去了，对于每个key来说，就是在A节点用dump命令对其进行序列化，再通过客户端在B节点执行restore命令，反序列化到B节点。</li>
<li>第三步呢，就需要把冰箱门关上，也就是把对应的key从A节点删除。</li>
</ol>
<p>有同学会问了，说好的用到ASK重定向呢？上面我们所描述的只是迁移的过程，在迁移过程中，Redis还是要对外提供服务的。试想一下，如果在迁移过程中，我向A节点请求查询x的值，A说：我这没有啊，我也不知道是传到B那去了还是我一直就没有存，你还是先问问B吧。然后返回给我们一个-ASK targetNodeAddr的错误，让我们去问B。而这时如果我们直接去问B，B肯定会直接说：这个不归我管，你得去问A。（-MOVED重定向）。因为这时候迁移还没有完成，所以B也没说错，这时候x真的不归它管。但是我们不能让它俩来回踢皮球啊，所以在问B之前，我们先给B发一个asking指令，告诉B：下面我问你一个key的值，你得当成是自己的key来处理，不能说不知道。这样如果x已经迁移到B，就会直接返回结果，如果B也查不到x的下落，说明x不存在。</p>
<h4 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h4><p>了解了Redis Cluster的重定向操作之后，我们再来聊一聊Redis Cluster的容错机制，Redis Cluster和大多数集群一样，是通过心跳来判断一个节点是否存活的。</p>
<h5 id="心跳和gossip消息"><a href="#心跳和gossip消息" class="headerlink" title="心跳和gossip消息"></a>心跳和gossip消息</h5><p>集群中的节点会不停的互相交换ping pong包，ping pong包具有相同的结构，只是类型不同，ping pong包合在一起叫做心跳包。</p>
<p>通常节点会发送ping包并接收接收者返回的pong包，不过这也不是绝对，节点也有可能只发送pong包，而不需要让接收者发送返回包，这种操作通常用于广播一个新的配置信息。</p>
<p>节点会每个几秒钟就发送一定数量的ping包。如果一个节点超过二分之一NODE_TIME时间没有收到来自某个节点ping或pong包，那么就会在NODE_TIMEOUT之前像该节点发送ping包，在NODE_TIMEOUT之前，节点会尝试TCP重连，避免由于TCP连接问题而误以为节点不可达。</p>
<h5 id="心跳包内容"><a href="#心跳包内容" class="headerlink" title="心跳包内容"></a>心跳包内容</h5><p>前面我们说了，ping和pong包的结构是相同的，下面就来具体看一下包的内容。</p>
<p>ping和pong包的内容可以分为header和gossip消息两部分，其中header包含以下信息：</p>
<ul>
<li>NODE ID是一个160bit的伪随机字符串，它是节点在集群中的唯一标识</li>
<li>currentEpoch和configEpoch字段</li>
<li>node flag，标识节点是master还是slave，另外还有一些其他的标识位</li>
<li>节点提供服务的hash slot的bitmap</li>
<li>发送者的TCP端口</li>
<li>发送者认为的集群状态（down or ok）</li>
<li>如果是slave，则包含master的NODE ID</li>
</ul>
<p>gossip包含了该节点认为的其他节点的状态，不过不是集群的全部节点。具体有以下信息：</p>
<ul>
<li>NODE ID</li>
<li>节点的IP和端口</li>
<li>NODE flags</li>
</ul>
<p>gossip消息在错误检测和节点发现中起着重要的作用。</p>
<h4 id="错误检测"><a href="#错误检测" class="headerlink" title="错误检测"></a>错误检测</h4><p>错误检测用于识别集群中的不可达节点是否已下线，如果一个master下线，会将它的slave提升为master。如果无法提升，则集群会处于错误状态。在gossip消息中，NODE flags的值包括两种PFAIL和FAIL。</p>
<h5 id="PFAIL-flag"><a href="#PFAIL-flag" class="headerlink" title="PFAIL flag"></a>PFAIL flag</h5><p>如果一个节点发现另外一个节点不可达的时间超过NODE_TIMEOUT ，则会将这个节点标记为PFAIL，也就是Possible failure（可能下线）。节点不可达是说一个节点发送了ping包，但是等待了超过NODE_TIMEOUT时间仍然没有收到回应。这也就意味着，NODE_TIMEOUT必须大于一个网络包来回的时间。</p>
<h5 id="FAIL-flag"><a href="#FAIL-flag" class="headerlink" title="FAIL flag"></a>FAIL flag</h5><p>PFAIL标志只是一个节点本地的信息，为了使slave提升为master，需要将PFAIL升级为FAIL。PFAIL升级为FAIL需要满足一些条件：</p>
<ul>
<li>A节点将B节点标记为PFAIL</li>
<li>A节点通过gossip消息收集其他大部分master节点标识的B节点的状态</li>
<li>大部分master节点在NODE_TIMEOUT * FAIL_REPORT_VALIDITY_MULT时间段内，标识B节点为PFAIL或FAIL</li>
</ul>
<p>如果满足以上条件，A节点会将B节点标识为FAIL并且向所有节点发送B节点FAIL的消息。收到消息的节点也都会将B标为FAIL。</p>
<p>FAIL状态是单向的，只能从PFAIL升级为FAIL，而不能从FAIL降为PFAIL。不过存在一些清除FAIL状态的情况：</p>
<ul>
<li>节点重新可达，并且是slave节点</li>
<li>节点重新可达，并且是master节点，但是不提供任何slot服务</li>
<li>节点重新可达，并且是master节点，但是长时间没有slave被提升为master来顶替它</li>
</ul>
<p>PFAIL提升到FAIL使用的是一种弱协议：</p>
<ul>
<li>节点收集的状态不在同一时间点，我们会丢弃时间较早的报告信息，但是也只能保证节点的状态在一段时间内大部分master达成了一致</li>
<li>检测到一个FAIL后，需要通知所有节点，但是没有办法保证每个节点都能成功收到消息</li>
</ul>
<p>由于是弱协议，Redis Cluster只要求所有节点对某个节点的状态最终保持一致。如果大部分master认为某个节点FAIL，那么最终所有节点都会将其标为FAIL。而如果只有一小部分master节点认为某个节点FAIL，slave并不会被提升为master，因此，FAIL状态将会被清除。</p>
<h4 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h4><p>原理说了这么多，我们一定要来亲自动手搭建一个Redis Cluster，下面演示一个在一台机器上模拟搭建3主3从的Redis Cluster。当然，如果你想了解更多Redis Cluster的其他原理，可以查看<a href="https://redis.io/topics/cluster-spec" target="_blank" rel="noopener">官网</a>的介绍。</p>
<h5 id="Redis环境"><a href="#Redis环境" class="headerlink" title="Redis环境"></a>Redis环境</h5><p>首先要搭建起我们需要的Redis环境，这里启动6个Redis实例，端口号分别是6379、6380、6479、6480、6579、6580</p>
<p>拷贝6份Redis配置文件并进行如下修改（以6379为例，端口号和配置文件根据需要修改）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 6379</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes6379.conf</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>
<p>配置文件的名称也需要修改，修改完成后，分别启动6个实例（图片中有一个端口号改错了……）。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1544443793/Blog/Redis/run_redis_instance.png" alt="Redis instances"></p>
<h5 id="创建Redis-Cluster"><a href="#创建Redis-Cluster" class="headerlink" title="创建Redis Cluster"></a>创建Redis Cluster</h5><p>实例启动完成后，就可以创建Redis Cluster了，如果Redis的版本是3.x或4.x，需要使用一个叫做redis-trib的工具，而对于Redis5.0之后的版本，Redis Cluster的命令已经集成到了redis-cli中了。这里我用的是Redis5，所以没有再单独安装redis-trib工具。</p>
<p>接下来执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6479 127.0.0.1:6480 127.0.0.1:6579 127.0.0.1:6580 --cluster-replicas 1</span><br></pre></td></tr></table></figure>
<p>当你看到输出了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[OK] All 16384 slots covered</span><br></pre></td></tr></table></figure>
<p>就表示Redis Cluster已经创建成功了。</p>
<h5 id="查看节点信息"><a href="#查看节点信息" class="headerlink" title="查看节点信息"></a>查看节点信息</h5><p>此时我们使用cluster nodes 命令就可查看Redis Cluster的节点信息了。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1544443754/Blog/Redis/clusters_nodes.png" alt="cluster nodes"></p>
<p>可以看到，6379、6380和6479三个节点被配置为master节点。</p>
<h5 id="reshard"><a href="#reshard" class="headerlink" title="reshard"></a>reshard</h5><p>接下来我们再来尝试一下reshard操作</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1544443793/Blog/Redis/reshard_start.png" alt="reshard_start"></p>
<p>如图，输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 127.0.0.1:6380</span><br></pre></td></tr></table></figure>
<p>Redis Cluster会问你要移动多少个槽位，这里我们移动1000个，接着会询问你要移动到哪个节点，这里我们输入6479的NODE ID</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1544443793/Blog/Redis/reshard_end.png" alt="reshard_end"></p>
<p>reshard完成后，可以输入命令查看节点的情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster check 127.0.0.1:6480</span><br></pre></td></tr></table></figure>
<p>可以看到6479节点已经多了1000个槽位了，分别是0-498和5461-5961。</p>
<h5 id="新增master节点"><a href="#新增master节点" class="headerlink" title="新增master节点"></a>新增master节点</h5><p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1544443769/Blog/Redis/add_node.png" alt="add_node">我们可以使用add-node命令为Redis Cluster新增master节点，可以看到我们增加的是6679节点，新增成功后，并不会为任何slot提供服务。</p>
<h5 id="新增slave节点"><a href="#新增slave节点" class="headerlink" title="新增slave节点"></a>新增slave节点</h5><p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1544443767/Blog/Redis/add_node_slave.png" alt="add_slave"></p>
<p>我们也可以用add-node命令新增slave节点，只不过需要加上–cluster-slave参数，并且使用–cluster-master-id指明新增的slave属于哪个master。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>最后来总结一下，我们介绍了</p>
<p>Redis Cluster的特性：写安全、可用性、性能</p>
<p>Key分配模型：使用CRC16算法，如果需要分配到相同的slot，可以使用tag</p>
<p>两种重定向：MOVED和ASK</p>
<p>容错机制：PFAIL和FAIL两种状态</p>
<p>最后又动手搭建了一个实验的Redis Cluster。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>走近源码：Redis如何清除过期key</title>
    <url>/2020/03/30/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E5%A6%82%E4%BD%95%E6%B8%85%E9%99%A4%E8%BF%87%E6%9C%9Fkey/</url>
    <content><![CDATA[<p>“叮……”，美好的周六就这么被一阵钉钉消息吵醒了。<a id="more"></a></p>
<p>业务组的同学告诉我说很多用户的帐号今天被强制下线。我们的帐号系统正常的逻辑是用户登录一次后，token的有效期可以维持一天的时间。现在的问题是用户大概每10分钟左右就需要重新登录一次。这种情况一般有两种原因：1、token生成时出问题。2、验证token时出现问题。</p>
<p>通过检查日志，我发现是验证token时，Redis中已经没有对应的token了。并且确定了生成新的token时，set到Redis中的有效期是正确的，那么就基本可以确定是Redis的问题了。</p>
<p>于是又去检查了Redis的监控，发现在那段时间Redis由于内存占用过高强制清理了几次key。但从日志上来看，这段时间并没有出现流量暴涨的情况，而且Redis中key的数量也没有显著增加。那是什么原因导致Redis内存占用过高呢？确定了Redis内存升高不是我们造成的之后，我们又联系了业务组的同学协助他们，他们表示最近确实有上线，并且新上线的功能有使用到Redis。但我仍然感觉很奇怪，为什么Redis中的key没有增多，并且没看到有其他业务的key。经过一番询问，才了解到，业务组同学使用的是这个Redis的db1，而我用的（和刚查的）是db0。这里确实是我在排查问题时出现了疏忽。</p>
<p>那么Redis的不同db之间会互相影响吗？通常情况下，我们使用不同的db进行数据隔离，这没问题。<strong>但Redis进行清理时，并不是只清理数据量占用最大的那个db，而是会对所有的db进行清理。</strong>在这之前我并不是很了解这方面知识，这里也只是根据现象进行的猜测。</p>
<p>好奇心驱使我来验证一下这个想法。于是我决定直接来看Redis的源码。清理key相关的代码在<a href="https://github.com/antirez/redis/blob/unstable/src/evict.c" target="_blank" rel="noopener">evict.c</a>文件中。</p>
<p>Redis中会保存一个“过期key池”，这个池子中存放了一些可能会被清理的key。其中保存的数据结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">evictionPoolEntry</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> idle;    <span class="comment">/* Object idle time (inverse frequency for LFU) */</span></span><br><span class="line">    sds key;                    <span class="comment">/* Key name. */</span></span><br><span class="line">    sds cached;                 <span class="comment">/* Cached SDS object for key name. */</span></span><br><span class="line">    <span class="keyword">int</span> dbid;                   <span class="comment">/* Key DB number. */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中idle是对象空闲时间，在Reids中，key的过期算法有两种：一种是近似LRU，一种是LFU。默认使用的是近似LRU。</p>
<h3 id="近似LRU"><a href="#近似LRU" class="headerlink" title="近似LRU"></a>近似LRU</h3><p>在解释近似LRU之前，先来简单了解一下LRU。当Redis的内存占用超过我们设置的maxmemory时，会把长时间没有使用的key清理掉。按照LRU算法，我们需要对所有key（也可以设置成只淘汰有过期时间的key）按照空闲时间进行排序，然后淘汰掉空闲时间最大的那部分数据，使得Redis的内存占用降到一个合理的值。</p>
<p>LRU算法的缺点是，我们需要维护一个全部（或只有过期时间）key的列表，还要按照最近使用时间排序。这会消耗大量内存，并且每次使用key时更新排序也会占用额外的CPU资源。对于Redis这样对性能要求很高的系统来说是不被允许的。</p>
<p>因此，Redis采用了一种近似LRU的算法。当Redis接收到新的写入命令，而内存又不够时，就会触发近似LRU算法来强制清理一些key。具体清理的步骤是，Redis会对key进行采样，通常是取5个，然后会把过期的key放到我们上面说的“过期池”中，过期池中的key是按照空闲时间来排序的，Redis会优先清理掉空闲时间最长的key，直到内存小于maxmemory。</p>
<p>近似LRU算法的清理效果图如图（图片来自Redis官方文档）</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1585453145/Blog/Redis/evict/lru_comparison.png" alt="lru_comparison"></p>
<p>这么说可能不够清楚，我们直接上代码。</p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1585453153/Blog/Redis/evict/lru_call.png" alt="lru_call"></p>
<p>上图展示了代码中近似LRU算法的主要逻辑调用路径。</p>
<p>其中主要逻辑是在<code>freeMemoryIfNeeded</code>函数中</p>
<p>首先调用<code>getMaxmemoryState</code>函数判断当前内存的状态</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxmemoryState</span><span class="params">(<span class="keyword">size_t</span> *total, <span class="keyword">size_t</span> *logical, <span class="keyword">size_t</span> *tofree, <span class="keyword">float</span> *level)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> mem_reported, mem_used, mem_tofree;</span><br><span class="line"></span><br><span class="line">    mem_reported = zmalloc_used_memory();</span><br><span class="line">    <span class="keyword">if</span> (total) *total = mem_reported;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> return_ok_asap = !server.maxmemory || mem_reported &lt;= server.maxmemory;</span><br><span class="line">    <span class="keyword">if</span> (return_ok_asap &amp;&amp; !level) <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">    mem_used = mem_reported;</span><br><span class="line">    <span class="keyword">size_t</span> overhead = freeMemoryGetNotCountedMemory();</span><br><span class="line">    mem_used = (mem_used &gt; overhead) ? mem_used-overhead : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (level) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!server.maxmemory) &#123;</span><br><span class="line">            *level = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            *level = (<span class="keyword">float</span>)mem_used / (<span class="keyword">float</span>)server.maxmemory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (return_ok_asap) <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mem_used &lt;= server.maxmemory) <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">    mem_tofree = mem_used - server.maxmemory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logical) *logical = mem_used;</span><br><span class="line">    <span class="keyword">if</span> (tofree) *tofree = mem_tofree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果使用内存低于maxmemory的话，就返回<code>C_OK</code>，否则返回<code>C_ERR</code>。另外，这个函数还通过传递指针型的参数来返回一些额外的信息。</p>
<ul>
<li><strong>total</strong>：已使用的字节总数，无论是<code>C_OK</code>还是<code>C_ERR</code>都有效。</li>
<li><strong>logical</strong>：已使用的内存减去slave或AOF缓冲区后的大小，只有返回<code>C_ERR</code>时有效。</li>
<li><strong>tofree</strong>：需要释放的内存大小，只有返回<code>C_ERR</code>时有效。</li>
<li><strong>level</strong>：已使用内存的比例，通常是0到1之间，当超出内存限制时，就大于1。无论是<code>C_OK</code>还是<code>C_ERR</code>都有效。</li>
</ul>
<p>判断完内存状态以后，如果内存没有超过使用限制就会直接返回，否则就继续向下执行。此时我们已经知道需要释放多少内存空间了，下面就开始进行释放内存的操作了。每次释放内存都会记录释放内存的大小，直到释放的内存不小于<code>tofree</code>。</p>
<p>首先根据<code>maxmemory_policy</code>进行判断，对于不同的清除策略有不同的实现方法，我们来看LRU的具体实现。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; server.dbnum; i++) &#123;</span><br><span class="line">  db = server.db+i;</span><br><span class="line">  dict = (server.maxmemory_policy &amp; MAXMEMORY_FLAG_ALLKEYS) ?</span><br><span class="line">    db-&gt;dict : db-&gt;expires;</span><br><span class="line">  <span class="keyword">if</span> ((keys = dictSize(dict)) != <span class="number">0</span>) &#123;</span><br><span class="line">    evictionPoolPopulate(i, dict, db-&gt;dict, pool);</span><br><span class="line">    total_keys += keys;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先是填充“过期池”，这里遍历了每一个db（验证了我最开始的想法），调用<code>evictionPoolPopulate</code>函数进行填充。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evictionPoolPopulate</span><span class="params">(<span class="keyword">int</span> dbid, dict *sampledict, dict *keydict, struct evictionPoolEntry *pool)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j, k, count;</span><br><span class="line">    dictEntry *samples[server.maxmemory_samples];</span><br><span class="line"></span><br><span class="line">    count = dictGetSomeKeys(sampledict,samples,server.maxmemory_samples);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; count; j++) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> idle;</span><br><span class="line">        sds key;</span><br><span class="line">        robj *o;</span><br><span class="line">        dictEntry *de;</span><br><span class="line"></span><br><span class="line">        de = samples[j];</span><br><span class="line">        key = dictGetKey(de);</span><br><span class="line">				<span class="comment">/* some code */</span></span><br><span class="line">        <span class="keyword">if</span> (server.maxmemory_policy &amp; MAXMEMORY_FLAG_LRU) &#123;</span><br><span class="line">            idle = estimateObjectIdleTime(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* some code */</span></span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; EVPOOL_SIZE &amp;&amp;</span><br><span class="line">               pool[k].key &amp;&amp;</span><br><span class="line">               pool[k].idle &lt; idle) k++;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span> &amp;&amp; pool[EVPOOL_SIZE<span class="number">-1</span>].key != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; EVPOOL_SIZE &amp;&amp; pool[k].key == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pool[EVPOOL_SIZE<span class="number">-1</span>].key == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                sds cached = pool[EVPOOL_SIZE<span class="number">-1</span>].cached;</span><br><span class="line">                memmove(pool+k+<span class="number">1</span>,pool+k,</span><br><span class="line">                    <span class="keyword">sizeof</span>(pool[<span class="number">0</span>])*(EVPOOL_SIZE-k<span class="number">-1</span>));</span><br><span class="line">                pool[k].cached = cached;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                k--;</span><br><span class="line">                sds cached = pool[<span class="number">0</span>].cached; <span class="comment">/* Save SDS before overwriting. */</span></span><br><span class="line">                <span class="keyword">if</span> (pool[<span class="number">0</span>].key != pool[<span class="number">0</span>].cached) sdsfree(pool[<span class="number">0</span>].key);</span><br><span class="line">                memmove(pool,pool+<span class="number">1</span>,<span class="keyword">sizeof</span>(pool[<span class="number">0</span>])*k);</span><br><span class="line">                pool[k].cached = cached;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* some code */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于篇幅原因，我截取了部分代码，通过这段代码我们可以看到，Redis首先是采样了一部分key，这里采样数量maxmemory_samples通常是5，我们也可以自己设置，采样数量越大，结果就越接近LRU算法的结果，带来的影响是性能随之变差。</p>
<p>采样之后我们需要获得每个key的空闲时间，然后将其填充到“过期池”中的指定位置。这里“过期池”是按照空闲时间从小到大排序的，也就是说，idle大大key排在最右边。</p>
<p>填充完“过期池”之后，会从后向前获取到最适合清理的key。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Go backward from best to worst element to evict. */</span></span><br><span class="line"><span class="keyword">for</span> (k = EVPOOL_SIZE<span class="number">-1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">  <span class="keyword">if</span> (pool[k].key == <span class="literal">NULL</span>) <span class="keyword">continue</span>;</span><br><span class="line">  bestdbid = pool[k].dbid;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (server.maxmemory_policy &amp; MAXMEMORY_FLAG_ALLKEYS) &#123;</span><br><span class="line">    de = dictFind(server.db[pool[k].dbid].dict,</span><br><span class="line">                  pool[k].key);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    de = dictFind(server.db[pool[k].dbid].expires,</span><br><span class="line">                  pool[k].key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* some code */</span></span><br><span class="line">  <span class="keyword">if</span> (de) &#123;</span><br><span class="line">    bestkey = dictGetKey(de);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>找到需要删除的key后，就需要根据设置清理策略进行同步/异步清理。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (server.lazyfree_lazy_eviction)</span><br><span class="line">  dbAsyncDelete(db,keyobj);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  dbSyncDelete(db,keyobj)</span><br></pre></td></tr></table></figure>
<p>最后记下本次清理的空间大小，用来在循环条件判断是否要继续清理。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">delta -= (<span class="keyword">long</span> <span class="keyword">long</span>) zmalloc_used_memory();</span><br><span class="line">mem_freed += delta;</span><br></pre></td></tr></table></figure>
<h3 id="清理策略"><a href="#清理策略" class="headerlink" title="清理策略"></a>清理策略</h3><p>最后我们来看一下Redis支持的几种清理策略</p>
<ul>
<li><strong>noeviction</strong>：不会继续处理写请求（DEL可以继续处理）。</li>
<li><strong>allkeys-lru</strong>：对所有key的近似LRU</li>
<li><strong>volatile-lru</strong>：使用近似LRU算法淘汰设置了过期时间的key</li>
<li><strong>allkeys-random</strong>：从所有key中随机淘汰一些key</li>
<li><strong>volatile-random</strong>：对所有设置了过期时间的key随机淘汰</li>
<li><strong>volatile-ttl</strong>：淘汰有效期最短的一部分key</li>
</ul>
<p>Redis4.0开始支持了LFU策略，和LRU类似，它分为两种：</p>
<ul>
<li><strong>volatile-lfu</strong>：使用LFU算法淘汰设置了过期时间的key</li>
<li><strong>allkeys-lfu</strong>：从全部key中进行淘汰，使用LFU</li>
</ul>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>现在我知道了Redis在内存达到上限时做了哪些事了。以后出问题时也就不会只检查自己的db了。</p>
<p>关于这次事故的后续处理，我首先是让业务同学回滚了代码，然后让他们使用一个单独的Redis，这样业务再出现类似问题就不会影响到我们的帐号服务了，整体的影响范围也会变得更加可控。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊Git原理</title>
    <url>/2018/08/15/%E8%81%8A%E8%81%8AGit%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>说起Git，相信大家都很熟悉了，毕竟作为程序猿，每天的业余时间除了吃饭睡觉就是逛一下全世界最大的开（tong）源（xing）代（jiao）码（you）网站GitHub了。在那里Git是每个人所要具备的最基本的技能。今天我们不聊Git的基本应用，来聊一聊Git的原理。<a id="more"></a></p>
<p>Git给自己的定义是一套内存寻址文件系统，当你在一个目录下执行git init命令时，会生成一个.git目录，它的目录结构是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.git/</span><br><span class="line">├── branches</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── HEAD</span><br><span class="line">├── hooks</span><br><span class="line">│   ├── applypatch-msg.sample</span><br><span class="line">│   ├── commit-msg.sample</span><br><span class="line">│   ├── post-update.sample</span><br><span class="line">│   ├── pre-applypatch.sample</span><br><span class="line">│   ├── pre-commit.sample</span><br><span class="line">│   ├── prepare-commit-msg.sample</span><br><span class="line">│   ├── pre-push.sample</span><br><span class="line">│   ├── pre-rebase.sample</span><br><span class="line">│   └── update.sample</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── objects</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br></pre></td></tr></table></figure>
<p>其中branches目录已经不再使用，description文件仅供GitWeb程序使用，config文件保存了项目的配置。</p>
<p>需要我们重点关注的是HEAD和index文件以及objects和refs目录。其中index中保存了暂存区的一些信息，这里不做过多介绍。</p>
<h4 id="objects目录"><a href="#objects目录" class="headerlink" title="objects目录"></a>objects目录</h4><p>这个目录是用来存储Git对象的（包括tree对象、commit对象和blob对象），对于一个初始的Git仓库，objects目录下只有info和pack两个子目录，并没有常规文件。随着项目的进行，我们创建的文件，以及一些操作记录，都会作为Git对象被存储在这个目录下。</p>
<p>在该目录下，所有对象都会生成一个文件，并且有对应的SHA-1校验和，Git会创建以校验和前两位为名称的子目录，并以剩下的38位为名称来保存文件。</p>
<p>接下来让我们一起看一下当我们进行一次提交时，Git具体做了哪些事情。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'test content'</span>&gt;test.txt</span><br><span class="line">$ git add .</span><br></pre></td></tr></table></figure>
<p>执行上述命令后，objects目录结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.git/objects/</span><br><span class="line">├── d6</span><br><span class="line">│   └── 70460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class="line">├── info</span><br><span class="line">└── pack</span><br></pre></td></tr></table></figure>
<p>这里多了一个文件夹，如上面所述，这个就是Git为我们创建的一个对象，我们可以使用底层命令来看一下这个对象的类型以及它存储的是什么。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cat-file -t d670460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class="line">blob</span><br><span class="line">$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class="line"><span class="built_in">test</span> content</span><br></pre></td></tr></table></figure>
<p>可以看到，这是一个blob对象，存储内容就是我们刚刚创建的文件的内容。接下来继续执行提交操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">'test message'</span></span><br><span class="line">[master (root-commit) 2b00dca] <span class="built_in">test</span> message</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line"> $ tree .git/objects/</span><br><span class="line">.git/objects/</span><br><span class="line">├── 2b</span><br><span class="line">│   └── 00dcae50af70bb5722033b3fe75281206c74da</span><br><span class="line">├── 80</span><br><span class="line">│   └── 865964295ae2f11d27383e5f9c0b58a8ef21da</span><br><span class="line">├── d6</span><br><span class="line">│   └── 70460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class="line">├── info</span><br><span class="line">└── pack</span><br></pre></td></tr></table></figure>
<p>此时objects目录下又多了两个对象。再用cat-file命令来查看一下这两个文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cat-file -t 2b00dcae50af70bb5722033b3fe75281206c74da</span><br><span class="line">commit</span><br><span class="line">$ git cat-file -p 2b00dcae50af70bb5722033b3fe75281206c74da</span><br><span class="line">tree 80865964295ae2f11d27383e5f9c0b58a8ef21da</span><br><span class="line">author jackeyzhe &lt;jackeyzhe59@163.com&gt; 1534670725 +0800</span><br><span class="line">committer jackeyzhe &lt;jackeyzhe59@163.com&gt; 1534670725 +0800</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> message</span><br><span class="line">$ git cat-file -t 80865964295ae2f11d27383e5f9c0b58a8ef21da</span><br><span class="line">tree</span><br><span class="line">$ git cat-file -p 80865964295ae2f11d27383e5f9c0b58a8ef21da</span><br><span class="line">100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4	test.txt</span><br></pre></td></tr></table></figure>
<p>可以看到一个是commit对象，一个是tree对象。commit对象通常包括4部分内容：</p>
<ul>
<li>工作目录快照的Hash，即tree的值</li>
<li>提交的说明信息</li>
<li>提交者的信息</li>
<li>父提交的Hash值</li>
</ul>
<p>由于我是第一次提交，所以这里没有父提交的Hash值。</p>
<p>tree对象可以理解为UNIX文件系统中的目录，保存了工作目录的tree对象和blob对象的信息。接下来我们再来看一下Git是如何进行版本控制的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'version1'</span>&gt;version.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'first version'</span></span><br><span class="line">[master 702193d] first version</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 version.txt</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'version2'</span>&gt;version.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'second version'</span></span><br><span class="line">[master 5333a75] second version</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">$ tree .git/objects/</span><br><span class="line">.git/objects/</span><br><span class="line">├── 1f</span><br><span class="line">│   └── a5aab2a3cf025d06479b9eab9a7f66f60dbfc1</span><br><span class="line">├── 29</span><br><span class="line">│   └── 13bfa5cf9fb6f893bec60ac11d86129d56fcbe</span><br><span class="line">├── 2b</span><br><span class="line">│   └── 00dcae50af70bb5722033b3fe75281206c74da</span><br><span class="line">├── 53</span><br><span class="line">│   └── 33a759c4bdcdc6095b4caac19743d9445ca516</span><br><span class="line">├── 5b</span><br><span class="line">│   └── dcfc19f119febc749eef9a9551bc335cb965e2</span><br><span class="line">├── 70</span><br><span class="line">│   └── 2193d62ffd797155e4e21eede20897890da12a</span><br><span class="line">├── 80</span><br><span class="line">│   └── 865964295ae2f11d27383e5f9c0b58a8ef21da</span><br><span class="line">├── d6</span><br><span class="line">│   └── 70460b4b4aece5915caf5c68d12f560a9fe3e4</span><br><span class="line">├── df</span><br><span class="line">│   └── 7af2c382e49245443687973ceb711b2b74cb4a</span><br><span class="line">├── info</span><br><span class="line">└── pack</span><br><span class="line">$ git cat-file -p 1fa5aab2a3cf025d06479b9eab9a7f66f60dbfc1</span><br><span class="line">100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4	test.txt</span><br><span class="line">100644 blob 5bdcfc19f119febc749eef9a9551bc335cb965e2	version.txt</span><br><span class="line">$ git cat-file -p 2913bfa5cf9fb6f893bec60ac11d86129d56fcbe</span><br><span class="line">100644 blob d670460b4b4aece5915caf5c68d12f560a9fe3e4	test.txt</span><br><span class="line">100644 blob df7af2c382e49245443687973ceb711b2b74cb4a	version.txt</span><br></pre></td></tr></table></figure>
<p>Git将没有改变的文件的Hash值直接存入tree对象，对于有修改的文件，则会生成一个新的对象，将新的对象存入tree对象。我们再来看一下commit对象的信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cat-file -p 5333a759c4bdcdc6095b4caac19743d9445ca516</span><br><span class="line">tree 2913bfa5cf9fb6f893bec60ac11d86129d56fcbe</span><br><span class="line">parent 702193d62ffd797155e4e21eede20897890da12a</span><br><span class="line">author jackeyzhe &lt;jackeyzhe59@163.com&gt; 1534672270 +0800</span><br><span class="line">committer jackeyzhe &lt;jackeyzhe59@163.com&gt; 1534672270 +0800</span><br><span class="line"></span><br><span class="line">second version</span><br><span class="line">$ git cat-file -p 702193d62ffd797155e4e21eede20897890da12a</span><br><span class="line">tree 1fa5aab2a3cf025d06479b9eab9a7f66f60dbfc1</span><br><span class="line">parent 2b00dcae50af70bb5722033b3fe75281206c74da</span><br><span class="line">author jackeyzhe &lt;jackeyzhe59@163.com&gt; 1534672248 +0800</span><br><span class="line">committer jackeyzhe &lt;jackeyzhe59@163.com&gt; 1534672248 +0800</span><br><span class="line"></span><br><span class="line">first version</span><br></pre></td></tr></table></figure>
<p>此时的commit对象已经有parent信息了，这样我们就可以顺着parent一步步往回进行版本回退了。不过这样是比较麻烦的，我们一般习惯用的是git log查看提交记录。</p>
<h4 id="refs目录"><a href="#refs目录" class="headerlink" title="refs目录"></a>refs目录</h4><p>在介绍refs目录之前，我们还是先来看一下该目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree .git/refs/</span><br><span class="line">.git/refs/</span><br><span class="line">├── heads</span><br><span class="line">│   └── master</span><br><span class="line">└── tags</span><br><span class="line"></span><br><span class="line">2 directories, 1 file</span><br><span class="line">$ cat .git/refs/heads/master </span><br><span class="line">5333a759c4bdcdc6095b4caac19743d9445ca516</span><br></pre></td></tr></table></figure>
<p>在一个刚刚被初始化的Git仓库中，refs目录下只有heads和tags两个子目录，由于我们刚刚有过提交操作，所以git为我们自动生成了一个名为master的引用。master的内容是最后一次提交对象的Hash值。看到这里大家一定在想，如果我们对每次提交都创建一个这样的引用，不就不需要记住每次提交的Hash值了，只要看看引用的值，复制过来就可以退回到对应版本了。没错，这样是可以方便的退回，但是这样做的意义不大，因为我们并不需要频繁的退回，特别是比较古老的版本，退回的概率更是趋近于0。Git用这个引用做了更有意义的事，那就是分支。</p>
<p>当我新建一个分支时，git就会在.git/refs/heads目录下新建一个文件。当然新建的引用还是指向当前工作目录的最后一次提交，一般情况下我们不会主动去修改这些引用文件，不过如果一定要修改，Git为我们提供了一个update-ref命令。可以改变引用的值，使其指向不同的commit对象。</p>
<p>tags目录下的文件存储的是标签对应的commit，当为某次提交打上一个tag时，tags目录下就会被创建出一个命名为tag名的文件，值是此次提交的Hash值。</p>
<h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>新建分支的时候，Git是怎么知道我们当前是在哪个分支的，Git又是如何实现分支切换的呢？答案就在HEAD这个文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat .git/HEAD </span><br><span class="line">ref: refs/heads/master</span><br><span class="line">$ git checkout <span class="built_in">test</span> </span><br><span class="line">Switched to branch <span class="string">'test'</span></span><br><span class="line">$ cat .git/HEAD </span><br><span class="line">ref: refs/heads/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>很明显，HEAD文件存储的就是我们当前分支的引用，当我们切换分支后再次进行提交操作时，Git就会读取HEAD对应引用的值，作为此次commit的parent。我们也可以通过symbolic-ref命令手动设置HEAD的值，但是不能设置refs以外的形式。</p>
<h4 id="Packfiles"><a href="#Packfiles" class="headerlink" title="Packfiles"></a>Packfiles</h4><p>到这里我们在文章开头所说的重点关注的目录和文件都介绍完毕了。但是作为一个文件系统，还存在一个问题，那就是空间。前文介绍过，当文件修改后进行提交时，Git会创建一份新的快照。这样长久下去，必定会占用很大的存储空间。而比较古老的版本的价值已经不大，所以要想办法清理出足够的空间供用户使用。</p>
<p>好消息是，Git拥有自己的gc（垃圾回收）方法。当仓库中有太多松散对象时，Git会调用git gc命令（当然我们也可以手动调用这个命令），将这些对象进行打包。打包后会出现两个新文件：一个idx索引文件和一个pack文件。索引文件包含了packfile的偏移信息，可以快速定位到文件。打包后，每个文件最新的版本的对象存的是完整的文件内容。而之前的版本只保存差异。这样就达到了压缩空间的目的。</p>
<h4 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h4><p>本文只介绍了Git的原理，如果对Git基本操作不熟悉的话，可以看看<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git</a>。</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>走近源码：Redis的启动过程</title>
    <url>/2019/01/04/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>当我们对不断加深对某一项技术的了解时，一定会在一个特定的时间对它的实现方式产生兴趣。没错，这就是我现在的状态，所以，多年没有读/写C语言的我，决定要啃一下Redis的源码。<a id="more"></a></p>
<p>Redis大体上可以分为两部分：服务器和客户端（读者吐槽：你这分的也太大体了吧）。在使用时，我们先启动服务器，然后再启动客户端。由客户端向服务器发送命令，服务器处理后将结果返回给客户端。我们从“头”开始，一起来了解一下Redis服务器在启动的时候都做了哪些事情。</p>
<p>对于C语言来说，main函数是一个程序的的入口，Redis也不例外。Redis的main函数写在server.c文件中。由于redis启动过程相当复杂，需要判断许多条件，例如是否在集群中，或者是否是哨兵模式等等，因此我们只介绍单机redis启动过程中一些比较重要的步骤。</p>
<h5 id="初始化全局服务器状态"><a href="#初始化全局服务器状态" class="headerlink" title="初始化全局服务器状态"></a>初始化全局服务器状态</h5><p>如果redis-server命令启动时使用了test参数，那么就会先进行指定的测试。接下来调用了initServerConfig()函数，这个函数初始化了一个类型为redisServer的全局变量server。redisServer这个结构包含了非常多的字段，由于篇幅限制，我们不在这里列出，如果按类别划分的话，可以分为以下类别：</p>
<ul>
<li>General</li>
<li>Modules</li>
<li>Networking</li>
<li>RDB / AOF loading information</li>
<li>Fast pointers to often looked up command</li>
<li>Fields used only for stats</li>
<li>Configuration</li>
<li>AOF / RDB persistence</li>
<li>Logging</li>
<li>Replication</li>
<li>Synchronous replication</li>
<li>Limits</li>
<li>Blocked clients</li>
<li>Sort parameters</li>
<li>Zip structure config</li>
<li>time cache</li>
<li>Pubsub</li>
<li>Cluster</li>
<li>Scripting</li>
<li>Lazy free</li>
<li>Latency monitor</li>
<li>Assert &amp; bug reporting</li>
<li>System hardware info</li>
</ul>
<p>如果用一句话来概括initServerConfig()函数作用，它就是用来给可以在配置文件（通常命名为redis.conf）中配置的变量初始化一个默认值。比较常用的变量有服务器端口号、日志等级等等。</p>
<h5 id="设置commend-table"><a href="#设置commend-table" class="headerlink" title="设置commend table"></a>设置commend table</h5><p>在initServerConfig()函数中，会调用populateCommandTable()函数来设置服务器的命令表，命令表的结构如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> <span class="title">redisCommandTable</span>[] = &#123;</span></span><br><span class="line">    &#123;<span class="string">"module"</span>,moduleCommand,<span class="number">-2</span>,<span class="string">"as"</span>,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"get"</span>,getCommand,<span class="number">2</span>,<span class="string">"rF"</span>,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"set"</span>,setCommand,<span class="number">-3</span>,<span class="string">"wm"</span>,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"setnx"</span>,setnxCommand,<span class="number">3</span>,<span class="string">"wmF"</span>,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每一项代表的含义是：</p>
<ol>
<li>name：命令的名称</li>
<li>function：命令对应的函数名。redis-server处理命令时要执行的函数</li>
<li>arity：命令的参数个数，如果是-N代表大于等于N</li>
<li>sflags：命令标志，标识命令的类型（read/write/admin…）</li>
<li>flags：位掩码，由Redis根据sflags计算</li>
<li>get_keys_proc：可选函数，当下面三个项不能指定哪些参数是key时使用</li>
<li>first_key_index：第一个是key的参数</li>
<li>last_key_index：最后一个是key的参数</li>
<li>key_step：key的“步长”，比如MSET的key_step是2，因为它的参数是key,val,key,val这样的形式</li>
<li>microseconds：执行命令所需要的微秒数</li>
<li>calls：该命令被调用总次数</li>
</ol>
<p>设置好命令表后，redis-server还会对一些常用的命令设置快速查找方式，直接赋予server的成员指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">server.delCommand = lookupCommandByCString(<span class="string">"del"</span>);</span><br><span class="line">server.multiCommand = lookupCommandByCString(<span class="string">"multi"</span>);</span><br><span class="line">server.lpushCommand = lookupCommandByCString(<span class="string">"lpush"</span>);</span><br><span class="line">server.lpopCommand = lookupCommandByCString(<span class="string">"lpop"</span>);</span><br><span class="line">server.rpopCommand = lookupCommandByCString(<span class="string">"rpop"</span>);</span><br><span class="line">server.zpopminCommand = lookupCommandByCString(<span class="string">"zpopmin"</span>);</span><br><span class="line">server.zpopmaxCommand = lookupCommandByCString(<span class="string">"zpopmax"</span>);</span><br><span class="line">server.sremCommand = lookupCommandByCString(<span class="string">"srem"</span>);</span><br><span class="line">server.execCommand = lookupCommandByCString(<span class="string">"exec"</span>);</span><br><span class="line">server.expireCommand = lookupCommandByCString(<span class="string">"expire"</span>);</span><br><span class="line">server.pexpireCommand = lookupCommandByCString(<span class="string">"pexpire"</span>);</span><br><span class="line">server.xclaimCommand = lookupCommandByCString(<span class="string">"xclaim"</span>);</span><br><span class="line">server.xgroupCommand = lookupCommandByCString(<span class="string">"xgroup"</span>);</span><br></pre></td></tr></table></figure>
<h5 id="初始化哨兵模式"><a href="#初始化哨兵模式" class="headerlink" title="初始化哨兵模式"></a>初始化哨兵模式</h5><p>变量初始化以后，就会将启动命令的路径和参数保存起来，以备下次重启的时候使用。如果启动的服务是哨兵模式，那么就会调用initSentinelConfig()和initSentinel()这两个方法来初始化哨兵模式。对sentinel不了解的同学可以看<a href="https://jackeyzhe.github.io/2018/11/04/%E7%8E%A9%E8%BD%ACRedis%E9%9B%86%E7%BE%A4%E4%B9%8BSentinel/">这里</a>。initSentinelConfig()和initSentinel()都在sentinel.c文件中。initSentinelConfig函数负责初始化sentinel的端口号，以及解除服务器的保护模式。initSentinel函数负责将command table设置为只支持sentinel命令，以及初始化sentinelState数据格式。</p>
<h5 id="修复持久化文件"><a href="#修复持久化文件" class="headerlink" title="修复持久化文件"></a>修复持久化文件</h5><p>启动模式如果是redis-check-rdb/aof，那么就会执行redis_check_rdb_main()或redis_check_aof_main()这两个函数来修复持久化文件，不过redis_check_rdb_main函数所做的事情在Redis启动过程中已经做了，所以这里不需要做，直接使这个函数加载错误就可以了。</p>
<h5 id="处理参数"><a href="#处理参数" class="headerlink" title="处理参数"></a>处理参数</h5><p>如果是简单的参数例如-v或–version、-h或–help，就会直接调用相应的方法，打印信息。如果是使用其他配置文件，则修改server.exec_argv。对于其他信息，会将他们转换成字符串，然后添加进配置文件，例如“–port 6380”就会被转换成“port 6380\n”加进配置文件。这时，redis就会调用loadServerConfig()函数来加载配置文件，这个过程会覆盖掉前面初始化默认配置文件的变量的值。</p>
<h5 id="initServer"><a href="#initServer" class="headerlink" title="initServer()"></a>initServer()</h5><p>initServer()函数负责结束server变量初始化工作。首先设置处理信号（SIGHUP和SIGPIPE除外），接着会创建一些双向列表用来跟踪客户端、从节点等。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">server.current_client = <span class="literal">NULL</span>;</span><br><span class="line">server.clients = listCreate();</span><br><span class="line">server.clients_index = raxNew();</span><br><span class="line">server.clients_to_close = listCreate();</span><br><span class="line">server.slaves = listCreate();</span><br><span class="line">server.monitors = listCreate();</span><br><span class="line">server.clients_pending_write = listCreate();</span><br><span class="line">server.slaveseldb = <span class="number">-1</span>; <span class="comment">/* Force to emit the first SELECT command. */</span></span><br><span class="line">server.unblocked_clients = listCreate();</span><br><span class="line">server.ready_keys = listCreate();</span><br><span class="line">server.clients_waiting_acks = listCreate();</span><br></pre></td></tr></table></figure>
<h5 id="Shared-object"><a href="#Shared-object" class="headerlink" title="Shared object"></a>Shared object</h5><p>createSharedObjects()函数会创建一些shared对象保存在全局的shared变量中，对于不同的命令，可能会有相同的返回值（比如报错）。这样在返回时就不必每次都去新增对象了，保存到内存中了。这个设计就是以Redis启动时多消耗一些时间为代价，换取运行的更小的延迟。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">shared.crlf = createObject(OBJ_STRING,sdsnew(<span class="string">"\r\n"</span>));</span><br><span class="line">shared.ok = createObject(OBJ_STRING,sdsnew(<span class="string">"+OK\r\n"</span>));</span><br><span class="line">shared.err = createObject(OBJ_STRING,sdsnew(<span class="string">"-ERR\r\n"</span>));</span><br><span class="line">shared.emptybulk = createObject(OBJ_STRING,sdsnew(<span class="string">"$0\r\n\r\n"</span>));</span><br><span class="line">shared.czero = createObject(OBJ_STRING,sdsnew(<span class="string">":0\r\n"</span>));</span><br><span class="line">shared.cone = createObject(OBJ_STRING,sdsnew(<span class="string">":1\r\n"</span>));</span><br><span class="line">shared.cnegone = createObject(OBJ_STRING,sdsnew(<span class="string">":-1\r\n"</span>));</span><br><span class="line">shared.nullbulk = createObject(OBJ_STRING,sdsnew(<span class="string">"$-1\r\n"</span>));</span><br><span class="line">shared.nullmultibulk = createObject(OBJ_STRING,sdsnew(<span class="string">"*-1\r\n"</span>));</span><br><span class="line">shared.emptymultibulk = createObject(OBJ_STRING,sdsnew(<span class="string">"*0\r\n"</span>));</span><br><span class="line">shared.pong = createObject(OBJ_STRING,sdsnew(<span class="string">"+PONG\r\n"</span>));</span><br><span class="line">shared.queued = createObject(OBJ_STRING,sdsnew(<span class="string">"+QUEUED\r\n"</span>));</span><br><span class="line">shared.emptyscan = createObject(OBJ_STRING,sdsnew(<span class="string">"*2\r\n$1\r\n0\r\n*0\r\n"</span>));</span><br><span class="line">shared.wrongtypeerr = createObject(OBJ_STRING,sdsnew(</span><br><span class="line">    <span class="string">"-WRONGTYPE Operation against a key holding the wrong kind of value\r\n"</span>));</span><br><span class="line">shared.nokeyerr = createObject(OBJ_STRING,sdsnew(</span><br><span class="line">    <span class="string">"-ERR no such key\r\n"</span>));</span><br></pre></td></tr></table></figure>
<h5 id="Shared-integers"><a href="#Shared-integers" class="headerlink" title="Shared integers"></a>Shared integers</h5><p>除了上述的一些返回值以外，createSharedObjects()函数还会创建一些共享的整数对象。对Redis来说，有许多类型（比如lists或者sets）都需要一些整数（比如数量），这时就可以复用这些已经创建好的整数对象，而不需要重新分配内存并创建。这同样是牺牲了启动时间来换取运行时间。</p>
<h5 id="新增循环事件"><a href="#新增循环事件" class="headerlink" title="新增循环事件"></a>新增循环事件</h5><p>initServer()函数调用aeCreateEventLoop()函数(ae.c文件)来增加循环事件，并将结果返回给server的el成员。Redis使用不同的函数来兼容各个平台，在Linux平台使用epoll，在BSD使用kqueue，都不是的话，最终会使用select。Redis轮询新的连接以及I/O事件，有新的事件到来时就会及时作出响应。</p>
<h5 id="分配数据库"><a href="#分配数据库" class="headerlink" title="分配数据库"></a>分配数据库</h5><p>Redis初始化需要的数据库，并将结果赋给server的db成员。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">server.db = zmalloc(<span class="keyword">sizeof</span>(redisDb)*server.dbnum);</span><br></pre></td></tr></table></figure>
<h5 id="监听TCP端口"><a href="#监听TCP端口" class="headerlink" title="监听TCP端口"></a>监听TCP端口</h5><p>listenToPort()用来初始化一些文件描述符，从而监听server配置的地址和端口。listenToPort函数会根据参数中的地址判断要监听的是IPv4还是IPv6，对应的调用anetTcpServer()或anetTcp6Server()函数，如果参数中未指明地址，则会强行绑定0.0.0.0</p>
<h5 id="初始化LRU键池"><a href="#初始化LRU键池" class="headerlink" title="初始化LRU键池"></a>初始化LRU键池</h5><p>evictionPoolAlloc()（evict.c文件中）用于初始化LRU的键池，Redis的key过期策略是近似LRU算法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">evictionPoolAlloc</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">evictionPoolEntry</span> *<span class="title">ep</span>;</span></span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    ep = zmalloc(<span class="keyword">sizeof</span>(*ep)*EVPOOL_SIZE);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; EVPOOL_SIZE; j++) &#123;</span><br><span class="line">        ep[j].idle = <span class="number">0</span>;</span><br><span class="line">        ep[j].key = <span class="literal">NULL</span>;</span><br><span class="line">        ep[j].cached = sdsnewlen(<span class="literal">NULL</span>,EVPOOL_CACHED_SDS_SIZE);</span><br><span class="line">        ep[j].dbid = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    EvictionPoolLRU = ep;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Server-cron"><a href="#Server-cron" class="headerlink" title="Server cron"></a>Server cron</h5><p>initServer()函数接下来会为数据库和pub/sub再生成一些列表和字典，重置一些状态，标记系统启动时间。在这之后，Redis会执行aeCreateTimeEvent()（在ae.c文件中）函数，用来新建一个循环执行serverCron()函数的事件。serverCron()默认每100毫秒执行一次。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* Create the timer callback, this is our way to process many background</span></span><br><span class="line"><span class="comment">  * operations incrementally, like clients timeout, eviction of unaccessed</span></span><br><span class="line"><span class="comment">  * expired keys and so forth. */</span></span><br><span class="line"><span class="keyword">if</span> (aeCreateTimeEvent(server.el, <span class="number">1</span>, serverCron, <span class="literal">NULL</span>, <span class="literal">NULL</span>) == AE_ERR) &#123;</span><br><span class="line">    serverPanic(<span class="string">"Can't create event loop timers."</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，代码中创建循环事件时指定每毫秒执行一次serverCron()函数，这是为了使循环马上启动，但是serverCron()函数的返回值又会被作为下次执行的时间间隔。默认为1000/server.hz。server.hz随着客户端数量的增加而增加。</p>
<p>serverCron()函数做了许多定时执行的任务，包括rehash、后台持久化，AOF重新与清理、清理过期key，交换虚拟内存、同步主从节点等等。总之能想到的Redis的定时任务几乎都在serverCron()函数中处理。</p>
<h5 id="打开AOF文件"><a href="#打开AOF文件" class="headerlink" title="打开AOF文件"></a>打开AOF文件</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Open the AOF file if needed. */</span></span><br><span class="line"><span class="keyword">if</span> (server.aof_state == AOF_ON) &#123;</span><br><span class="line">    server.aof_fd = open(server.aof_filename,</span><br><span class="line">                         O_WRONLY|O_APPEND|O_CREAT,<span class="number">0644</span>);</span><br><span class="line">    <span class="keyword">if</span> (server.aof_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">"Can't open the append-only file: %s"</span>,</span><br><span class="line">                  strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="最大内存限制"><a href="#最大内存限制" class="headerlink" title="最大内存限制"></a>最大内存限制</h5><p>对于32位系统，最大内存是4GB，如果用户没有明确指出Redis可使用的最大内存，那么这里默认限制为3GB。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 32 bit instances are limited to 4GB of address space, so if there is</span></span><br><span class="line"><span class="comment">     * no explicit limit in the user provided configuration we set a limit</span></span><br><span class="line"><span class="comment">     * at 3 GB using maxmemory with 'noeviction' policy'. This avoids</span></span><br><span class="line"><span class="comment">     * useless crashes of the Redis instance for out of memory. */</span></span><br><span class="line"><span class="keyword">if</span> (server.arch_bits == <span class="number">32</span> &amp;&amp; server.maxmemory == <span class="number">0</span>) &#123;</span><br><span class="line">    serverLog(LL_WARNING,<span class="string">"Warning: 32 bit instance detected but no memory limit set. Setting 3 GB maxmemory limit with 'noeviction' policy now."</span>);</span><br><span class="line">    server.maxmemory = <span class="number">3072L</span>L*(<span class="number">1024</span>*<span class="number">1024</span>); <span class="comment">/* 3 GB */</span></span><br><span class="line">    server.maxmemory_policy = MAXMEMORY_NO_EVICTION;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Redis-Server启动"><a href="#Redis-Server启动" class="headerlink" title="Redis Server启动"></a>Redis Server启动</h5><p>如果Redis被设置为后台运行，此时Redis会尝试写pid文件，默认路径是/var/run/redis.pid。这时，Redis服务器已经启动，不过还有一些事情要做。</p>
<h5 id="从磁盘加载数据"><a href="#从磁盘加载数据" class="headerlink" title="从磁盘加载数据"></a>从磁盘加载数据</h5><p>如果存在AOF文件或者dump文件（都有的话AOF文件的优先级高），loadDataFromDisk()函数负责将数据从磁盘加载到内存。</p>
<h5 id="最后的设置"><a href="#最后的设置" class="headerlink" title="最后的设置"></a>最后的设置</h5><p>每次进入循环事件时，要调用beforeSleep()函数，它做了以下这些事情：</p>
<ul>
<li>如果server是cluster中的一个节点，调用clusterBeforeSleep()函数</li>
<li>执行一个快速的周期</li>
<li>如果有客户端在前一个循环事件被阻塞了，向所有的从节点发送ACK请求</li>
<li>取消在同步备份过程中被阻塞的客户端的阻塞状态</li>
<li>检查是否有因为阻塞命令而被阻塞的客户端，如果有，解除</li>
<li>把AOF缓冲区写到磁盘</li>
<li>线程释放GIL</li>
</ul>
<h5 id="进入主循环事件"><a href="#进入主循环事件" class="headerlink" title="进入主循环事件"></a>进入主循环事件</h5><p>程序调用aeMain()函数，进入主循环，这时其他的一些循环事件也会分别被调用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aeMain</span><span class="params">(aeEventLoop *eventLoop)</span> </span>&#123;</span><br><span class="line">    eventLoop-&gt;stop = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!eventLoop-&gt;stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eventLoop-&gt;beforesleep != <span class="literal">NULL</span>)</span><br><span class="line">            eventLoop-&gt;beforesleep(eventLoop);</span><br><span class="line">        aeProcessEvents(eventLoop, AE_ALL_EVENTS|AE_CALL_AFTER_SLEEP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此，Redis服务器已经完全准备好处理各种事件了。后面我们会继续了解Redis命令执行过程究竟做了哪些事情。</p>
<p><code>参考</code>：<a href="https://pauladamsmith.com/articles/redis-under-the-hood.html" target="_blank" rel="noopener">Redis: under the hood</a></p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>走近源码：Redis跳跃列表究竟怎么跳</title>
    <url>/2019/04/18/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9ARedis%E8%B7%B3%E8%B7%83%E5%88%97%E8%A1%A8%E7%A9%B6%E7%AB%9F%E6%80%8E%E4%B9%88%E8%B7%B3/</url>
    <content><![CDATA[<p>在前面介绍压缩列表ziplist的时候我们提到过，zset内部有两种存储结构，一种是ziplist，另一种是跳跃列表skiplist。为了彻底理解zset的内部结构，我们就再来介绍一下skiplist。<a id="more"></a></p>
<h4 id="skiplist介绍"><a href="#skiplist介绍" class="headerlink" title="skiplist介绍"></a>skiplist介绍</h4><p>顾名思义，skiplist本质上是一个有序的多维的list。我们先回顾一下一维列表是如何进行查找的。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1555344398/Blog/Redis/skiplist/%E5%88%97%E8%A1%A8.png" alt="一维有序列表"></p>
<p>如上图，我们要查找一个元素，就需要从头节点开始遍历，直到找到对应的节点或者是第一个大于要查找的元素的节点（没找到）。时间复杂度为O(N)。</p>
<p>这个查找效率是比较低的，如果我们把列表的某些节点拔高一层，例如把每两个节点中有一个节点变成两层。那么第二层的节点只有第一层的一半，查找效率也就会提高。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1555345563/Blog/Redis/skiplist/double_list.png" alt="双层列表"></p>
<p>查找的步骤是从头节点的顶层开始，查到第一个大于指定元素的节点时，退回上一节点，在下一层继续查找。</p>
<p>例如我们要在上面的列表中查询16。</p>
<ul>
<li>从头节点的最顶层开始，先到节点7。</li>
<li>7的下一个节点是39，大于16，因此我们退回到7</li>
<li>从7开始，在下一层继续查找，就可以找到16。</li>
</ul>
<p>这个例子中遍历的节点不比一维列表少，但是当节点更多，查找的数字更大时，这种做法的优势就体现出来了。还是上面的例子，如果我们要查找的是39，那么只需要访问两个节点（7、39）就可以找到了。这比一维列表要减少一半的数量。</p>
<p>为了避免插入操作的时间复杂度是O(N)，skiplist每层的数量不会严格按照2:1的比例，而是对每个要插入的元素随机一个层数。</p>
<p>随机层数的计算过程如下：</p>
<ul>
<li>每个节点都有第一层</li>
<li>那么它有第二层的概率是p，有第三层的概率是p*p</li>
<li>不能超过最大层数</li>
</ul>
<p>Redis中的实现是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Returns a random level for the new skiplist node we are going to create.</span></span><br><span class="line"><span class="comment"> * The return value of this function is between 1 and ZSKIPLIST_MAXLEVEL</span></span><br><span class="line"><span class="comment"> * (both inclusive), with a powerlaw-alike distribution where higher</span></span><br><span class="line"><span class="comment"> * levels are less likely to be returned. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zslRandomLevel</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ((random()&amp;<span class="number">0xFFFF</span>) &lt; (ZSKIPLIST_P * <span class="number">0xFFFF</span>))</span><br><span class="line">        level += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (level&lt;ZSKIPLIST_MAXLEVEL) ? level : ZSKIPLIST_MAXLEVEL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中ZSKIPLIST_P的值是0.25，存在上一层的概率是1/4，也就是说相对于我们上面的例子更加扁平化一些。ZSKIPLIST_MAXLEVEL的值是64，即最高允许64层。</p>
<h4 id="Redis中的skiplist"><a href="#Redis中的skiplist" class="headerlink" title="Redis中的skiplist"></a>Redis中的skiplist</h4><p>Redis中的skiplist是作为zset的一种内部存储结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ZSETs use a specialized version of Skiplists */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line">    sds ele;</span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> span;</span><br><span class="line">    &#125; level[];</span><br><span class="line">&#125; zskiplistNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> length;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125; zskiplist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zset</span> &#123;</span></span><br><span class="line">    dict *dict;</span><br><span class="line">    zskiplist *zsl;</span><br><span class="line">&#125; zset;</span><br></pre></td></tr></table></figure>
<p>可以看到zset是由一个hash和一个skiplist组成。</p>
<p>skiplist的结构包括头尾指针，长度和当前跳跃列表的层数。</p>
<p>而在zskiplistNode，也就是跳跃列表的节点中包括</p>
<ul>
<li>ele，即节点存储的数据</li>
<li>节点的分数score</li>
<li>回溯指针是在第一层指向前一个节点的指针，也就是说Redis的skiplist第一层是一个双向列表</li>
<li>节点各层级的指针level[]，每层对应一个指针forward，以及这个指针跨越了多少个节点span。span用于计算元素的排名</li>
</ul>
<p>了解了zset和skiplist的结构之后，我们就来看一下zset的基本操作的实现。</p>
<h4 id="插入过程"><a href="#插入过程" class="headerlink" title="插入过程"></a>插入过程</h4><p>前面我们介绍压缩列表的插入过程的时候就有提到过skiplist的插入，在zsetAdd函数中，Redis对zset的编码方式进行了判断，分别处理skiplist和ziplist。ziplist的部分<a href="https://jackeyzhe.github.io/2019/03/23/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9A%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84/">前文</a>已经介绍过了，今天就来看一下skiplist的部分。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (zobj-&gt;encoding == OBJ_ENCODING_SKIPLIST) &#123;</span><br><span class="line">    zset *zs = zobj-&gt;ptr;</span><br><span class="line">    zskiplistNode *znode;</span><br><span class="line">    dictEntry *de;</span><br><span class="line"></span><br><span class="line">    de = dictFind(zs-&gt;dict,ele);</span><br><span class="line">    <span class="keyword">if</span> (de != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* NX? Return, same element already exists. */</span></span><br><span class="line">        <span class="keyword">if</span> (nx) &#123;</span><br><span class="line">            *flags |= ZADD_NOP;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curscore = *(<span class="keyword">double</span>*)dictGetVal(de);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Prepare the score for the increment if needed. */</span></span><br><span class="line">        <span class="keyword">if</span> (incr) &#123;</span><br><span class="line">            score += curscore;</span><br><span class="line">            <span class="keyword">if</span> (isnan(score)) &#123;</span><br><span class="line">                *flags |= ZADD_NAN;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newscore) *newscore = score;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Remove and re-insert when score changes. */</span></span><br><span class="line">        <span class="keyword">if</span> (score != curscore) &#123;</span><br><span class="line">            znode = zslUpdateScore(zs-&gt;zsl,curscore,ele,score);</span><br><span class="line">            <span class="comment">/* Note that we did not removed the original element from</span></span><br><span class="line"><span class="comment">             * the hash table representing the sorted set, so we just</span></span><br><span class="line"><span class="comment">             * update the score. */</span></span><br><span class="line">            dictGetVal(de) = &amp;znode-&gt;score; <span class="comment">/* Update score ptr. */</span></span><br><span class="line">            *flags |= ZADD_UPDATED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!xx) &#123;</span><br><span class="line">        ele = sdsdup(ele);</span><br><span class="line">        znode = zslInsert(zs-&gt;zsl,score,ele);</span><br><span class="line">        serverAssert(dictAdd(zs-&gt;dict,ele,&amp;znode-&gt;score) == DICT_OK);</span><br><span class="line">        *flags |= ZADD_ADDED;</span><br><span class="line">        <span class="keyword">if</span> (newscore) *newscore = score;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *flags |= ZADD_NOP;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先是查找对应元素是否存在，如果存在并且没有参数NX，就记录下这个元素当前的分数。<strong>这里可以看出zset中的hash字典是用来根据元素获取分数的。</strong></p>
<p>接着判断是不是要执行increment命令，如果是的话，就用当前分数加上指定分数，得到新的分数newscore。如果分数发生了变化，就调用zslUpdateScore函数，来更新skiplist中的节点，另外还要多一步操作来更新hash字典中的分数。</p>
<p>如果要插入的元素不存在，那么就直接调用zslInsert函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">zskiplistNode *<span class="title">zslInsert</span><span class="params">(zskiplist *zsl, <span class="keyword">double</span> score, sds ele)</span> </span>&#123;</span><br><span class="line">    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> rank[ZSKIPLIST_MAXLEVEL];</span><br><span class="line">    <span class="keyword">int</span> i, level;</span><br><span class="line"></span><br><span class="line">    serverAssert(!isnan(score));</span><br><span class="line">    x = zsl-&gt;header;</span><br><span class="line">    <span class="keyword">for</span> (i = zsl-&gt;level<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">/* store rank that is crossed to reach the insert position */</span></span><br><span class="line">        rank[i] = i == (zsl-&gt;level<span class="number">-1</span>) ? <span class="number">0</span> : rank[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (x-&gt;level[i].forward &amp;&amp;</span><br><span class="line">                (x-&gt;level[i].forward-&gt;score &lt; score ||</span><br><span class="line">                    (x-&gt;level[i].forward-&gt;score == score &amp;&amp;</span><br><span class="line">                    sdscmp(x-&gt;level[i].forward-&gt;ele,ele) &lt; <span class="number">0</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            rank[i] += x-&gt;level[i].span;</span><br><span class="line">            x = x-&gt;level[i].forward;</span><br><span class="line">        &#125;</span><br><span class="line">        update[i] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* we assume the element is not already inside, since we allow duplicated</span></span><br><span class="line"><span class="comment">     * scores, reinserting the same element should never happen since the</span></span><br><span class="line"><span class="comment">     * caller of zslInsert() should test in the hash table if the element is</span></span><br><span class="line"><span class="comment">     * already inside or not. */</span></span><br><span class="line">    level = zslRandomLevel();</span><br><span class="line">    <span class="keyword">if</span> (level &gt; zsl-&gt;level) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = zsl-&gt;level; i &lt; level; i++) &#123;</span><br><span class="line">            rank[i] = <span class="number">0</span>;</span><br><span class="line">            update[i] = zsl-&gt;header;</span><br><span class="line">            update[i]-&gt;level[i].span = zsl-&gt;length;</span><br><span class="line">        &#125;</span><br><span class="line">        zsl-&gt;level = level;</span><br><span class="line">    &#125;</span><br><span class="line">    x = zslCreateNode(level,score,ele);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">        x-&gt;level[i].forward = update[i]-&gt;level[i].forward;</span><br><span class="line">        update[i]-&gt;level[i].forward = x;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* update span covered by update[i] as x is inserted here */</span></span><br><span class="line">        x-&gt;level[i].span = update[i]-&gt;level[i].span - (rank[<span class="number">0</span>] - rank[i]);</span><br><span class="line">        update[i]-&gt;level[i].span = (rank[<span class="number">0</span>] - rank[i]) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* increment span for untouched levels */</span></span><br><span class="line">    <span class="keyword">for</span> (i = level; i &lt; zsl-&gt;level; i++) &#123;</span><br><span class="line">        update[i]-&gt;level[i].span++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x-&gt;backward = (update[<span class="number">0</span>] == zsl-&gt;header) ? <span class="literal">NULL</span> : update[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;level[<span class="number">0</span>].forward)</span><br><span class="line">        x-&gt;level[<span class="number">0</span>].forward-&gt;backward = x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        zsl-&gt;tail = x;</span><br><span class="line">    zsl-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数一开始定义了两个数组，update数组用来存储搜索路径，rank数组用来存储节点跨度。</p>
<p>第一步操作是找出要插入节点的搜索路径，并且记录节点跨度数。</p>
<p>接着开始插入，先随机一个层数。如果随机出的层数大于当前的层数，就需要继续填充update和rank数组，并更新skiplist的最大层数。</p>
<p>然后调用zslCreateNode函数创建新的节点。</p>
<p>创建好节点后，就根据搜索路径数据提供的位置，从第一层开始，逐层插入节点（更新指针），并其他节点的span值。</p>
<p>最后还要更新回溯节点，以及将skiplist的长度加一。</p>
<p>这就是插入新元素的整个过程。</p>
<h4 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h4><p>了解了插入过程以后我们再回过头来看更新过程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">zskiplistNode *<span class="title">zslUpdateScore</span><span class="params">(zskiplist *zsl, <span class="keyword">double</span> curscore, sds ele, <span class="keyword">double</span> newscore)</span> </span>&#123;</span><br><span class="line">    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We need to seek to element to update to start: this is useful anyway,</span></span><br><span class="line"><span class="comment">     * we'll have to update or remove it. */</span></span><br><span class="line">    x = zsl-&gt;header;</span><br><span class="line">    <span class="keyword">for</span> (i = zsl-&gt;level<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (x-&gt;level[i].forward &amp;&amp;</span><br><span class="line">                (x-&gt;level[i].forward-&gt;score &lt; curscore ||</span><br><span class="line">                    (x-&gt;level[i].forward-&gt;score == curscore &amp;&amp;</span><br><span class="line">                     sdscmp(x-&gt;level[i].forward-&gt;ele,ele) &lt; <span class="number">0</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            x = x-&gt;level[i].forward;</span><br><span class="line">        &#125;</span><br><span class="line">        update[i] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Jump to our element: note that this function assumes that the</span></span><br><span class="line"><span class="comment">     * element with the matching score exists. */</span></span><br><span class="line">    x = x-&gt;level[<span class="number">0</span>].forward;</span><br><span class="line">    serverAssert(x &amp;&amp; curscore == x-&gt;score &amp;&amp; sdscmp(x-&gt;ele,ele) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If the node, after the score update, would be still exactly</span></span><br><span class="line"><span class="comment">     * at the same position, we can just update the score without</span></span><br><span class="line"><span class="comment">     * actually removing and re-inserting the element in the skiplist. */</span></span><br><span class="line">    <span class="keyword">if</span> ((x-&gt;backward == <span class="literal">NULL</span> || x-&gt;backward-&gt;score &lt; newscore) &amp;&amp;</span><br><span class="line">        (x-&gt;level[<span class="number">0</span>].forward == <span class="literal">NULL</span> || x-&gt;level[<span class="number">0</span>].forward-&gt;score &gt; newscore))</span><br><span class="line">    &#123;</span><br><span class="line">        x-&gt;score = newscore;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* No way to reuse the old node: we need to remove and insert a new</span></span><br><span class="line"><span class="comment">     * one at a different place. */</span></span><br><span class="line">    zslDeleteNode(zsl, x, update);</span><br><span class="line">    zskiplistNode *newnode = zslInsert(zsl,newscore,x-&gt;ele);</span><br><span class="line">    <span class="comment">/* We reused the old node x-&gt;ele SDS string, free the node now</span></span><br><span class="line"><span class="comment">     * since zslInsert created a new one. */</span></span><br><span class="line">    x-&gt;ele = <span class="literal">NULL</span>;</span><br><span class="line">    zslFreeNode(x);</span><br><span class="line">    <span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和插入过程一样，先保存了搜索路径。并且定位到要更新的节点，如果更新后节点位置不变，则直接返回。否则，就要先调用zslDeleteNode函数删除该节点，再插入新的节点。</p>
<h4 id="删除过程"><a href="#删除过程" class="headerlink" title="删除过程"></a>删除过程</h4><p>Redis中skiplist的更新过程还是比较容易理解的，就是先删除再插入，那么我们接下来就看看它是如何删除节点的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zslDeleteNode</span><span class="params">(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; zsl-&gt;level; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (update[i]-&gt;level[i].forward == x) &#123;</span><br><span class="line">            update[i]-&gt;level[i].span += x-&gt;level[i].span - <span class="number">1</span>;</span><br><span class="line">            update[i]-&gt;level[i].forward = x-&gt;level[i].forward;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            update[i]-&gt;level[i].span -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;level[<span class="number">0</span>].forward) &#123;</span><br><span class="line">        x-&gt;level[<span class="number">0</span>].forward-&gt;backward = x-&gt;backward;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        zsl-&gt;tail = x-&gt;backward;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(zsl-&gt;level &gt; <span class="number">1</span> &amp;&amp; zsl-&gt;header-&gt;level[zsl-&gt;level<span class="number">-1</span>].forward == <span class="literal">NULL</span>)</span><br><span class="line">        zsl-&gt;level--;</span><br><span class="line">    zsl-&gt;length--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删除过程的代码也比较容易理解，首先按照搜索路径，从下到上，逐层更新前向指针。然后更新回溯指针。如果删除节点的层数是最大的层数，那么还需要更新skiplist的level字段。最后长度减一。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>skiplist是节点有层级的list，节点的查找过程可以跨越多个节点，从而节省查找时间。</p>
<p>Redis的zset由hash字典和skiplist组成，hash字典负责数据到分数的对应，skiplist负责根据分数查找数据。</p>
<p>Redis中skiplist插入和删除操作都依赖于搜索路径，更新操作是先删除再插入。</p>
<h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><p>Skip Lists: A Probabilistic Alternative to Balanced Trees</p>
<p>《<a href="https://juejin.im/book/5afc2e5f6fb9a07a9b362527" target="_blank" rel="noopener">Redis 深度历险：核心原理与应用实践</a>》</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>速度不够，管道来凑——Redis管道技术</title>
    <url>/2019/04/27/%E9%80%9F%E5%BA%A6%E4%B8%8D%E5%A4%9F%EF%BC%8C%E7%AE%A1%E9%81%93%E6%9D%A5%E5%87%91%E2%80%94%E2%80%94Redis%E7%AE%A1%E9%81%93%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>Redis客户端与服务器之间使用TCP协议进行通信，并且很早就支持管道（pipelining）技术了。在某些高并发的场景下，网络开销成了Redis速度的瓶颈，所以需要使用管道技术来实现突破。<a id="more"></a></p>
<p>在介绍管道之前，先来想一下单条命令的执行步骤：</p>
<ul>
<li>客户端把命令发送到服务器，然后阻塞客户端，等待着从socket读取服务器的返回结果</li>
<li>服务器处理命令并将结果返回给客户端</li>
</ul>
<p>按照这样的描述，每个<strong>命令的执行时间 = 客户端发送时间+服务器处理和返回时间+一个网络来回的时间</strong></p>
<p>其中一个网络来回的时间是不固定的，它的决定因素有很多，比如客户端到服务器要经过多少跳，网络是否拥堵等等。但是这个时间的量级也是最大的，也就是说一个命令的完成时间的长度很大程度上取决于网络开销。如果我们的服务器每秒可以处理10万条请求，而网络开销是250毫秒，那么实际上每秒钟只能处理4个请求。最暴力的优化方法就是使客户端和服务器在一台物理机上，这样就可以将网络开销降低到1ms以下。但是实际的生产环境我们并不会这样做。而且即使使用这种方法，当请求非常频繁时，这个时间和服务器处理时间比较仍然是很长的。</p>
<h4 id="Redis-Pipelining"><a href="#Redis-Pipelining" class="headerlink" title="Redis Pipelining"></a>Redis Pipelining</h4><p>为了解决这种问题，Redis在很早就支持了管道技术。也就是说客户端可以一次发送多条命令，不用逐条等待命令的返回值，而是到最后一起读取返回结果，这样只需要一次网络开销，速度就会得到明显的提升。管道技术其实已经非常成熟并且得到广泛应用了，例如POP3协议由于支持管道技术，从而显著提高了从服务器下载邮件的速度。</p>
<p>在Redis中，如果客户端使用管道发送了多条命令，那么服务器就会将多条命令放入一个队列中，这一操作会消耗一定的内存，所以<strong>管道中命令的数量并不是越大越好</strong>（太大容易撑爆内存），而是应该有一个合理的值。</p>
<h4 id="深入理解Redis交互流程"><a href="#深入理解Redis交互流程" class="headerlink" title="深入理解Redis交互流程"></a>深入理解Redis交互流程</h4><p>管道并不只是用来网络开销延迟的一种方法，它实际上是会提升Redis服务器每秒操作总数的。在解释原因之前，需要更深入的了解Redis命令处理过程。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1556373614/Blog/Redis/pipeline/command.png" alt="图片来源：掘金小册《Redis 深度历险：核心原理与应用实践》"></p>
<p>一个完整的交互流程如下：</p>
<ol>
<li>客户端进程调用<code>write()</code>把消息写入到操作系统内核为Socket分配的send buffer中</li>
<li>操作系统会把send buffer中的内容写入网卡，网卡再通过网关路由把内容发送到服务器端的网卡</li>
<li>服务端网卡会把接收到的消息写入操作系统为Socket分配的recv buffer</li>
<li>服务器进程调用<code>read()</code>读取消息然后进行处理</li>
<li>处理完成后调用<code>write()</code>把返回结果写入到服务器端的send buffer</li>
<li>服务器操作系统再将send buffer中的内容写入网卡，然后发送到客户端</li>
<li>客户端操作系统将网卡内容读到recv buffer中</li>
<li>客户端进程调用<code>read()</code>从recv buffer中读取消息并返回</li>
</ol>
<p>现在我们把命令执行的时间进一步细分：</p>
<p><strong>命令的执行时间 = 客户端调用write并写网卡时间+一次网络开销的时间+服务读网卡并调用read时间++服务器处理数据时间+服务端调用write并写网卡时间+客户端读网卡并调用read时间</strong></p>
<p>这其中除了网络开销，花费时间最长的就是进行系统调用<code>write()</code>和<code>read()</code>了，这一过程需要操作系统由用户态切换到内核态，中间涉及到的上下文切换会浪费很多时间。</p>
<p>使用管道时，多个命令只会进行一次<code>read()</code>和<code>wrtie()</code>系统调用，因此使用管道会提升Redis服务器处理命令的速度，随着管道中命令的增多，服务器每秒处理请求的数量会线性增长，最后会趋近于不使用管道的10倍。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1556376029/Blog/Redis/pipeline/pipeline_iops.png" alt="图片来源：Redis官方pipeline文档"></p>
<h4 id="和Scripting对比"><a href="#和Scripting对比" class="headerlink" title="和Scripting对比"></a>和Scripting对比</h4><p>对于管道的大部分应用场景而言，使用Redis脚本（Redis2.6及以后的版本）会使服务器端有更好的表现。使用脚本最大的好处就是可以以最小的延迟读写数据。</p>
<p>有时我们也需要在管道中使用EVAL和EVALSHA命令，这是完全有可能的。因此Redis提供了SCRIPT LOAD命令来支持这种情况。</p>
<h4 id="眼见为实"><a href="#眼见为实" class="headerlink" title="眼见为实"></a>眼见为实</h4><p>多说无益，还是眼见为实。下面就来对比一下使用管道和不使用管道的速度差异。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> COMMAND_NUM = <span class="number">1000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String REDIS_HOST = <span class="string">"Redis服务器IP"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(REDIS_HOST, <span class="number">6379</span>);</span><br><span class="line">        withoutPipeline(jedis);</span><br><span class="line">        withPipeline(jedis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">withoutPipeline</span><span class="params">(Jedis jedis)</span> </span>&#123;</span><br><span class="line">        Long start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; COMMAND_NUM; i++) &#123;</span><br><span class="line">            jedis.set(<span class="string">"no_pipe_"</span> + String.valueOf(i), String.valueOf(i), SetParams.setParams().ex(<span class="number">60</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> cost = end - start;</span><br><span class="line">        System.out.println(<span class="string">"withoutPipeline cost : "</span> + cost + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">withPipeline</span><span class="params">(Jedis jedis)</span> </span>&#123;</span><br><span class="line">        Pipeline pipe = jedis.pipelined();</span><br><span class="line">        <span class="keyword">long</span> start_pipe = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; COMMAND_NUM; i++) &#123;</span><br><span class="line">            pipe.set(<span class="string">"pipe_"</span> + String.valueOf(i), String.valueOf(i), SetParams.setParams().ex(<span class="number">60</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        pipe.sync(); <span class="comment">// 获取所有的response</span></span><br><span class="line">        <span class="keyword">long</span> end_pipe = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> cost_pipe = end_pipe - start_pipe;</span><br><span class="line">        System.out.println(<span class="string">"withPipeline cost : "</span> + cost_pipe + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果也符合我们的预期：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">withoutPipeline cost : 11791 ms</span><br><span class="line">withPipeline cost : 55 ms</span><br></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li><p>使用管道技术可以显著提升Redis处理命令的速度，其原理就是将多条命令打包，只需要一次网络开销，在服务器端和客户端各一次<code>read()</code>和<code>write()</code>系统调用，以此来节约时间。</p>
</li>
<li><p>管道中的命令数量要适当，并不是越多越好。</p>
</li>
<li><p>Redis2.6版本以后，脚本在大部分场景中的表现要优于管道。</p>
</li>
</ol>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>前面我们提到，为了解决网络开销带来的延迟问题，可以把客户端和服务器放到一台物理机上。但是有时用benchmark进行压测的时候发现这仍然很慢。</p>
<p>这时客户端和服务端实际是在一台物理机上的，所有的操作都在内存中进行，没有网络延迟，按理来说这样的操作应该是非常快的。为什么会出现上面的情况的呢？</p>
<p>实际上，这是由内核调度导致的。比如说，benchmark运行时，读取了服务器返回的结果，然后写了一个新的命令。这个命令就在回环接口的send buffer中了，如果要执行这个命令，内核需要唤醒Redis服务器进程。所以在某些情况下，本地接口也会出现类似于网络延迟的延迟。其实是内核特别繁忙，一直没有调度到Redis服务器进程。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://redis.io/topics/pipelining" target="_blank" rel="noopener">Redis官方文档</a></p>
<p>Redis源码</p>
<p>掘金小册：《Redis 深度历险：核心原理与应用实践》</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>送给你的算法敲门砖</title>
    <url>/2018/09/12/%E9%80%81%E7%BB%99%E4%BD%A0%E7%9A%84%E7%AE%97%E6%B3%95%E6%95%B2%E9%97%A8%E7%A0%96/</url>
    <content><![CDATA[<p>在学校的时候老师一直跟我们强调算法的重要性，我和大多数同学一样不以为然，觉得学起来又难又枯燥。直到开始找工作以后，被各种算法面试题打击得体无完肤的时候，才算明白算法的重要性。<a id="more"></a></p>
<p>近年来，人工智能、区块链、大数据等概念非常火热，特别是AlphaGo之后，各大公司也都在积极开展人工智能领域的相关业务，而其中算法工程师这个职位更是供不应求，最近在网上见到好多人说要转算法工程师，不管是学医的、学法律的、学建筑的甚至是学经济的，都有做算法工程师的想法。可以说已经达到了人人转算法的地步了，那么为什么大家都想做算法工程师呢？我们先来看一组数据。</p>
<p>首先是人工智能类岗位的招聘需求</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1536766458/Blog/%E7%AE%97%E6%B3%95/suanfa2.jpg" alt="suanfa2"></p>
<p>可以看到算法工程师的需求遥遥领先，需求大，机会就多，大家也就都愿意去尝试。但是只是这个原因似乎还不足以吸引这么多人去学算法。我们再来看一下互联网高薪清单</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1536766414/Blog/%E7%AE%97%E6%B3%95/suanfa1.png" alt="suanfa1"></p>
<p>其中，很大一部分都是算法工程师，我们都知道最近几年互联网行业的薪资已经超过了曾经的“高富帅”金融行业。而算法工程师在互联网中又是高薪岗位，这个吸引力可想而知，毕竟没有谁会跟钱过不去。</p>
<p>上面说的都是国内的情形，在国外，大公司更是注重算法，据说面试Google的Android工程师的时候，会问几道特别难的算法题，而只要这几道题你答得好，Google甚至不在乎你究竟有没有做过Android，因为在他们看来，这么难的算法题都能学会，那么学习Android的技术根本不在话下。</p>
<p>总得来说，算法可以被称为大公司的敲门砖，说到这，有的人可能已经等不及了，算法是大公司的敲门砖这件事我已经知道了，那你说的算法的敲门砖到底是什么啊？</p>
<p>其实，今天要推荐的是一个算法学习的网站，对于算法初学者，可能脑子里还不能很好的理清每个算法究竟是怎么一回事，或者说算法的工作原理到底什么样的。这个网站就是将算法可视化，把它的工作原理摆在你面前。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1536767683/Blog/%E7%AE%97%E6%B3%95/suanfa3.png" alt="suanfa3"></p>
<p>可以看到这里有很多算法和数据结构，包括排序算法、链表、Hash表、二叉搜索树等等。可以说应有尽有，只要你想学，就可以直接搜索相关的算法。点进去之后，会有相关的提示，然后就可以观看相关算法的工作视频了。这对于我们理解算法非常有帮助，把算法做到可视化，并且为你演示每一步如何工作，侧边栏还有相应的讲解。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1536767926/Blog/%E7%AE%97%E6%B3%95/suanfa4.png" alt="suanfa4"></p>
<p>总之，这个网站对于初学算法的同学来说算是一个非常好用的敲门砖了。这个网站的地址是：</p>
<p><a href="https://visualgo.net/" target="_blank" rel="noopener">https://visualgo.net/</a></p>
<p>建议大家最好看英文的，因为中文的翻译还是有些问题。可能在学习过程中造成一定的困惑。</p>
<p>最后，希望大家不要像我一样从入门到放弃，坚持下去，年薪百万不是梦。</p>
]]></content>
      <tags>
        <tag>瞎扯</tag>
      </tags>
  </entry>
  <entry>
    <title>走近源码：压缩列表是怎样炼成的</title>
    <url>/2019/03/23/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9A%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84/</url>
    <content><![CDATA[<p>经过前面对Redis源码的了解，令人印象深刻的也许就是Redis各种节约内存手段。而Redis对于内存的节约可以说是费尽心思，今天我就再来介绍一种Redis为了节约内存而创造的存储结构——压缩列表（ziplist）。<a id="more"></a></p>
<h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><p>ziplist是zset和hash在元素数量较少时使用的一种存储结构。它的特点存储于一块连续的内存，元素与元素之间没有空隙。我们可以用DEBUG OBJECT命令来查看一个zset的编码格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD db 1.0 mysql 2.0 mongo 3.0 redis</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; DEBUG OBJECT db</span><br><span class="line">Value at:0x7f5bf1908070 refcount:1 encoding:ziplist serializedlength:39 lru:9589668 lru_seconds_idle:12</span><br></pre></td></tr></table></figure>
<p>那么ziplist究竟是一种怎样的结构的，话不多说，直接看图。</p>
<h5 id="ZIPLIST-OVERALL-LAYOUT"><a href="#ZIPLIST-OVERALL-LAYOUT" class="headerlink" title="ZIPLIST OVERALL LAYOUT"></a>ZIPLIST OVERALL LAYOUT</h5><p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1553096929/Blog/Redis/ziplist/ziplist%E7%BB%93%E6%9E%84.png" alt="ziplist结构"></p>
<p>接下来我们挨个解释一下每一部分存储的内容：</p>
<ul>
<li>zlbytes：32位无符号整数，存储的是包括它自己在内的整个ziplist所占用的字节数</li>
<li>zltail：32位无符号整数，存储的是最后一个entry的偏移量，用来快速定位最后一个元素</li>
<li>zllen：16位无符号整数，用于存储entry的数量，当元素数量大于2<sup>16</sup>-2时，这个值就被设置为2<sup>16</sup>-1。我们想知道元素的数量就需要遍历整个列表</li>
<li>entry：表示存储的元素</li>
<li>zlend：8位无符号整数，用于标识整个ziplist的结尾。它的值是255。</li>
</ul>
<h5 id="ZIPLIST-ENTRIES"><a href="#ZIPLIST-ENTRIES" class="headerlink" title="ZIPLIST ENTRIES"></a>ZIPLIST ENTRIES</h5><p>了解了ziplist的大概结构以后，我们剖析更深一层的entry的结构。</p>
<p>对于每个entry都有两个前缀</p>
<ul>
<li>prevlen：表示前一个元素的长度，它与zltail字段结合使用可以实现快速的从后向前定位元素</li>
<li>encoding：表示元素的编码格式，它用来表示元素是整数还是字符串，如果是字符串，也表示字符串的长度</li>
<li>entry-data：元素的数据，它并不是一定存在，对于某些编码而言，编码本身也是数据，因此这一部分可以省略</li>
</ul>
<p>这里要解释一点，prevlen是一个变长的整数，当前一个元素的长度小于254时，它仅需要一个字节（8位无符号整数）表示，如果元素的长度大于（或等于）254字节，prevlen就用5个字节来表示，其中第一个字节是254，后4个字节表示前一个元素的长度。</p>
<p>encoding字段决定了元素的内容。如果entry存储的是字符串，那么就通过encoding的前两位来区分不同长度的字符串，如果entry存储的内容是整数，那么前两位都会被设置为1，再后面两位用来区分整数的类型。</p>
<ol>
<li>|00pppppp|：字符串长度小于63字节，pppppp是6位无符号整数，用来表示字符串长度</li>
<li>|01pppppp|qqqqqqqq|：字符串长度小于等于16383字节，后面14位表示字符串长度</li>
<li>|10000000|qqqqqqqq|rrrrrrrr|ssssssss|tttttttt|：字符串长度大于等于16384字节，后4个字节表示字符串长度</li>
<li>|11000000|：16位整数，后面跟2个字节存储整数</li>
<li>|11010000|：32位整数，后面跟4个字节存储整数</li>
<li>|11100000|：64位整数，后面跟8个字节存储整数</li>
<li>|11110000|：24位整数，后面跟3个字节存储整数</li>
<li>|11111110|：8位整数，后面跟1个字节存储整数</li>
<li>|1111xxxx|：(xxxx 取值从0000到1101)表示0到12的整数，读到的xxxx减1为实际表示的整数。这就是前面提到的省略entry-data的情况</li>
<li>|11111111|：ziplist的结束值，也就是zlend的值</li>
</ol>
<p>说了这么多，也许你还是不太清楚ziplist存储的内容究竟要表示什么，我们还是来举一个栗子</p>
<p>[0f 00 00 00] [0c 00 00 00] [02 00] [00 f3] [02 f6] [ff]</p>
<p>这是一个实际的ziplist存储的内容，我们就一起来解读一下。</p>
<p>首先是4个字节的zlbytes，ziplist一共是15个字节，因此zlbytes的值是0x0f；接下来是4个字节的zltail，偏移量是12，因此zltail的值是0x0c；后两个字节是zllen，也就是一共两个元素；第一个元素的prevlen为00，0xf3表示元素值是2：1111 0011符合上述第9条，读到xxxx为3，需要减1，因此实际值是2；第二个元素同理，0xf6表示的值是5，最后0xff表示这个ziplist结束。</p>
<p>这时，我向这个ziplist中又加了一个元素，是一个字符串，请大家自行解读下面的entry（注意，只是entry）。友情提示：需要查询ASCII码表来解读</p>
<p>[02] [0b] [48 65 6c 6c 6f 20 57 6f 72 6c 64]</p>
<h4 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h4><p>了解了ziplist的存储之后，我们再来看一下ziplist是如何增加元素的。前面提到过，ziplist存储结构用于元素数量少的zset和hash。那么我们就以zset为例，一起追踪源码，了解ziplist增加元素的过程。</p>
<p>我们从ZADD命令执行的函数zaddCommand()开始。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zaddCommand</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    zaddGenericCommand(c,ZADD_NONE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它只是简单调用了zaddGenericCommand()函数，传入了客户端对象c和一个标志位，表示要执行ZADD命令，因为这个函数同样也是ZINCRBY要执行的函数（传入的标志是ZADD_INCR）。</p>
<p>而在zaddGenericCommand()函数中，首先对参数进行了处理，并且做了一些校验。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Lookup the key and create the sorted set if does not exist. */</span></span><br><span class="line">zobj = lookupKeyWrite(c-&gt;db,key);</span><br><span class="line"><span class="keyword">if</span> (zobj == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xx) <span class="keyword">goto</span> reply_to_client; <span class="comment">/* No key + XX option: nothing to do. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.zset_max_ziplist_entries == <span class="number">0</span> ||</span><br><span class="line">        server.zset_max_ziplist_value &lt; sdslen(c-&gt;argv[scoreidx+<span class="number">1</span>]-&gt;ptr))</span><br><span class="line">    &#123;</span><br><span class="line">        zobj = createZsetObject();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        zobj = createZsetZiplistObject();</span><br><span class="line">    &#125;</span><br><span class="line">    dbAdd(c-&gt;db,key,zobj);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (zobj-&gt;type != OBJ_ZSET) &#123;</span><br><span class="line">        addReply(c,shared.wrongtypeerr);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后判断key是否存在，如果存在，验证数据类型；否则创建一个新的zset对象。这里可以看到，当</p>
<p>zset_max_ziplist_entries为0或者第一个元素的长度大于zset_max_ziplist_value时，创建zset对象，否则创建ziplist对象。创建好对象之后，就开始遍历元素，执行zsetAdd函数了：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; elements; j++) &#123;</span><br><span class="line">    <span class="keyword">double</span> newscore;</span><br><span class="line">    score = scores[j];</span><br><span class="line">    <span class="keyword">int</span> retflags = flags;</span><br><span class="line"></span><br><span class="line">    ele = c-&gt;argv[scoreidx+<span class="number">1</span>+j*<span class="number">2</span>]-&gt;ptr;</span><br><span class="line">    <span class="keyword">int</span> retval = zsetAdd(zobj, score, ele, &amp;retflags, &amp;newscore);</span><br><span class="line">    <span class="keyword">if</span> (retval == <span class="number">0</span>) &#123;</span><br><span class="line">        addReplyError(c,nanerr);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (retflags &amp; ZADD_ADDED) added++;</span><br><span class="line">    <span class="keyword">if</span> (retflags &amp; ZADD_UPDATED) updated++;</span><br><span class="line">    <span class="keyword">if</span> (!(retflags &amp; ZADD_NOP)) processed++;</span><br><span class="line">    score = newscore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数用来增加新元素或者更新元素的score。这个函数中判断了zset对象的编码方式，对压缩列表ziplist和跳跃列表skiplist分开处理，跳跃列表是zset的另一种编码方式，这个我们以后再介绍，本文我们只关注ziplist。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (zobj-&gt;encoding == OBJ_ENCODING_ZIPLIST) &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *eptr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((eptr = zzlFind(zobj-&gt;ptr,ele,&amp;curscore)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* NX? Return, same element already exists. */</span></span><br><span class="line">        <span class="keyword">if</span> (nx) &#123;</span><br><span class="line">            *flags |= ZADD_NOP;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Prepare the score for the increment if needed. */</span></span><br><span class="line">        <span class="keyword">if</span> (incr) &#123;</span><br><span class="line">            score += curscore;</span><br><span class="line">            <span class="keyword">if</span> (isnan(score)) &#123;</span><br><span class="line">                *flags |= ZADD_NAN;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newscore) *newscore = score;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Remove and re-insert when score changed. */</span></span><br><span class="line">        <span class="keyword">if</span> (score != curscore) &#123;</span><br><span class="line">            zobj-&gt;ptr = zzlDelete(zobj-&gt;ptr,eptr);</span><br><span class="line">            zobj-&gt;ptr = zzlInsert(zobj-&gt;ptr,ele,score);</span><br><span class="line">            *flags |= ZADD_UPDATED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!xx) &#123;</span><br><span class="line">        <span class="comment">/* Optimize: check if the element is too large or the list</span></span><br><span class="line"><span class="comment">             * becomes too long *before* executing zzlInsert. */</span></span><br><span class="line">        zobj-&gt;ptr = zzlInsert(zobj-&gt;ptr,ele,score);</span><br><span class="line">        <span class="keyword">if</span> (zzlLength(zobj-&gt;ptr) &gt; server.zset_max_ziplist_entries)</span><br><span class="line">            zsetConvert(zobj,OBJ_ENCODING_SKIPLIST);</span><br><span class="line">        <span class="keyword">if</span> (sdslen(ele) &gt; server.zset_max_ziplist_value)</span><br><span class="line">            zsetConvert(zobj,OBJ_ENCODING_SKIPLIST);</span><br><span class="line">        <span class="keyword">if</span> (newscore) *newscore = score;</span><br><span class="line">        *flags |= ZADD_ADDED;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *flags |= ZADD_NOP;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，这里首先调用zzlFind()函数查找对应的元素，如果元素存在，那么就判断是否包含参数NX或者是否是INCR操作。如果修改了元素的分数，则先删除原有的元素，再重新增加；如果元素不存在，就直接执行zzlInsert()函数，再insert之后，会判断是否需要改为跳跃列表存储。这里有两个条件：</p>
<ol>
<li>zset元素数量大于zset_max_ziplist_entries（默认128）</li>
<li>添加的元素长度大于zset_max_ziplist_value（默认64）</li>
</ol>
<p>满足任意一个条件，zset都会使用跳跃列表来存储。</p>
<p>我们继续追踪zzlInsert()函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">zzlInsert</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *zl, sds ele, <span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *eptr = ziplistIndex(zl,<span class="number">0</span>), *sptr;</span><br><span class="line">    <span class="keyword">double</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (eptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        sptr = ziplistNext(zl,eptr);</span><br><span class="line">        serverAssert(sptr != <span class="literal">NULL</span>);</span><br><span class="line">        s = zzlGetScore(sptr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s &gt; score) &#123;</span><br><span class="line">            <span class="comment">/* First element with score larger than score for element to be</span></span><br><span class="line"><span class="comment">             * inserted. This means we should take its spot in the list to</span></span><br><span class="line"><span class="comment">             * maintain ordering. */</span></span><br><span class="line">            zl = zzlInsertAt(zl,eptr,ele,score);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s == score) &#123;</span><br><span class="line">            <span class="comment">/* Ensure lexicographical ordering for elements. */</span></span><br><span class="line">            <span class="keyword">if</span> (zzlCompareElements(eptr,(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)ele,sdslen(ele)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                zl = zzlInsertAt(zl,eptr,ele,score);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Move to next element. */</span></span><br><span class="line">        eptr = ziplistNext(zl,sptr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Push on tail of list when it was not yet inserted. */</span></span><br><span class="line">    <span class="keyword">if</span> (eptr == <span class="literal">NULL</span>)</span><br><span class="line">        zl = zzlInsertAt(zl,<span class="literal">NULL</span>,ele,score);</span><br><span class="line">    <span class="keyword">return</span> zl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它首先定位了zset的第一个元素，如果该元素不为空，就比较该元素的分数s与要插入的元素分数score，如果s&gt;score，就插入到当前位置，如果分数相同，则比较元素（按字典序）。插入后，将后面的元素依次移到下一位。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">zzlInsertAt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *zl, <span class="keyword">unsigned</span> <span class="keyword">char</span> *eptr, sds ele, <span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *sptr;</span><br><span class="line">    <span class="keyword">char</span> scorebuf[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">int</span> scorelen;</span><br><span class="line">    <span class="keyword">size_t</span> offset;</span><br><span class="line"></span><br><span class="line">    scorelen = d2string(scorebuf,<span class="keyword">sizeof</span>(scorebuf),score);</span><br><span class="line">    <span class="keyword">if</span> (eptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        zl = ziplistPush(zl,(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)ele,sdslen(ele),ZIPLIST_TAIL);</span><br><span class="line">        zl = ziplistPush(zl,(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)scorebuf,scorelen,ZIPLIST_TAIL);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Keep offset relative to zl, as it might be re-allocated. */</span></span><br><span class="line">        offset = eptr-zl;</span><br><span class="line">        zl = ziplistInsert(zl,eptr,(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)ele,sdslen(ele));</span><br><span class="line">        eptr = zl+offset;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Insert score after the element. */</span></span><br><span class="line">        serverAssert((sptr = ziplistNext(zl,eptr)) != <span class="literal">NULL</span>);</span><br><span class="line">        zl = ziplistInsert(zl,sptr,(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)scorebuf,scorelen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> zl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在zzlInsertAt()函数中，主要是调用了ziplistPush()或者ziplistInsert()将元素和分数插入列表尾部或中间。插入顺序是先插入元素，然后插入分数。</p>
<p>接下来就到了ziplist.c文件中，真正向压缩列表中插入元素了。关键代码在__ziplistInsert()函数中。</p>
<p>首先需要计算插入位置前一个元素的长度，存储到当前entry的prevlen。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (p[<span class="number">0</span>] != ZIP_END) &#123;</span><br><span class="line">    ZIP_DECODE_PREVLEN(p, prevlensize, prevlen);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *ptail = ZIPLIST_ENTRY_TAIL(zl);</span><br><span class="line">    <span class="keyword">if</span> (ptail[<span class="number">0</span>] != ZIP_END) &#123;</span><br><span class="line">        prevlen = zipRawEntryLength(ptail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里区分了是否是在尾部插入元素的情况，如果是在尾部，就可以通过ziplist中的zltail字段直接定位。接下来就是尝试对插入的元素进行编码，判断是否可以存储为整数，如果不能，就按照字符串的编码格式来存储。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (zipTryEncoding(s,slen,&amp;value,&amp;encoding)) &#123;</span><br><span class="line">    <span class="comment">/* 'encoding' is set to the appropriate integer encoding */</span></span><br><span class="line">    reqlen = zipIntSize(encoding);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* 'encoding' is untouched, however zipStoreEntryEncoding will use the</span></span><br><span class="line"><span class="comment">         * string length to figure out how to encode it. */</span></span><br><span class="line">    reqlen = slen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一步判断是节省内存的关键，它会使用我们前面介绍的尽量小的编码格式来进行编码。编码完成后就要计算当前entry的长度，包括prevlen、encoding和entry-data，并且需要保证后一个entry（如果有的话）的prevlen能够保存当前entry的长度。这里调用的是zipPrevLenByteDiff()函数，需要的prevlen的长度和现有的prevlen的长度的差值，也就是说如果返回为整数，表示需要更多空间。</p>
<p>在这之后就要调用zrealloc()来扩展空间了。这里有可能会在原来的基础上进行扩展，也有可能重新分配一块内存，然后将原来的ziplist整体迁移。如果ziplist占用较大内存时，整体迁移的代价是很高的。有了足够的空间之后，就是把当前位置的entry向后移一位了，然后要修改这个entry的prevlen。更新zltail。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nextdiff != <span class="number">0</span>) &#123;</span><br><span class="line">    offset = p-zl;</span><br><span class="line">    zl = __ziplistCascadeUpdate(zl,p+reqlen);</span><br><span class="line">    p = zl+offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>nextdiff是前面zipPrevLenByteDiff()函数的返回值，它不为0表示需要更多空间（小于0时被置为0）。这时后面的元素需要级联更新。所有的这些处理完毕之后，我们终于可以把要插入的entry写入当前位置了，并且将ziplist的长度加1。</p>
<h4 id="级联更新"><a href="#级联更新" class="headerlink" title="级联更新"></a>级联更新</h4><p>如果一个entry的长度小于254字节，那么后一个元素的prevlen就用一个字节来存储，否则就要用5个字节存储。当我们插入一个元素时，如果它的长度大于253字节，那么原来的entry就可能从1个字节变成5个字节，而如果由于这一变化导致这个entry的长度大于254字节，那么后面的元素也要更新。到后面甚至有可能导致重新分配内存的问题，所以级联更新是一件很可怕的事情。</p>
<p>接下来就通过源码，看一下级联更新的具体步骤。（查看ziplist.c文件的__ziplistCascadeUpdate函数）</p>
<p>首先，判断当前entry是否是最后一个，如果是，则跳出级联更新。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (p[rawlen] == ZIP_END) <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>接着判断了下一个entry的prevlen长度是否发生变化，如果没有变化，也不用继续进行级联更新。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (next.prevrawlen == rawlen) break;</span><br></pre></td></tr></table></figure>
<p>而如果下一个entry的prevlen长度需要扩展，那么就先调用ziplistResize扩展内存，然后要更新zltail。要将后面的entry向后移动，再开始判断下一个entry是否需要更新。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (next.prevrawlensize &lt; rawlensize) &#123;</span><br><span class="line">    <span class="comment">/* The "prevlen" field of "next" needs more bytes to hold</span></span><br><span class="line"><span class="comment">     * the raw length of "cur". */</span></span><br><span class="line">    offset = p-zl;</span><br><span class="line">    extra = rawlensize-next.prevrawlensize;</span><br><span class="line">    zl = ziplistResize(zl,curlen+extra);</span><br><span class="line">    p = zl+offset;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Current pointer and offset for next element. */</span></span><br><span class="line">    np = p+rawlen;</span><br><span class="line">    noffset = np-zl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Update tail offset when next element is not the tail element. */</span></span><br><span class="line">    <span class="keyword">if</span> ((zl+intrev32ifbe(ZIPLIST_TAIL_OFFSET(zl))) != np) &#123;</span><br><span class="line">        ZIPLIST_TAIL_OFFSET(zl) =</span><br><span class="line">            intrev32ifbe(intrev32ifbe(ZIPLIST_TAIL_OFFSET(zl))+extra);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Move the tail to the back. */</span></span><br><span class="line">    memmove(np+rawlensize,</span><br><span class="line">            np+next.prevrawlensize,</span><br><span class="line">            curlen-noffset-next.prevrawlensize<span class="number">-1</span>);</span><br><span class="line">    zipStorePrevEntryLength(np,rawlen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Advance the cursor */</span></span><br><span class="line">    p += rawlen;</span><br><span class="line">    curlen += extra;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果后面的entry的prevlen大于需要的长度呢，此时应该收缩prevlen，如果要进行收缩，那么可能会继续级联更新。这太麻烦了，所以这里选择了浪费一些空间，用5个字节的空间来存储1个字节可以存储的内容。如果prevlen的长度等于需要的长度，就直接更新内容。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (next.prevrawlensize &gt; rawlensize) &#123;</span><br><span class="line">    <span class="comment">/* This would result in shrinking, which we want to avoid.</span></span><br><span class="line"><span class="comment">     * So, set "rawlen" in the available bytes. */</span></span><br><span class="line">    zipStorePrevEntryLengthLarge(p+rawlen,rawlen);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    zipStorePrevEntryLength(p+rawlen,rawlen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Stop here, as the raw length of "next" has not changed. */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>除了新增操作以外，删除操作也有可能引起级联更新。假设我们有3个entry是下面的情况</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1553350839/Blog/Redis/ziplist/%E7%BA%A7%E8%81%94%E6%9B%B4%E6%96%B0.png" alt="删除级联更新"></p>
<p>我们可以知道，entry2的prevlen需要5个字节，entry3的prevlen只需要1个字节。而如果我们删除了entry2，那么entry3的prevlen就需要扩展到5个字节，这一操作就有可能引起级联更新，后面的情况和新增节点时一样。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>最后做一个总结：</p>
<ol>
<li>压缩列表是zset和hash元素个数较少时的存储结构</li>
<li>ziplist由zlbytes、zltail、zllen、entry、zlend这五部分组成</li>
<li>每个entry由prevlen、encoding和entry-data三部分组成</li>
<li>ziplist增加元素时，需要重新计算插入位置的entry的prevlen（prevlen的长度为1字节或5字节），这一操作有可能引起级联更新。</li>
</ol>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>走近源码：神奇的HyperLogLog</title>
    <url>/2019/02/26/%E8%B5%B0%E8%BF%91%E6%BA%90%E7%A0%81%EF%BC%9A%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog/</url>
    <content><![CDATA[<p>HyperLogLog是Redis的高级数据结构，是统计基数的利器。<a href="https://jackeyzhe.github.io/2019/01/15/Redis%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%9AHyperLogLog/">前文</a>我们已经介绍过HyperLogLog的基本用法，如果只求会用，只需要掌握HyperLogLog的三个命令即可，如果想要更进一步了解HyperLogLog的原理以及源码实现，相信这篇文章会给你带来一些启发。<a id="more"></a></p>
<h4 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h4><blockquote>
<p>在<a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E5%AD%B8" target="_blank" rel="noopener">数学</a>上，<strong>基数</strong>或<strong>势</strong>，即<a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E5%90%88" target="_blank" rel="noopener">集合</a>中包含的<a href="https://zh.wikipedia.org/wiki/%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">元素</a>的“个数”（参见<a href="https://zh.wikipedia.org/wiki/%E5%8A%BF%E7%9A%84%E6%AF%94%E8%BE%83" target="_blank" rel="noopener">势的比较</a>），是日常交流中基数的概念在数学上的精确化（并使之不再受限于有限情形）。<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E9%9B%86%E5%90%88" target="_blank" rel="noopener">有限集合</a>的基数，其意义与日常用语中的“基数”相同，例如{\displaystyle {a,b,c}}<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/75e9bc621ced3f02e87b1c40be37867929142bf4" alt="\{a,b,c\}">的基数是3。<a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E9%99%90%E9%9B%86%E5%90%88" target="_blank" rel="noopener">无限集合</a>的基数，其意义在于比较两个集的大小，例如整数集和有理数集的基数相同；整数集的基数比实数集的小。</p>
</blockquote>
<p>在介绍HyperLogLog的原理之前，请你先来思考一下，如果让你来统计基数，你会用什么方法。</p>
<h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>熟悉Redis数据结构的同学一定首先会想到Set这个结构，我们只需要把数据都存入Set，然后用scard命令就可以得到结果，这是一种思路，但是存在一定的问题。如果数据量非常大，那么将会耗费很大的内存空间，如果这些数据仅仅是用来统计基数，那么无疑是造成了巨大的浪费，因此，我们需要找到一种占用内存较小的方法。</p>
<h5 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h5><p>bitmap同样是一种可以统计基数的方法，可以理解为用bit数组存储元素，例如01101001，表示的是[1,2,4,8]，bitmap中1的个数就是基数。bitmap也可以轻松合并多个集合，只需要将多个数组进行异或操作就可以了。bitmap相比于Set也大大节省了内存，我们来粗略计算一下，统计1亿个数据的基数，需要的内存是：100000000/8/1024/1024 ≈ 12M。</p>
<p>虽然bitmap在节省空间方面已经有了不错的表现，但是如果需要统计1000个对象，就需要大约12G的内存，显然这个结果仍然不能令我们满意。在这种情况下，HyperLogLog将会出来拯救我们。</p>
<h4 id="HyperLogLog原理"><a href="#HyperLogLog原理" class="headerlink" title="HyperLogLog原理"></a>HyperLogLog原理</h4><p>HyperLogLog实际上不会存储每个元素的值，它使用的是概率算法，通过存储元素的hash值的第一个1的位置，来计算元素数量。这么说不太容易理解，容我先搬出来一个栗子。</p>
<p>有一天Jack和丫丫玩抛硬币的游戏，规则是丫丫负责抛硬币，每次抛到正面为一回合，丫丫可以自己决定进行几个回合。最后需要告诉Jack最长的那个回合抛了多少次，再由Jack来猜丫丫一共进行了几个回合。Jack心想：这可不好猜啊，我得算算概率了。于是在脑海中绘制这样一张图。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1551599108/Blog/Redis/HyperLogLog/HLL1.png" alt="yb"></p>
<p>k是每回合抛到1所用的次数，我们已知的是最大的k值，可以用k<sub>max</sub>表示，由于每次抛硬币的结果只有0和1两种情况，因此，k<sub>max</sub>在任意回合出现的概率即为(1/2)<sup>k<sub>max</sub></sup>，因此可以推测n=2<sup>k<sub>max</sub></sup>。概率学把这种问题叫做伯努利实验。此时丫丫已经完成了n个回合，并且告诉Jack最长的一次抛了3次，Jack此时也胸有成竹，马上说出他的答案8，最后的结果是：丫丫只抛了一回合，Jack输了，要负责刷碗一个月。</p>
<p>终于，我们的<a href="https://en.wikipedia.org/wiki/Philippe_Flajolet" target="_blank" rel="noopener">Philippe Flajolet</a>教授遇到了Jack一样的问题，他决心吸取Jack的教训，要让这个算法更加准确，于是引入了桶的概念，计算m个桶的加权平均值，这样就能得到比较准确的答案了（实际上还要进行其他修正）。最终的公式如图</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1551621267/Blog/Redis/HyperLogLog/HLL2.png" alt="HyperLogLog公式"></p>
<p>其中m是桶的数量，const是修正常数，它的取值会根据m而变化。p=log<sub>2</sub>m</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (p) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">       constant = <span class="number">0.673</span> * m * m;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">       constant = <span class="number">0.697</span> * m * m;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">       constant = <span class="number">0.709</span> * m * m;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">       constant = (<span class="number">0.7213</span> / (<span class="number">1</span> + <span class="number">1.079</span> / m)) * m * m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们回到Redis，对于一个输入的字符串，首先得到64位的hash值，用前14位来定位桶的位置（共有2<sup>14</sup>，即16384个桶）。后面50位即为伯努利过程，每个桶有6bit，记录第一次出现1的位置count，如果count&gt;oldcount，就用count替换oldcount。</p>
<p>了解原理之后，我们再来聊一下HyperLogLog的存储。HyperLogLog的存储结构分为密集存储结构和稀疏存储结构两种，默认为稀疏存储结构，而我们常说的占用12K内存的则是密集存储结构。</p>
<h4 id="密集存储结构"><a href="#密集存储结构" class="headerlink" title="密集存储结构"></a>密集存储结构</h4><p>密集存储比较简单，就是连续16384个6bit的串成的位图。由于每个桶是6bit，因此对桶的定位要麻烦一些。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HLL_BITS 6 <span class="comment">/* Enough to count up to 63 leading zeroes. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HLL_REGISTER_MAX ((1&lt;&lt;HLL_BITS)-1)</span></span><br><span class="line"><span class="comment">/* Store the value of the register at position 'regnum' into variable 'target'.</span></span><br><span class="line"><span class="comment"> * 'p' is an array of unsigned bytes. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HLL_DENSE_GET_REGISTER(target,p,regnum) do &#123; \</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *_p = (<span class="keyword">uint8_t</span>*) p; \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> _byte = regnum*HLL_BITS/<span class="number">8</span>; \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> _fb = regnum*HLL_BITS&amp;<span class="number">7</span>; \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> _fb8 = <span class="number">8</span> - _fb; \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> b0 = _p[_byte]; \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> b1 = _p[_byte+<span class="number">1</span>]; \</span><br><span class="line">    target = ((b0 &gt;&gt; _fb) | (b1 &lt;&lt; _fb8)) &amp; HLL_REGISTER_MAX; \</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set the value of the register at position 'regnum' to 'val'.</span></span><br><span class="line"><span class="comment"> * 'p' is an array of unsigned bytes. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HLL_DENSE_SET_REGISTER(p,regnum,val) do &#123; \</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *_p = (<span class="keyword">uint8_t</span>*) p; \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> _byte = regnum*HLL_BITS/<span class="number">8</span>; \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> _fb = regnum*HLL_BITS&amp;<span class="number">7</span>; \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> _fb8 = <span class="number">8</span> - _fb; \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> _v = val; \</span><br><span class="line">    _p[_byte] &amp;= ~(HLL_REGISTER_MAX &lt;&lt; _fb); \</span><br><span class="line">    _p[_byte] |= _v &lt;&lt; _fb; \</span><br><span class="line">    _p[_byte+<span class="number">1</span>] &amp;= ~(HLL_REGISTER_MAX &gt;&gt; _fb8); \</span><br><span class="line">    _p[_byte+<span class="number">1</span>] |= _v &gt;&gt; _fb8; \</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>如果我们要定位的桶编号为regnum，它的偏移字节量为(regnum <em> 6) / 8，起始bit偏移为(regnum </em> 6) % 8，例如，我们要定位编号为5的桶，字节偏移是3，位偏移也是6，也就是说，从第4个字节的第7位开始是编号为3的桶。这里需要注意，字节序和我们平时的字节序相反，因此需要进行倒置。我们用一张图来说明Redis是如何定位桶并且得到存储的值（即HLL_DENSE_GET_REGISTER函数的解释）。</p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1551625904/Blog/Redis/HyperLogLog/HLL3.png" alt="桶定位"></p>
<p>对于编号为5的桶，我们已经得到了字节偏移_byte和为偏移_fb，b0 &gt;&gt; _fb和b1 &lt;&lt; _fb8操作是将字节倒置，然后进行拼接，并且保留最后6位。</p>
<h4 id="稀疏存储结构"><a href="#稀疏存储结构" class="headerlink" title="稀疏存储结构"></a>稀疏存储结构</h4><p>你以为Redis真的会用16384个6bit存储每一个HLL对象吗，那就too naive了，虽然它只占用了12K内存，但是Redis对于内存的节约已经到了丧心病狂的地步了。因此，如果比较多的计数值都是0，那么就会采用稀疏存储的结构。</p>
<p>对于连续多个计数值为0的桶，Redis使用的存储方式是：00xxxxxx，前缀两个0，后面6位的值加1表示有连续多少个桶的计数值为0，由于6bit最大能表示64个桶，所以Redis又设计了另一种表示方法：01xxxxxx yyyyyyyy，这样后面14bit就可以表示16384个桶了，而一个初始状态的HyperLogLog对象只需要用2个字节来存储。</p>
<p>如果连续的桶数都不是0，那么Redis的表示方式为1vvvvvxx，即为连续(xx+1)个桶的计数值都是(vvvvv+1)。例如，10011110表示连续3个8。这里使用5bit，最大只能表示32。因此，当某个计数值大于32时，Redis会将这个HyperLogLog对象调整为密集存储。</p>
<p>Redis用三条指令来表达稀疏存储的方式：</p>
<ol>
<li>ZERO:len 单个字节表示 00[len-1]，连续最多64个零计数值</li>
<li>VAL:value,len 单个字节表示 1[value-1][len-1]，连续 len 个值为 value 的计数值</li>
<li>XZERO:len 双字节表示 01[len-1]，连续最多16384个零计数值</li>
</ol>
<p>Redis从稀疏存储转换到密集存储的条件是：</p>
<ol>
<li>任意一个计数值从 32 变成 33，因为VAL指令已经无法容纳，它能表示的计数值最大为 32</li>
<li>稀疏存储占用的总字节数超过 3000 字节，这个阈值可以通过 hll_sparse_max_bytes 参数进行调整。</li>
</ol>
<h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><p>接下来通过源码来看一下pfadd和pfcount两个命令的具体流程。在这之前我们首先要了解的是HyperLogLog的头结构体和创建一个HyperLogLog对象的步骤。</p>
<h5 id="HyperLogLog头结构体"><a href="#HyperLogLog头结构体" class="headerlink" title="HyperLogLog头结构体"></a>HyperLogLog头结构体</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hllhdr</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> magic[<span class="number">4</span>];      <span class="comment">/* "HYLL" */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> encoding;   <span class="comment">/* HLL_DENSE or HLL_SPARSE. */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> notused[<span class="number">3</span>]; <span class="comment">/* Reserved for future use, must be zero. */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> card[<span class="number">8</span>];    <span class="comment">/* Cached cardinality, little endian. */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> registers[]; <span class="comment">/* Data bytes. */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="创建HyperLogLog对象"><a href="#创建HyperLogLog对象" class="headerlink" title="创建HyperLogLog对象"></a>创建HyperLogLog对象</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HLL_P 14 <span class="comment">/* The greater is P, the smaller the error. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HLL_REGISTERS (1&lt;&lt;HLL_P) <span class="comment">/* With P=14, 16384 registers. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HLL_SPARSE_XZERO_MAX_LEN 16384</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HLL_SPARSE_XZERO_SET(p,len) do &#123; \</span></span><br><span class="line">    <span class="keyword">int</span> _l = (len)<span class="number">-1</span>; \</span><br><span class="line">    *(p) = (_l&gt;&gt;<span class="number">8</span>) | HLL_SPARSE_XZERO_BIT; \</span><br><span class="line">    *((p)+<span class="number">1</span>) = (_l&amp;<span class="number">0xff</span>); \</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Create an HLL object. We always create the HLL using sparse encoding.</span></span><br><span class="line"><span class="comment"> * This will be upgraded to the dense representation as needed. */</span></span><br><span class="line"><span class="function">robj *<span class="title">createHLLObject</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    robj *o;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hllhdr</span> *<span class="title">hdr</span>;</span></span><br><span class="line">    sds s;</span><br><span class="line">    <span class="keyword">uint8_t</span> *p;</span><br><span class="line">    <span class="keyword">int</span> sparselen = HLL_HDR_SIZE +</span><br><span class="line">                    (((HLL_REGISTERS+(HLL_SPARSE_XZERO_MAX_LEN<span class="number">-1</span>)) /</span><br><span class="line">                     HLL_SPARSE_XZERO_MAX_LEN)*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> aux;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Populate the sparse representation with as many XZERO opcodes as</span></span><br><span class="line"><span class="comment">     * needed to represent all the registers. */</span></span><br><span class="line">    aux = HLL_REGISTERS;</span><br><span class="line">    s = sdsnewlen(<span class="literal">NULL</span>,sparselen);</span><br><span class="line">    p = (<span class="keyword">uint8_t</span>*)s + HLL_HDR_SIZE;</span><br><span class="line">    <span class="keyword">while</span>(aux) &#123;</span><br><span class="line">        <span class="keyword">int</span> xzero = HLL_SPARSE_XZERO_MAX_LEN;</span><br><span class="line">        <span class="keyword">if</span> (xzero &gt; aux) xzero = aux;</span><br><span class="line">        HLL_SPARSE_XZERO_SET(p,xzero);</span><br><span class="line">        p += <span class="number">2</span>;</span><br><span class="line">        aux -= xzero;</span><br><span class="line">    &#125;</span><br><span class="line">    serverAssert((p-(<span class="keyword">uint8_t</span>*)s) == sparselen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create the actual object. */</span></span><br><span class="line">    o = createObject(OBJ_STRING,s);</span><br><span class="line">    hdr = o-&gt;ptr;</span><br><span class="line">    <span class="built_in">memcpy</span>(hdr-&gt;magic,<span class="string">"HYLL"</span>,<span class="number">4</span>);</span><br><span class="line">    hdr-&gt;encoding = HLL_SPARSE;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里sparselen=HLL_HDR_SIZE+2，因为初始化时默认所有桶的计数值都是0。其他过程不难理解，用的存储方式是我们前面提到过的稀疏存储，创建的对象实质上是一个字符串对象，这也是字符串命令可以操作HyperLogLog对象的原因。</p>
<h5 id="PFADD命令"><a href="#PFADD命令" class="headerlink" title="PFADD命令"></a>PFADD命令</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PFADD var ele ele ele ... ele =&gt; :0 or :1 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pfaddCommand</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    robj *o = lookupKeyWrite(c-&gt;db,c-&gt;argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hllhdr</span> *<span class="title">hdr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> updated = <span class="number">0</span>, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* Create the key with a string value of the exact length to</span></span><br><span class="line"><span class="comment">         * hold our HLL data structure. sdsnewlen() when NULL is passed</span></span><br><span class="line"><span class="comment">         * is guaranteed to return bytes initialized to zero. */</span></span><br><span class="line">        o = createHLLObject();</span><br><span class="line">        dbAdd(c-&gt;db,c-&gt;argv[<span class="number">1</span>],o);</span><br><span class="line">        updated++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isHLLObjectOrReply(c,o) != C_OK) <span class="keyword">return</span>;</span><br><span class="line">        o = dbUnshareStringValue(c-&gt;db,c-&gt;argv[<span class="number">1</span>],o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Perform the low level ADD operation for every element. */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; c-&gt;argc; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> retval = hllAdd(o, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)c-&gt;argv[j]-&gt;ptr,</span><br><span class="line">                               sdslen(c-&gt;argv[j]-&gt;ptr));</span><br><span class="line">        <span class="keyword">switch</span>(retval) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            updated++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">            addReplySds(c,sdsnew(invalid_hll_err));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hdr = o-&gt;ptr;</span><br><span class="line">    <span class="keyword">if</span> (updated) &#123;</span><br><span class="line">        signalModifiedKey(c-&gt;db,c-&gt;argv[<span class="number">1</span>]);</span><br><span class="line">        notifyKeyspaceEvent(NOTIFY_STRING,<span class="string">"pfadd"</span>,c-&gt;argv[<span class="number">1</span>],c-&gt;db-&gt;id);</span><br><span class="line">        server.dirty++;</span><br><span class="line">        HLL_INVALIDATE_CACHE(hdr);</span><br><span class="line">    &#125;</span><br><span class="line">    addReply(c, updated ? shared.cone : shared.czero);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PFADD命令会先判断key是否存在，如果不存在，则创建一个新的HyperLogLog对象；如果存在，会调用isHLLObjectOrReply()函数检查这个对象是不是HyperLogLog对象，检查方法主要是检查魔数是否正确，存储结构是否正确以及头结构体的长度是否正确等。</p>
<p>一切就绪后，才可以调用hllAdd()函数添加元素。hllAdd函数很简单，只是根据存储结构判断需要调用hllDenseAdd()函数还是hllSparseAdd()函数。</p>
<p>密集存储结构只是比较新旧计数值，如果新计数值大于就计数值，就将其替代。</p>
<p>而稀疏存储结构要复杂一些：</p>
<ol>
<li>判断是否需要调整为密集存储结构，如果不需要则继续进行，否则就先调整为密集存储结构，然后执行添加操作</li>
<li>我们需要先定位要修改的字节段，通过循环计算每一段表示的桶的范围是否包括要修改的桶</li>
<li>定位到桶后，如果这个桶已经是VAL，并且计数值大于当前要添加的计数值，则返回0，如果小于当前计数值，就进行更新</li>
<li>如果是ZERO，并且长度为1，那么可以直接把它替换为VAL，并且设置计数值</li>
<li>如果不是上述两种情况，则需要对现有的存储进行拆分</li>
</ol>
<h5 id="PFCOUNT命令"><a href="#PFCOUNT命令" class="headerlink" title="PFCOUNT命令"></a>PFCOUNT命令</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PFCOUNT var -&gt; approximated cardinality of set. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pfcountCommand</span><span class="params">(client *c)</span> </span>&#123;</span><br><span class="line">    robj *o;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hllhdr</span> *<span class="title">hdr</span>;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> card;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Case 1: multi-key keys, cardinality of the union.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * When multiple keys are specified, PFCOUNT actually computes</span></span><br><span class="line"><span class="comment">     * the cardinality of the merge of the N HLLs specified. */</span></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;argc &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">uint8_t</span> max[HLL_HDR_SIZE+HLL_REGISTERS], *registers;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Compute an HLL with M[i] = MAX(M[i]_j). */</span></span><br><span class="line">        <span class="built_in">memset</span>(max,<span class="number">0</span>,<span class="keyword">sizeof</span>(max));</span><br><span class="line">        hdr = (struct hllhdr*) max;</span><br><span class="line">        hdr-&gt;encoding = HLL_RAW; <span class="comment">/* Special internal-only encoding. */</span></span><br><span class="line">        registers = max + HLL_HDR_SIZE;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; c-&gt;argc; j++) &#123;</span><br><span class="line">            <span class="comment">/* Check type and size. */</span></span><br><span class="line">            robj *o = lookupKeyRead(c-&gt;db,c-&gt;argv[j]);</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="literal">NULL</span>) <span class="keyword">continue</span>; <span class="comment">/* Assume empty HLL for non existing var.*/</span></span><br><span class="line">            <span class="keyword">if</span> (isHLLObjectOrReply(c,o) != C_OK) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Merge with this HLL with our 'max' HHL by setting max[i]</span></span><br><span class="line"><span class="comment">             * to MAX(max[i],hll[i]). */</span></span><br><span class="line">            <span class="keyword">if</span> (hllMerge(registers,o) == C_ERR) &#123;</span><br><span class="line">                addReplySds(c,sdsnew(invalid_hll_err));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Compute cardinality of the resulting set. */</span></span><br><span class="line">        addReplyLongLong(c,hllCount(hdr,<span class="literal">NULL</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Case 2: cardinality of the single HLL.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The user specified a single key. Either return the cached value</span></span><br><span class="line"><span class="comment">     * or compute one and update the cache. */</span></span><br><span class="line">    o = lookupKeyWrite(c-&gt;db,c-&gt;argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* No key? Cardinality is zero since no element was added, otherwise</span></span><br><span class="line"><span class="comment">         * we would have a key as HLLADD creates it as a side effect. */</span></span><br><span class="line">        addReply(c,shared.czero);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isHLLObjectOrReply(c,o) != C_OK) <span class="keyword">return</span>;</span><br><span class="line">        o = dbUnshareStringValue(c-&gt;db,c-&gt;argv[<span class="number">1</span>],o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Check if the cached cardinality is valid. */</span></span><br><span class="line">        hdr = o-&gt;ptr;</span><br><span class="line">        <span class="keyword">if</span> (HLL_VALID_CACHE(hdr)) &#123;</span><br><span class="line">            <span class="comment">/* Just return the cached value. */</span></span><br><span class="line">            card = (<span class="keyword">uint64_t</span>)hdr-&gt;card[<span class="number">0</span>];</span><br><span class="line">            card |= (<span class="keyword">uint64_t</span>)hdr-&gt;card[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            card |= (<span class="keyword">uint64_t</span>)hdr-&gt;card[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">            card |= (<span class="keyword">uint64_t</span>)hdr-&gt;card[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">            card |= (<span class="keyword">uint64_t</span>)hdr-&gt;card[<span class="number">4</span>] &lt;&lt; <span class="number">32</span>;</span><br><span class="line">            card |= (<span class="keyword">uint64_t</span>)hdr-&gt;card[<span class="number">5</span>] &lt;&lt; <span class="number">40</span>;</span><br><span class="line">            card |= (<span class="keyword">uint64_t</span>)hdr-&gt;card[<span class="number">6</span>] &lt;&lt; <span class="number">48</span>;</span><br><span class="line">            card |= (<span class="keyword">uint64_t</span>)hdr-&gt;card[<span class="number">7</span>] &lt;&lt; <span class="number">56</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> invalid = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* Recompute it and update the cached value. */</span></span><br><span class="line">            card = hllCount(hdr,&amp;invalid);</span><br><span class="line">            <span class="keyword">if</span> (invalid) &#123;</span><br><span class="line">                addReplySds(c,sdsnew(invalid_hll_err));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hdr-&gt;card[<span class="number">0</span>] = card &amp; <span class="number">0xff</span>;</span><br><span class="line">            hdr-&gt;card[<span class="number">1</span>] = (card &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">            hdr-&gt;card[<span class="number">2</span>] = (card &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">            hdr-&gt;card[<span class="number">3</span>] = (card &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">            hdr-&gt;card[<span class="number">4</span>] = (card &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">            hdr-&gt;card[<span class="number">5</span>] = (card &gt;&gt; <span class="number">40</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">            hdr-&gt;card[<span class="number">6</span>] = (card &gt;&gt; <span class="number">48</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">            hdr-&gt;card[<span class="number">7</span>] = (card &gt;&gt; <span class="number">56</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">            <span class="comment">/* This is not considered a read-only command even if the</span></span><br><span class="line"><span class="comment">             * data structure is not modified, since the cached value</span></span><br><span class="line"><span class="comment">             * may be modified and given that the HLL is a Redis string</span></span><br><span class="line"><span class="comment">             * we need to propagate the change. */</span></span><br><span class="line">            signalModifiedKey(c-&gt;db,c-&gt;argv[<span class="number">1</span>]);</span><br><span class="line">            server.dirty++;</span><br><span class="line">        &#125;</span><br><span class="line">        addReplyLongLong(c,card);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要计算多个HyperLogLog的基数，则需要将多个HyperLogLog对象合并，这里合并方法是将所有的HyperLogLog对象合并到一个名为max的对象中，max采用的是密集存储结构，如果被合并的对象也是密集存储结构，则循环比较每一个计数值，将大的那个存入max。如果被合并的是稀疏存储，则只需要比较VAL即可。</p>
<p>如果计算单个HyperLogLog对象的基数，则先判断对象头结构体中的基数缓存是否有效，如果有效，可直接返回。如果已经失效，则需要重新计算基数，并修改原有缓存，这也是PFCOUNT命令不被当做只读命令的原因。</p>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>最后，给大家推荐一个帮助理解HyperLogLog原理的工具：<a href="http://content.research.neustar.biz/blog/hll.html，有兴趣的话可以去学习一下。" target="_blank" rel="noopener">http://content.research.neustar.biz/blog/hll.html，有兴趣的话可以去学习一下。</a></p>
<p><img src="https://res.cloudinary.com/dxydgihag/image/upload/v1551712930/Blog/Redis/HyperLogLog/HLL4.png" alt="HLL原理工具"></p>
<p><em>参考阅读</em> </p>
<p><a href="http://antirez.com/news/75" target="_blank" rel="noopener">Redis new data structure: the HyperLogLog</a></p>
<p><a href="https://www.jianshu.com/p/55defda6dcd2" target="_blank" rel="noopener">探索HyperLogLog算法（含Java实现）</a></p>
<p><a href="https://juejin.im/book/5afc2e5f6fb9a07a9b362527" target="_blank" rel="noopener">Redis 深度历险：核心原理与应用实践</a></p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
